
test_proj_112.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000777c  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  080079b4  080079b4  000179b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007c9c  08007c9c  00017c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007ca4  08007ca4  00017ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007ca8  08007ca8  00017ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  08007cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  2000000c  08007cb5  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000c0  08007cb5  000200c0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f2e7  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001d7d  00000000  00000000  0002f326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bc8  00000000  00000000  000310a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000b20  00000000  00000000  00031c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030472  00000000  00000000  00032790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000fef4  00000000  00000000  00062c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001304ba  00000000  00000000  00072af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001a2fb0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002f84  00000000  00000000  001a3000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800799c 	.word	0x0800799c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	0800799c 	.word	0x0800799c

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002ae:	4604      	mov	r4, r0
 80002b0:	460f      	mov	r7, r1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d148      	bne.n	8000348 <__udivmoddi4+0xa0>
 80002b6:	428a      	cmp	r2, r1
 80002b8:	4694      	mov	ip, r2
 80002ba:	d961      	bls.n	8000380 <__udivmoddi4+0xd8>
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	b143      	cbz	r3, 80002d4 <__udivmoddi4+0x2c>
 80002c2:	f1c3 0120 	rsb	r1, r3, #32
 80002c6:	409f      	lsls	r7, r3
 80002c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002cc:	409c      	lsls	r4, r3
 80002ce:	fa20 f101 	lsr.w	r1, r0, r1
 80002d2:	430f      	orrs	r7, r1
 80002d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d8:	fa1f fe8c 	uxth.w	lr, ip
 80002dc:	0c22      	lsrs	r2, r4, #16
 80002de:	fbb7 f6f1 	udiv	r6, r7, r1
 80002e2:	fb01 7716 	mls	r7, r1, r6, r7
 80002e6:	fb06 f00e 	mul.w	r0, r6, lr
 80002ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ee:	4290      	cmp	r0, r2
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x5c>
 80002f2:	eb1c 0202 	adds.w	r2, ip, r2
 80002f6:	f106 37ff 	add.w	r7, r6, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x5a>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f200 8137 	bhi.w	8000570 <__udivmoddi4+0x2c8>
 8000302:	463e      	mov	r6, r7
 8000304:	1a12      	subs	r2, r2, r0
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb2 f0f1 	udiv	r0, r2, r1
 800030c:	fb01 2210 	mls	r2, r1, r0, r2
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000318:	45a6      	cmp	lr, r4
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x86>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x84>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f200 811c 	bhi.w	8000564 <__udivmoddi4+0x2bc>
 800032c:	4610      	mov	r0, r2
 800032e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000332:	eba4 040e 	sub.w	r4, r4, lr
 8000336:	2600      	movs	r6, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c5 4300 	strd	r4, r3, [r5]
 8000342:	4631      	mov	r1, r6
 8000344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	428b      	cmp	r3, r1
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0xb8>
 800034c:	2d00      	cmp	r5, #0
 800034e:	f000 80fd 	beq.w	800054c <__udivmoddi4+0x2a4>
 8000352:	2600      	movs	r6, #0
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	4630      	mov	r0, r6
 800035a:	4631      	mov	r1, r6
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	fab3 f683 	clz	r6, r3
 8000364:	2e00      	cmp	r6, #0
 8000366:	d14b      	bne.n	8000400 <__udivmoddi4+0x158>
 8000368:	428b      	cmp	r3, r1
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4282      	cmp	r2, r0
 8000370:	f240 80ef 	bls.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4630      	mov	r0, r6
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e3      	beq.n	8000342 <__udivmoddi4+0x9a>
 800037a:	e9c5 4700 	strd	r4, r7, [r5]
 800037e:	e7e0      	b.n	8000342 <__udivmoddi4+0x9a>
 8000380:	b902      	cbnz	r2, 8000384 <__udivmoddi4+0xdc>
 8000382:	deff      	udf	#255	; 0xff
 8000384:	fab2 f382 	clz	r3, r2
 8000388:	2b00      	cmp	r3, #0
 800038a:	f040 809d 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038e:	1a89      	subs	r1, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b297      	uxth	r7, r2
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f2fe 	udiv	r2, r1, lr
 800039e:	fb0e 1112 	mls	r1, lr, r2, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb07 f002 	mul.w	r0, r7, r2
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4288      	cmp	r0, r1
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80cf 	beq.w	800056a <__udivmoddi4+0x2c2>
 80003cc:	4642      	mov	r2, r8
 80003ce:	1a09      	subs	r1, r1, r0
 80003d0:	b2a4      	uxth	r4, r4
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 f707 	mul.w	r7, r0, r7
 80003de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e2:	42a7      	cmp	r7, r4
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x150>
 80003e6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x14e>
 80003f0:	42a7      	cmp	r7, r4
 80003f2:	f200 80b4 	bhi.w	800055e <__udivmoddi4+0x2b6>
 80003f6:	4608      	mov	r0, r1
 80003f8:	1be4      	subs	r4, r4, r7
 80003fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fe:	e79b      	b.n	8000338 <__udivmoddi4+0x90>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa01 f406 	lsl.w	r4, r1, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	40f9      	lsrs	r1, r7
 8000410:	40b2      	lsls	r2, r6
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa20 f307 	lsr.w	r3, r0, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	431c      	orrs	r4, r3
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	0c20      	lsrs	r0, r4, #16
 800042a:	fbb1 f8f9 	udiv	r8, r1, r9
 800042e:	fb09 1118 	mls	r1, r9, r8, r1
 8000432:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000436:	fb08 f00e 	mul.w	r0, r8, lr
 800043a:	4288      	cmp	r0, r1
 800043c:	d90f      	bls.n	800045e <__udivmoddi4+0x1b6>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f108 3aff 	add.w	sl, r8, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	4288      	cmp	r0, r1
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 808d 	beq.w	8000576 <__udivmoddi4+0x2ce>
 800045c:	46d0      	mov	r8, sl
 800045e:	1a09      	subs	r1, r1, r0
 8000460:	b2a4      	uxth	r4, r4
 8000462:	fbb1 f0f9 	udiv	r0, r1, r9
 8000466:	fb09 1110 	mls	r1, r9, r0, r1
 800046a:	fb00 fe0e 	mul.w	lr, r0, lr
 800046e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000472:	458e      	cmp	lr, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1de>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d201      	bcs.n	8000484 <__udivmoddi4+0x1dc>
 8000480:	458e      	cmp	lr, r1
 8000482:	d87f      	bhi.n	8000584 <__udivmoddi4+0x2dc>
 8000484:	4620      	mov	r0, r4
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	fba0 9802 	umull	r9, r8, r0, r2
 8000492:	4541      	cmp	r1, r8
 8000494:	464c      	mov	r4, r9
 8000496:	46c6      	mov	lr, r8
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0x1f8>
 800049a:	d106      	bne.n	80004aa <__udivmoddi4+0x202>
 800049c:	454b      	cmp	r3, r9
 800049e:	d204      	bcs.n	80004aa <__udivmoddi4+0x202>
 80004a0:	3801      	subs	r0, #1
 80004a2:	ebb9 0402 	subs.w	r4, r9, r2
 80004a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	d070      	beq.n	8000590 <__udivmoddi4+0x2e8>
 80004ae:	1b1a      	subs	r2, r3, r4
 80004b0:	eb61 010e 	sbc.w	r1, r1, lr
 80004b4:	fa22 f306 	lsr.w	r3, r2, r6
 80004b8:	fa01 f707 	lsl.w	r7, r1, r7
 80004bc:	40f1      	lsrs	r1, r6
 80004be:	2600      	movs	r6, #0
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0020 	rsb	r0, r3, #32
 80004d0:	fa01 f203 	lsl.w	r2, r1, r3
 80004d4:	fa21 f600 	lsr.w	r6, r1, r0
 80004d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004dc:	fa24 f100 	lsr.w	r1, r4, r0
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	409c      	lsls	r4, r3
 80004e6:	4311      	orrs	r1, r2
 80004e8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004ec:	0c0a      	lsrs	r2, r1, #16
 80004ee:	fb0e 6610 	mls	r6, lr, r0, r6
 80004f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f6:	fb00 f607 	mul.w	r6, r0, r7
 80004fa:	4296      	cmp	r6, r2
 80004fc:	d90e      	bls.n	800051c <__udivmoddi4+0x274>
 80004fe:	eb1c 0202 	adds.w	r2, ip, r2
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	bf2c      	ite	cs
 8000508:	f04f 0901 	movcs.w	r9, #1
 800050c:	f04f 0900 	movcc.w	r9, #0
 8000510:	4296      	cmp	r6, r2
 8000512:	d902      	bls.n	800051a <__udivmoddi4+0x272>
 8000514:	f1b9 0f00 	cmp.w	r9, #0
 8000518:	d031      	beq.n	800057e <__udivmoddi4+0x2d6>
 800051a:	4640      	mov	r0, r8
 800051c:	1b92      	subs	r2, r2, r6
 800051e:	b289      	uxth	r1, r1
 8000520:	fbb2 f6fe 	udiv	r6, r2, lr
 8000524:	fb0e 2216 	mls	r2, lr, r6, r2
 8000528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800052c:	fb06 f207 	mul.w	r2, r6, r7
 8000530:	428a      	cmp	r2, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x29c>
 8000534:	eb1c 0101 	adds.w	r1, ip, r1
 8000538:	f106 38ff 	add.w	r8, r6, #4294967295
 800053c:	d201      	bcs.n	8000542 <__udivmoddi4+0x29a>
 800053e:	428a      	cmp	r2, r1
 8000540:	d823      	bhi.n	800058a <__udivmoddi4+0x2e2>
 8000542:	4646      	mov	r6, r8
 8000544:	1a89      	subs	r1, r1, r2
 8000546:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800054a:	e725      	b.n	8000398 <__udivmoddi4+0xf0>
 800054c:	462e      	mov	r6, r5
 800054e:	4628      	mov	r0, r5
 8000550:	e6f7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000552:	1a84      	subs	r4, r0, r2
 8000554:	eb61 0303 	sbc.w	r3, r1, r3
 8000558:	2001      	movs	r0, #1
 800055a:	461f      	mov	r7, r3
 800055c:	e70b      	b.n	8000376 <__udivmoddi4+0xce>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e749      	b.n	80003f8 <__udivmoddi4+0x150>
 8000564:	4464      	add	r4, ip
 8000566:	3802      	subs	r0, #2
 8000568:	e6e1      	b.n	800032e <__udivmoddi4+0x86>
 800056a:	3a02      	subs	r2, #2
 800056c:	4461      	add	r1, ip
 800056e:	e72e      	b.n	80003ce <__udivmoddi4+0x126>
 8000570:	3e02      	subs	r6, #2
 8000572:	4462      	add	r2, ip
 8000574:	e6c6      	b.n	8000304 <__udivmoddi4+0x5c>
 8000576:	f1a8 0802 	sub.w	r8, r8, #2
 800057a:	4461      	add	r1, ip
 800057c:	e76f      	b.n	800045e <__udivmoddi4+0x1b6>
 800057e:	3802      	subs	r0, #2
 8000580:	4462      	add	r2, ip
 8000582:	e7cb      	b.n	800051c <__udivmoddi4+0x274>
 8000584:	3802      	subs	r0, #2
 8000586:	4461      	add	r1, ip
 8000588:	e77d      	b.n	8000486 <__udivmoddi4+0x1de>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	e7d9      	b.n	8000544 <__udivmoddi4+0x29c>
 8000590:	462e      	mov	r6, r5
 8000592:	e6d6      	b.n	8000342 <__udivmoddi4+0x9a>

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fa04 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f814 	bl	80005cc <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005a4:	f000 f85b 	bl	800065e <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f8c4 	bl	8000734 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005ac:	f000 f863 	bl	8000676 <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 80005b0:	f000 f874 	bl	800069c <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart1, "Hello world", strlen("Hello world"), HAL_MAX_DELAY);
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	220b      	movs	r2, #11
 80005ba:	4902      	ldr	r1, [pc, #8]	; (80005c4 <main+0x2c>)
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <main+0x30>)
 80005be:	f006 f961 	bl	8006884 <HAL_UART_Transmit>
 80005c2:	e7f7      	b.n	80005b4 <main+0x1c>
 80005c4:	080079b4 	.word	0x080079b4
 80005c8:	20000028 	.word	0x20000028

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b09e      	sub	sp, #120	; 0x78
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	2260      	movs	r2, #96	; 0x60
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f007 f9d6 	bl	800798c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]
 80005ee:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 ffcf 	bl	8001594 <HAL_PWREx_ControlVoltageScaling>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005fc:	f000 f8b4 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000600:	2310      	movs	r3, #16
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800060c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000610:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000612:	2300      	movs	r3, #0
 8000614:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	4618      	mov	r0, r3
 800061c:	f001 f8b4 	bl	8001788 <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000626:	f000 f89f 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	231f      	movs	r3, #31
 800062c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f002 f9bc 	bl	80029c4 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000652:	f000 f889 	bl	8000768 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3778      	adds	r7, #120	; 0x78
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000662:	2002      	movs	r0, #2
 8000664:	f001 f836 	bl	80016d4 <HAL_PWREx_ConfigSupply>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemPower_Config+0x14>
  {
    Error_Handler();
 800066e:	f000 f87b 	bl	8000768 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}

08000676 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800067a:	2000      	movs	r0, #0
 800067c:	f000 ff50 	bl	8001520 <HAL_ICACHE_ConfigAssociativityMode>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000686:	f000 f86f 	bl	8000768 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800068a:	f000 ff73 	bl	8001574 <HAL_ICACHE_Enable>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000694:	f000 f868 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <MX_USART1_UART_Init+0x90>)
 80006a2:	4a23      	ldr	r2, [pc, #140]	; (8000730 <MX_USART1_UART_Init+0x94>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006a6:	4b21      	ldr	r3, [pc, #132]	; (800072c <MX_USART1_UART_Init+0x90>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_USART1_UART_Init+0x90>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_USART1_UART_Init+0x90>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_USART1_UART_Init+0x90>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_USART1_UART_Init+0x90>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_USART1_UART_Init+0x90>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_USART1_UART_Init+0x90>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_USART1_UART_Init+0x90>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_USART1_UART_Init+0x90>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_USART1_UART_Init+0x90>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006e4:	4811      	ldr	r0, [pc, #68]	; (800072c <MX_USART1_UART_Init+0x90>)
 80006e6:	f005 ffdd 	bl	80066a4 <HAL_UART_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006f0:	f000 f83a 	bl	8000768 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f4:	2100      	movs	r1, #0
 80006f6:	480d      	ldr	r0, [pc, #52]	; (800072c <MX_USART1_UART_Init+0x90>)
 80006f8:	f006 ff6e 	bl	80075d8 <HAL_UARTEx_SetTxFifoThreshold>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000702:	f000 f831 	bl	8000768 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000706:	2100      	movs	r1, #0
 8000708:	4808      	ldr	r0, [pc, #32]	; (800072c <MX_USART1_UART_Init+0x90>)
 800070a:	f007 f819 	bl	8007740 <HAL_UARTEx_SetRxFifoThreshold>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000714:	f000 f828 	bl	8000768 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_USART1_UART_Init+0x90>)
 800071a:	f006 fecd 	bl	80074b8 <HAL_UARTEx_DisableFifoMode>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000724:	f000 f820 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000028 	.word	0x20000028
 8000730:	40013800 	.word	0x40013800

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_GPIO_Init+0x30>)
 800073c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000740:	4a08      	ldr	r2, [pc, #32]	; (8000764 <MX_GPIO_Init+0x30>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_GPIO_Init+0x30>)
 800074c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	46020c00 	.word	0x46020c00

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	e7fe      	b.n	8000770 <Error_Handler+0x8>

08000772 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <HAL_MspInit+0x34>)
 8000790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000794:	4a09      	ldr	r2, [pc, #36]	; (80007bc <HAL_MspInit+0x34>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <HAL_MspInit+0x34>)
 80007a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80007ac:	2004      	movs	r0, #4
 80007ae:	f000 fa31 	bl	8000c14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	46020c00 	.word	0x46020c00

080007c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b0bc      	sub	sp, #240	; 0xf0
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	22c8      	movs	r2, #200	; 0xc8
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f007 f8d3 	bl	800798c <memset>
  if(huart->Instance==USART1)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a26      	ldr	r2, [pc, #152]	; (8000884 <HAL_UART_MspInit+0xc4>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d145      	bne.n	800087c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007f0:	f04f 0201 	mov.w	r2, #1
 80007f4:	f04f 0300 	mov.w	r3, #0
 80007f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007fc:	2300      	movs	r3, #0
 80007fe:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4618      	mov	r0, r3
 8000806:	f002 fe01 	bl	800340c <HAL_RCCEx_PeriphCLKConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000810:	f7ff ffaa 	bl	8000768 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000814:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <HAL_UART_MspInit+0xc8>)
 8000816:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800081a:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <HAL_UART_MspInit+0xc8>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000820:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <HAL_UART_MspInit+0xc8>)
 8000826:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800082a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <HAL_UART_MspInit+0xc8>)
 8000834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000838:	4a13      	ldr	r2, [pc, #76]	; (8000888 <HAL_UART_MspInit+0xc8>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <HAL_UART_MspInit+0xc8>)
 8000844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000850:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000854:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800086a:	2307      	movs	r3, #7
 800086c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000874:	4619      	mov	r1, r3
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <HAL_UART_MspInit+0xcc>)
 8000878:	f000 fa22 	bl	8000cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800087c:	bf00      	nop
 800087e:	37f0      	adds	r7, #240	; 0xf0
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40013800 	.word	0x40013800
 8000888:	46020c00 	.word	0x46020c00
 800088c:	42020000 	.word	0x42020000

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008dc:	f000 f8c8 	bl	8000a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <SystemInit+0x68>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <SystemInit+0x68>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <SystemInit+0x6c>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <SystemInit+0x6c>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <SystemInit+0x6c>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <SystemInit+0x6c>)
 800090c:	2200      	movs	r2, #0
 800090e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <SystemInit+0x6c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <SystemInit+0x6c>)
 8000916:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800091a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800091e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <SystemInit+0x6c>)
 8000922:	2200      	movs	r2, #0
 8000924:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <SystemInit+0x6c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a09      	ldr	r2, [pc, #36]	; (8000950 <SystemInit+0x6c>)
 800092c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000930:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <SystemInit+0x6c>)
 8000934:	2200      	movs	r2, #0
 8000936:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <SystemInit+0x68>)
 800093a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800093e:	609a      	str	r2, [r3, #8]
  #endif
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00
 8000950:	46020c00 	.word	0x46020c00

08000954 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800098c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000958:	f7ff ffc4 	bl	80008e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800095c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800095e:	e003      	b.n	8000968 <LoopCopyDataInit>

08000960 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000962:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000964:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000966:	3104      	adds	r1, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000968:	480a      	ldr	r0, [pc, #40]	; (8000994 <LoopForever+0xa>)
	ldr	r3, =_edata
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <LoopForever+0xe>)
	adds	r2, r0, r1
 800096c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800096e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000970:	d3f6      	bcc.n	8000960 <CopyDataInit>
	ldr	r2, =_sbss
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000974:	e002      	b.n	800097c <LoopFillZerobss>

08000976 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000976:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000978:	f842 3b04 	str.w	r3, [r2], #4

0800097c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <LoopForever+0x16>)
	cmp	r2, r3
 800097e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000980:	d3f9      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000982:	f006 ffdf 	bl	8007944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000986:	f7ff fe07 	bl	8000598 <main>

0800098a <LoopForever>:

LoopForever:
    b LoopForever
 800098a:	e7fe      	b.n	800098a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800098c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000990:	08007cac 	.word	0x08007cac
	ldr	r0, =_sdata
 8000994:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000998:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 800099c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80009a0:	200000c0 	.word	0x200000c0

080009a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC1_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_Init+0x4c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <HAL_Init+0x4c>)
 80009b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 f92b 	bl	8000c14 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80009be:	f002 fb41 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 80009c2:	4602      	mov	r2, r0
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <HAL_Init+0x50>)
 80009c6:	6a1b      	ldr	r3, [r3, #32]
 80009c8:	f003 030f 	and.w	r3, r3, #15
 80009cc:	490b      	ldr	r1, [pc, #44]	; (80009fc <HAL_Init+0x54>)
 80009ce:	5ccb      	ldrb	r3, [r1, r3]
 80009d0:	fa22 f303 	lsr.w	r3, r2, r3
 80009d4:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <HAL_Init+0x58>)
 80009d6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d8:	2000      	movs	r0, #0
 80009da:	f000 f813 	bl	8000a04 <HAL_InitTick>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e002      	b.n	80009ee <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009e8:	f7ff fece 	bl	8000788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40022000 	.word	0x40022000
 80009f8:	46020c00 	.word	0x46020c00
 80009fc:	08007b9c 	.word	0x08007b9c
 8000a00:	20000000 	.word	0x20000000

08000a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <HAL_InitTick+0x60>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d101      	bne.n	8000a18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e021      	b.n	8000a5c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <HAL_InitTick+0x64>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_InitTick+0x60>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f93a 	bl	8000ca8 <HAL_SYSTICK_Config>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e00e      	b.n	8000a5c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d80a      	bhi.n	8000a5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f000 f902 	bl	8000c54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a50:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <HAL_InitTick+0x68>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a56:	2300      	movs	r3, #0
 8000a58:	e000      	b.n	8000a5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000004 	.word	0x20000004

08000a70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_IncTick+0x20>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_IncTick+0x24>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_IncTick+0x24>)
 8000a82:	6013      	str	r3, [r2, #0]
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000008 	.word	0x20000008
 8000a94:	200000bc 	.word	0x200000bc

08000a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <HAL_GetTick+0x14>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	200000bc 	.word	0x200000bc

08000ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <__NVIC_GetPriorityGrouping+0x18>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	f003 0307 	and.w	r3, r3, #7
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	; (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	; (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f1c3 0307 	rsb	r3, r3, #7
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	bf28      	it	cs
 8000b86:	2304      	movcs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d902      	bls.n	8000b98 <NVIC_EncodePriority+0x30>
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3b03      	subs	r3, #3
 8000b96:	e000      	b.n	8000b9a <NVIC_EncodePriority+0x32>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43d9      	mvns	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	4313      	orrs	r3, r2
         );
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3724      	adds	r7, #36	; 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be0:	d301      	bcc.n	8000be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00f      	b.n	8000c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <SysTick_Config+0x40>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bee:	210f      	movs	r1, #15
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f7ff ff8e 	bl	8000b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <SysTick_Config+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <SysTick_Config+0x40>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b07      	cmp	r3, #7
 8000c20:	d00f      	beq.n	8000c42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b06      	cmp	r3, #6
 8000c26:	d00c      	beq.n	8000c42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b05      	cmp	r3, #5
 8000c2c:	d009      	beq.n	8000c42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d006      	beq.n	8000c42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d003      	beq.n	8000c42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c3a:	21bc      	movs	r1, #188	; 0xbc
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000c3e:	f7ff fd98 	bl	8000772 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ff34 	bl	8000ab0 <__NVIC_SetPriorityGrouping>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	080079c0 	.word	0x080079c0

08000c54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d903      	bls.n	8000c70 <HAL_NVIC_SetPriority+0x1c>
 8000c68:	21d5      	movs	r1, #213	; 0xd5
 8000c6a:	480e      	ldr	r0, [pc, #56]	; (8000ca4 <HAL_NVIC_SetPriority+0x50>)
 8000c6c:	f7ff fd81 	bl	8000772 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b0f      	cmp	r3, #15
 8000c74:	d903      	bls.n	8000c7e <HAL_NVIC_SetPriority+0x2a>
 8000c76:	21d6      	movs	r1, #214	; 0xd6
 8000c78:	480a      	ldr	r0, [pc, #40]	; (8000ca4 <HAL_NVIC_SetPriority+0x50>)
 8000c7a:	f7ff fd7a 	bl	8000772 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7e:	f7ff ff3b 	bl	8000af8 <__NVIC_GetPriorityGrouping>
 8000c82:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	6978      	ldr	r0, [r7, #20]
 8000c8a:	f7ff ff6d 	bl	8000b68 <NVIC_EncodePriority>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff3c 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	080079c0 	.word	0x080079c0

08000ca8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff8d 	bl	8000bd0 <SysTick_Config>
 8000cb6:	4603      	mov	r3, r0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_TypeDef  *p_gpio;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a87      	ldr	r2, [pc, #540]	; (8000ef0 <HAL_GPIO_Init+0x230>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d04f      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a86      	ldr	r2, [pc, #536]	; (8000ef4 <HAL_GPIO_Init+0x234>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d04b      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a85      	ldr	r2, [pc, #532]	; (8000ef8 <HAL_GPIO_Init+0x238>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d047      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a84      	ldr	r2, [pc, #528]	; (8000efc <HAL_GPIO_Init+0x23c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d043      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a83      	ldr	r2, [pc, #524]	; (8000f00 <HAL_GPIO_Init+0x240>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d03f      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a82      	ldr	r2, [pc, #520]	; (8000f04 <HAL_GPIO_Init+0x244>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d03b      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a81      	ldr	r2, [pc, #516]	; (8000f08 <HAL_GPIO_Init+0x248>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d037      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a80      	ldr	r2, [pc, #512]	; (8000f0c <HAL_GPIO_Init+0x24c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d033      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a7f      	ldr	r2, [pc, #508]	; (8000f10 <HAL_GPIO_Init+0x250>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d02f      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a7e      	ldr	r2, [pc, #504]	; (8000f14 <HAL_GPIO_Init+0x254>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d02b      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a7d      	ldr	r2, [pc, #500]	; (8000f18 <HAL_GPIO_Init+0x258>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d027      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a7c      	ldr	r2, [pc, #496]	; (8000f1c <HAL_GPIO_Init+0x25c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d023      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a7b      	ldr	r2, [pc, #492]	; (8000f20 <HAL_GPIO_Init+0x260>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d01f      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a7a      	ldr	r2, [pc, #488]	; (8000f24 <HAL_GPIO_Init+0x264>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d01b      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a79      	ldr	r2, [pc, #484]	; (8000f28 <HAL_GPIO_Init+0x268>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d017      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a78      	ldr	r2, [pc, #480]	; (8000f2c <HAL_GPIO_Init+0x26c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d013      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a77      	ldr	r2, [pc, #476]	; (8000f30 <HAL_GPIO_Init+0x270>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d00f      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a76      	ldr	r2, [pc, #472]	; (8000f34 <HAL_GPIO_Init+0x274>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d00b      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a75      	ldr	r2, [pc, #468]	; (8000f38 <HAL_GPIO_Init+0x278>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d007      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a74      	ldr	r2, [pc, #464]	; (8000f3c <HAL_GPIO_Init+0x27c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_Init+0xb6>
 8000d6e:	21d1      	movs	r1, #209	; 0xd1
 8000d70:	4873      	ldr	r0, [pc, #460]	; (8000f40 <HAL_GPIO_Init+0x280>)
 8000d72:	f7ff fcfe 	bl	8000772 <assert_failed>
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d005      	beq.n	8000d8c <HAL_GPIO_Init+0xcc>
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	0c1b      	lsrs	r3, r3, #16
 8000d86:	041b      	lsls	r3, r3, #16
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0xd4>
 8000d8c:	21d2      	movs	r1, #210	; 0xd2
 8000d8e:	486c      	ldr	r0, [pc, #432]	; (8000f40 <HAL_GPIO_Init+0x280>)
 8000d90:	f7ff fcef 	bl	8000772 <assert_failed>
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d035      	beq.n	8000e08 <HAL_GPIO_Init+0x148>
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d031      	beq.n	8000e08 <HAL_GPIO_Init+0x148>
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b11      	cmp	r3, #17
 8000daa:	d02d      	beq.n	8000e08 <HAL_GPIO_Init+0x148>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d029      	beq.n	8000e08 <HAL_GPIO_Init+0x148>
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b12      	cmp	r3, #18
 8000dba:	d025      	beq.n	8000e08 <HAL_GPIO_Init+0x148>
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	4a60      	ldr	r2, [pc, #384]	; (8000f44 <HAL_GPIO_Init+0x284>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d020      	beq.n	8000e08 <HAL_GPIO_Init+0x148>
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	4a5f      	ldr	r2, [pc, #380]	; (8000f48 <HAL_GPIO_Init+0x288>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d01b      	beq.n	8000e08 <HAL_GPIO_Init+0x148>
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	4a5d      	ldr	r2, [pc, #372]	; (8000f4c <HAL_GPIO_Init+0x28c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d016      	beq.n	8000e08 <HAL_GPIO_Init+0x148>
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	4a5c      	ldr	r2, [pc, #368]	; (8000f50 <HAL_GPIO_Init+0x290>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d011      	beq.n	8000e08 <HAL_GPIO_Init+0x148>
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	4a5a      	ldr	r2, [pc, #360]	; (8000f54 <HAL_GPIO_Init+0x294>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d00c      	beq.n	8000e08 <HAL_GPIO_Init+0x148>
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	4a59      	ldr	r2, [pc, #356]	; (8000f58 <HAL_GPIO_Init+0x298>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d007      	beq.n	8000e08 <HAL_GPIO_Init+0x148>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b03      	cmp	r3, #3
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x148>
 8000e00:	21d3      	movs	r1, #211	; 0xd3
 8000e02:	484f      	ldr	r0, [pc, #316]	; (8000f40 <HAL_GPIO_Init+0x280>)
 8000e04:	f7ff fcb5 	bl	8000772 <assert_failed>

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e0c:	e379      	b.n	8001502 <HAL_GPIO_Init+0x842>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	2101      	movs	r1, #1
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 8369 	beq.w	80014fc <HAL_GPIO_Init+0x83c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a42      	ldr	r2, [pc, #264]	; (8000f38 <HAL_GPIO_Init+0x278>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	f040 8096 	bne.w	8000f60 <HAL_GPIO_Init+0x2a0>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69fa      	ldr	r2, [r7, #28]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0201 	and.w	r2, r3, #1
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69fa      	ldr	r2, [r7, #28]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69fa      	ldr	r2, [r7, #28]
 8000e62:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000e64:	4a3d      	ldr	r2, [pc, #244]	; (8000f5c <HAL_GPIO_Init+0x29c>)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e6c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000e6e:	4a3b      	ldr	r2, [pc, #236]	; (8000f5c <HAL_GPIO_Init+0x29c>)
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	4413      	add	r3, r2
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	08da      	lsrs	r2, r3, #3
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	3208      	adds	r2, #8
 8000e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e86:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	220f      	movs	r2, #15
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69fa      	ldr	r2, [r7, #28]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	220b      	movs	r2, #11
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69fa      	ldr	r2, [r7, #28]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	69f9      	ldr	r1, [r7, #28]
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69fa      	ldr	r2, [r7, #28]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2202      	movs	r2, #2
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	69fa      	ldr	r2, [r7, #28]
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	e1ce      	b.n	800128e <HAL_GPIO_Init+0x5ce>
 8000ef0:	42020000 	.word	0x42020000
 8000ef4:	52020000 	.word	0x52020000
 8000ef8:	42020400 	.word	0x42020400
 8000efc:	52020400 	.word	0x52020400
 8000f00:	42020800 	.word	0x42020800
 8000f04:	52020800 	.word	0x52020800
 8000f08:	42020c00 	.word	0x42020c00
 8000f0c:	52020c00 	.word	0x52020c00
 8000f10:	42021000 	.word	0x42021000
 8000f14:	52021000 	.word	0x52021000
 8000f18:	42021400 	.word	0x42021400
 8000f1c:	52021400 	.word	0x52021400
 8000f20:	42021800 	.word	0x42021800
 8000f24:	52021800 	.word	0x52021800
 8000f28:	42021c00 	.word	0x42021c00
 8000f2c:	52021c00 	.word	0x52021c00
 8000f30:	42022000 	.word	0x42022000
 8000f34:	52022000 	.word	0x52022000
 8000f38:	46020000 	.word	0x46020000
 8000f3c:	56020000 	.word	0x56020000
 8000f40:	080079fc 	.word	0x080079fc
 8000f44:	10110000 	.word	0x10110000
 8000f48:	10210000 	.word	0x10210000
 8000f4c:	10310000 	.word	0x10310000
 8000f50:	10120000 	.word	0x10120000
 8000f54:	10220000 	.word	0x10220000
 8000f58:	10320000 	.word	0x10320000
 8000f5c:	08007bf4 	.word	0x08007bf4
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d004      	beq.n	8000f72 <HAL_GPIO_Init+0x2b2>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b12      	cmp	r3, #18
 8000f6e:	f040 811f 	bne.w	80011b0 <HAL_GPIO_Init+0x4f0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a79      	ldr	r2, [pc, #484]	; (800115c <HAL_GPIO_Init+0x49c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d050      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a78      	ldr	r2, [pc, #480]	; (8001160 <HAL_GPIO_Init+0x4a0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d04c      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a77      	ldr	r2, [pc, #476]	; (8001164 <HAL_GPIO_Init+0x4a4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d048      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a76      	ldr	r2, [pc, #472]	; (8001168 <HAL_GPIO_Init+0x4a8>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d044      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a75      	ldr	r2, [pc, #468]	; (800116c <HAL_GPIO_Init+0x4ac>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d040      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a74      	ldr	r2, [pc, #464]	; (8001170 <HAL_GPIO_Init+0x4b0>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d03c      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a73      	ldr	r2, [pc, #460]	; (8001174 <HAL_GPIO_Init+0x4b4>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d038      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a72      	ldr	r2, [pc, #456]	; (8001178 <HAL_GPIO_Init+0x4b8>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d034      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a71      	ldr	r2, [pc, #452]	; (800117c <HAL_GPIO_Init+0x4bc>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d030      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a70      	ldr	r2, [pc, #448]	; (8001180 <HAL_GPIO_Init+0x4c0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d02c      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a6f      	ldr	r2, [pc, #444]	; (8001184 <HAL_GPIO_Init+0x4c4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d028      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a6e      	ldr	r2, [pc, #440]	; (8001188 <HAL_GPIO_Init+0x4c8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d024      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a6d      	ldr	r2, [pc, #436]	; (800118c <HAL_GPIO_Init+0x4cc>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d020      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a6c      	ldr	r2, [pc, #432]	; (8001190 <HAL_GPIO_Init+0x4d0>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d01c      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a6b      	ldr	r2, [pc, #428]	; (8001194 <HAL_GPIO_Init+0x4d4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d018      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a6a      	ldr	r2, [pc, #424]	; (8001198 <HAL_GPIO_Init+0x4d8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d014      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a69      	ldr	r2, [pc, #420]	; (800119c <HAL_GPIO_Init+0x4dc>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d010      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a68      	ldr	r2, [pc, #416]	; (80011a0 <HAL_GPIO_Init+0x4e0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d00c      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a67      	ldr	r2, [pc, #412]	; (80011a4 <HAL_GPIO_Init+0x4e4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d008      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a66      	ldr	r2, [pc, #408]	; (80011a8 <HAL_GPIO_Init+0x4e8>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d004      	beq.n	800101c <HAL_GPIO_Init+0x35c>
 8001012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001016:	4865      	ldr	r0, [pc, #404]	; (80011ac <HAL_GPIO_Init+0x4ec>)
 8001018:	f7ff fbab 	bl	8000772 <assert_failed>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a4f      	ldr	r2, [pc, #316]	; (800115c <HAL_GPIO_Init+0x49c>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d050      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a4e      	ldr	r2, [pc, #312]	; (8001160 <HAL_GPIO_Init+0x4a0>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d04c      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a4d      	ldr	r2, [pc, #308]	; (8001164 <HAL_GPIO_Init+0x4a4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d048      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a4c      	ldr	r2, [pc, #304]	; (8001168 <HAL_GPIO_Init+0x4a8>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d044      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a4b      	ldr	r2, [pc, #300]	; (800116c <HAL_GPIO_Init+0x4ac>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d040      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a4a      	ldr	r2, [pc, #296]	; (8001170 <HAL_GPIO_Init+0x4b0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d03c      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a49      	ldr	r2, [pc, #292]	; (8001174 <HAL_GPIO_Init+0x4b4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d038      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a48      	ldr	r2, [pc, #288]	; (8001178 <HAL_GPIO_Init+0x4b8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d034      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a47      	ldr	r2, [pc, #284]	; (800117c <HAL_GPIO_Init+0x4bc>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d030      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a46      	ldr	r2, [pc, #280]	; (8001180 <HAL_GPIO_Init+0x4c0>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d02c      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a45      	ldr	r2, [pc, #276]	; (8001184 <HAL_GPIO_Init+0x4c4>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d028      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a44      	ldr	r2, [pc, #272]	; (8001188 <HAL_GPIO_Init+0x4c8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d024      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a43      	ldr	r2, [pc, #268]	; (800118c <HAL_GPIO_Init+0x4cc>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d020      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a42      	ldr	r2, [pc, #264]	; (8001190 <HAL_GPIO_Init+0x4d0>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d01c      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a41      	ldr	r2, [pc, #260]	; (8001194 <HAL_GPIO_Init+0x4d4>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d018      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a40      	ldr	r2, [pc, #256]	; (8001198 <HAL_GPIO_Init+0x4d8>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d014      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a3f      	ldr	r2, [pc, #252]	; (800119c <HAL_GPIO_Init+0x4dc>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d010      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a3e      	ldr	r2, [pc, #248]	; (80011a0 <HAL_GPIO_Init+0x4e0>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d00c      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a3d      	ldr	r2, [pc, #244]	; (80011a4 <HAL_GPIO_Init+0x4e4>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d008      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a3c      	ldr	r2, [pc, #240]	; (80011a8 <HAL_GPIO_Init+0x4e8>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d004      	beq.n	80010c6 <HAL_GPIO_Init+0x406>
 80010bc:	f240 1101 	movw	r1, #257	; 0x101
 80010c0:	483a      	ldr	r0, [pc, #232]	; (80011ac <HAL_GPIO_Init+0x4ec>)
 80010c2:	f7ff fb56 	bl	8000772 <assert_failed>
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	2b0f      	cmp	r3, #15
 80010cc:	d904      	bls.n	80010d8 <HAL_GPIO_Init+0x418>
 80010ce:	f44f 7181 	mov.w	r1, #258	; 0x102
 80010d2:	4836      	ldr	r0, [pc, #216]	; (80011ac <HAL_GPIO_Init+0x4ec>)
 80010d4:	f7ff fb4d 	bl	8000772 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	220f      	movs	r2, #15
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	f003 020f 	and.w	r2, r3, #15
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	4313      	orrs	r3, r2
 8001114:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	69f9      	ldr	r1, [r7, #28]
 8001120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69fa      	ldr	r2, [r7, #28]
 8001138:	4013      	ands	r3, r2
 800113a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0203 	and.w	r2, r3, #3
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	4313      	orrs	r3, r2
 8001150:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e099      	b.n	800128e <HAL_GPIO_Init+0x5ce>
 800115a:	bf00      	nop
 800115c:	42020000 	.word	0x42020000
 8001160:	52020000 	.word	0x52020000
 8001164:	42020400 	.word	0x42020400
 8001168:	52020400 	.word	0x52020400
 800116c:	42020800 	.word	0x42020800
 8001170:	52020800 	.word	0x52020800
 8001174:	42020c00 	.word	0x42020c00
 8001178:	52020c00 	.word	0x52020c00
 800117c:	42021000 	.word	0x42021000
 8001180:	52021000 	.word	0x52021000
 8001184:	42021400 	.word	0x42021400
 8001188:	52021400 	.word	0x52021400
 800118c:	42021800 	.word	0x42021800
 8001190:	52021800 	.word	0x52021800
 8001194:	42021c00 	.word	0x42021c00
 8001198:	52021c00 	.word	0x52021c00
 800119c:	42022000 	.word	0x42022000
 80011a0:	52022000 	.word	0x52022000
 80011a4:	46020000 	.word	0x46020000
 80011a8:	56020000 	.word	0x56020000
 80011ac:	080079fc 	.word	0x080079fc
      }
      else
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a95      	ldr	r2, [pc, #596]	; (8001408 <HAL_GPIO_Init+0x748>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d050      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a94      	ldr	r2, [pc, #592]	; (800140c <HAL_GPIO_Init+0x74c>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d04c      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a93      	ldr	r2, [pc, #588]	; (8001410 <HAL_GPIO_Init+0x750>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d048      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a92      	ldr	r2, [pc, #584]	; (8001414 <HAL_GPIO_Init+0x754>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d044      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a91      	ldr	r2, [pc, #580]	; (8001418 <HAL_GPIO_Init+0x758>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d040      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a90      	ldr	r2, [pc, #576]	; (800141c <HAL_GPIO_Init+0x75c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d03c      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a8f      	ldr	r2, [pc, #572]	; (8001420 <HAL_GPIO_Init+0x760>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d038      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a8e      	ldr	r2, [pc, #568]	; (8001424 <HAL_GPIO_Init+0x764>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d034      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a8d      	ldr	r2, [pc, #564]	; (8001428 <HAL_GPIO_Init+0x768>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d030      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a8c      	ldr	r2, [pc, #560]	; (800142c <HAL_GPIO_Init+0x76c>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d02c      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a8b      	ldr	r2, [pc, #556]	; (8001430 <HAL_GPIO_Init+0x770>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d028      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a8a      	ldr	r2, [pc, #552]	; (8001434 <HAL_GPIO_Init+0x774>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d024      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a89      	ldr	r2, [pc, #548]	; (8001438 <HAL_GPIO_Init+0x778>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d020      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a88      	ldr	r2, [pc, #544]	; (800143c <HAL_GPIO_Init+0x77c>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d01c      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a87      	ldr	r2, [pc, #540]	; (8001440 <HAL_GPIO_Init+0x780>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d018      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a86      	ldr	r2, [pc, #536]	; (8001444 <HAL_GPIO_Init+0x784>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d014      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a85      	ldr	r2, [pc, #532]	; (8001448 <HAL_GPIO_Init+0x788>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d010      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a84      	ldr	r2, [pc, #528]	; (800144c <HAL_GPIO_Init+0x78c>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d00c      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a83      	ldr	r2, [pc, #524]	; (8001450 <HAL_GPIO_Init+0x790>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d008      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a82      	ldr	r2, [pc, #520]	; (8001454 <HAL_GPIO_Init+0x794>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d004      	beq.n	800125a <HAL_GPIO_Init+0x59a>
 8001250:	f240 1113 	movw	r1, #275	; 0x113
 8001254:	4880      	ldr	r0, [pc, #512]	; (8001458 <HAL_GPIO_Init+0x798>)
 8001256:	f7ff fa8c 	bl	8000772 <assert_failed>

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	4013      	ands	r3, r2
 8001270:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0203 	and.w	r2, r3, #3
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	69fa      	ldr	r2, [r7, #28]
 8001284:	4313      	orrs	r3, r2
 8001286:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	69fa      	ldr	r2, [r7, #28]
 800128c:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d00b      	beq.n	80012ae <HAL_GPIO_Init+0x5ee>
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d007      	beq.n	80012ae <HAL_GPIO_Init+0x5ee>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a2:	2b11      	cmp	r3, #17
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x5ee>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b12      	cmp	r3, #18
 80012ac:	d145      	bne.n	800133a <HAL_GPIO_Init+0x67a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d010      	beq.n	80012d8 <HAL_GPIO_Init+0x618>
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d00c      	beq.n	80012d8 <HAL_GPIO_Init+0x618>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d008      	beq.n	80012d8 <HAL_GPIO_Init+0x618>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d004      	beq.n	80012d8 <HAL_GPIO_Init+0x618>
 80012ce:	f240 1121 	movw	r1, #289	; 0x121
 80012d2:	4861      	ldr	r0, [pc, #388]	; (8001458 <HAL_GPIO_Init+0x798>)
 80012d4:	f7ff fa4d 	bl	8000772 <assert_failed>

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	69fa      	ldr	r2, [r7, #28]
 8001306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800130e:	2201      	movs	r2, #1
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69fa      	ldr	r2, [r7, #28]
 800131a:	4013      	ands	r3, r2
 800131c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	091b      	lsrs	r3, r3, #4
 8001324:	f003 0201 	and.w	r2, r3, #1
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	4313      	orrs	r3, r2
 8001332:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b03      	cmp	r3, #3
 8001340:	d028      	beq.n	8001394 <HAL_GPIO_Init+0x6d4>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00c      	beq.n	8001364 <HAL_GPIO_Init+0x6a4>
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d008      	beq.n	8001364 <HAL_GPIO_Init+0x6a4>
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d004      	beq.n	8001364 <HAL_GPIO_Init+0x6a4>
 800135a:	f240 1133 	movw	r1, #307	; 0x133
 800135e:	483e      	ldr	r0, [pc, #248]	; (8001458 <HAL_GPIO_Init+0x798>)
 8001360:	f7ff fa07 	bl	8000772 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	4013      	ands	r3, r2
 800137a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	4313      	orrs	r3, r2
 800138c:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 80ad 	beq.w	80014fc <HAL_GPIO_Init+0x83c>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80013a2:	4a2e      	ldr	r2, [pc, #184]	; (800145c <HAL_GPIO_Init+0x79c>)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	3318      	adds	r3, #24
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	220f      	movs	r2, #15
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69fa      	ldr	r2, [r7, #28]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	0a9a      	lsrs	r2, r3, #10
 80013ca:	4b25      	ldr	r3, [pc, #148]	; (8001460 <HAL_GPIO_Init+0x7a0>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	f002 0203 	and.w	r2, r2, #3
 80013d4:	00d2      	lsls	r2, r2, #3
 80013d6:	4093      	lsls	r3, r2
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80013de:	491f      	ldr	r1, [pc, #124]	; (800145c <HAL_GPIO_Init+0x79c>)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3318      	adds	r3, #24
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_GPIO_Init+0x79c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001404:	e02e      	b.n	8001464 <HAL_GPIO_Init+0x7a4>
 8001406:	bf00      	nop
 8001408:	42020000 	.word	0x42020000
 800140c:	52020000 	.word	0x52020000
 8001410:	42020400 	.word	0x42020400
 8001414:	52020400 	.word	0x52020400
 8001418:	42020800 	.word	0x42020800
 800141c:	52020800 	.word	0x52020800
 8001420:	42020c00 	.word	0x42020c00
 8001424:	52020c00 	.word	0x52020c00
 8001428:	42021000 	.word	0x42021000
 800142c:	52021000 	.word	0x52021000
 8001430:	42021400 	.word	0x42021400
 8001434:	52021400 	.word	0x52021400
 8001438:	42021800 	.word	0x42021800
 800143c:	52021800 	.word	0x52021800
 8001440:	42021c00 	.word	0x42021c00
 8001444:	52021c00 	.word	0x52021c00
 8001448:	42022000 	.word	0x42022000
 800144c:	52022000 	.word	0x52022000
 8001450:	46020000 	.word	0x46020000
 8001454:	56020000 	.word	0x56020000
 8001458:	080079fc 	.word	0x080079fc
 800145c:	46022000 	.word	0x46022000
 8001460:	002f7f7f 	.word	0x002f7f7f
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x7b0>
        {
          tmp |= iocurrent;
 8001468:	69fa      	ldr	r2, [r7, #28]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001470:	4a2a      	ldr	r2, [pc, #168]	; (800151c <HAL_GPIO_Init+0x85c>)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001476:	4b29      	ldr	r3, [pc, #164]	; (800151c <HAL_GPIO_Init+0x85c>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43db      	mvns	r3, r3
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	4013      	ands	r3, r2
 8001484:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x7da>
        {
          tmp |= iocurrent;
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800149a:	4a20      	ldr	r2, [pc, #128]	; (800151c <HAL_GPIO_Init+0x85c>)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80014a0:	4b1e      	ldr	r3, [pc, #120]	; (800151c <HAL_GPIO_Init+0x85c>)
 80014a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x806>
        {
          tmp |= iocurrent;
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80014c6:	4a15      	ldr	r2, [pc, #84]	; (800151c <HAL_GPIO_Init+0x85c>)
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_GPIO_Init+0x85c>)
 80014d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	4013      	ands	r3, r2
 80014de:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x834>
        {
          tmp |= iocurrent;
 80014ec:	69fa      	ldr	r2, [r7, #28]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80014f4:	4a09      	ldr	r2, [pc, #36]	; (800151c <HAL_GPIO_Init+0x85c>)
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3301      	adds	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	fa22 f303 	lsr.w	r3, r2, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	f47f ac7e 	bne.w	8000e0e <HAL_GPIO_Init+0x14e>
  }
}
 8001512:	bf00      	nop
 8001514:	bf00      	nop
 8001516:	3720      	adds	r7, #32
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	46022000 	.word	0x46022000

08001520 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <HAL_ICACHE_ConfigAssociativityMode+0x20>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b04      	cmp	r3, #4
 8001536:	d003      	beq.n	8001540 <HAL_ICACHE_ConfigAssociativityMode+0x20>
 8001538:	21a9      	movs	r1, #169	; 0xa9
 800153a:	480c      	ldr	r0, [pc, #48]	; (800156c <HAL_ICACHE_ConfigAssociativityMode+0x4c>)
 800153c:	f7ff f919 	bl	8000772 <assert_failed>

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_ICACHE_ConfigAssociativityMode+0x50>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <HAL_ICACHE_ConfigAssociativityMode+0x32>
  {
    status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e007      	b.n	8001562 <HAL_ICACHE_ConfigAssociativityMode+0x42>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <HAL_ICACHE_ConfigAssociativityMode+0x50>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 0204 	bic.w	r2, r3, #4
 800155a:	4905      	ldr	r1, [pc, #20]	; (8001570 <HAL_ICACHE_ConfigAssociativityMode+0x50>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	08007a38 	.word	0x08007a38
 8001570:	40030400 	.word	0x40030400

08001574 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_ICACHE_Enable+0x1c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_ICACHE_Enable+0x1c>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	40030400 	.word	0x40030400

08001594 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t timeout;
  uint32_t vos_old;

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80015a2:	d00f      	beq.n	80015c4 <HAL_PWREx_ControlVoltageScaling+0x30>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015aa:	d00b      	beq.n	80015c4 <HAL_PWREx_ControlVoltageScaling+0x30>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b2:	d007      	beq.n	80015c4 <HAL_PWREx_ControlVoltageScaling+0x30>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <HAL_PWREx_ControlVoltageScaling+0x30>
 80015ba:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 80015be:	483a      	ldr	r0, [pc, #232]	; (80016a8 <HAL_PWREx_ControlVoltageScaling+0x114>)
 80015c0:	f7ff f8d7 	bl	8000772 <assert_failed>

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80015c4:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_PWREx_ControlVoltageScaling+0x118>)
 80015c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015cc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d10b      	bne.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x5a>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015dc:	d905      	bls.n	80015ea <HAL_PWREx_ControlVoltageScaling+0x56>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80015de:	4b33      	ldr	r3, [pc, #204]	; (80016ac <HAL_PWREx_ControlVoltageScaling+0x118>)
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	4a32      	ldr	r2, [pc, #200]	; (80016ac <HAL_PWREx_ControlVoltageScaling+0x118>)
 80015e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e057      	b.n	800169e <HAL_PWREx_ControlVoltageScaling+0x10a>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f4:	d90a      	bls.n	800160c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_PWREx_ControlVoltageScaling+0x118>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4313      	orrs	r3, r2
 8001602:	4a2a      	ldr	r2, [pc, #168]	; (80016ac <HAL_PWREx_ControlVoltageScaling+0x118>)
 8001604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001608:	60d3      	str	r3, [r2, #12]
 800160a:	e007      	b.n	800161c <HAL_PWREx_ControlVoltageScaling+0x88>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_PWREx_ControlVoltageScaling+0x118>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001614:	4925      	ldr	r1, [pc, #148]	; (80016ac <HAL_PWREx_ControlVoltageScaling+0x118>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4313      	orrs	r3, r2
 800161a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a24      	ldr	r2, [pc, #144]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x120>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	099b      	lsrs	r3, r3, #6
 8001628:	2232      	movs	r2, #50	; 0x32
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	4a21      	ldr	r2, [pc, #132]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x120>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	099b      	lsrs	r3, r3, #6
 8001636:	3301      	adds	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800163a:	e002      	b.n	8001642 <HAL_PWREx_ControlVoltageScaling+0xae>
  {
    timeout--;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3b01      	subs	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <HAL_PWREx_ControlVoltageScaling+0x118>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <HAL_PWREx_ControlVoltageScaling+0xc0>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1f3      	bne.n	800163c <HAL_PWREx_ControlVoltageScaling+0xa8>
  }

  /* Check time out */
  if (timeout != 0U)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d01b      	beq.n	8001692 <HAL_PWREx_ControlVoltageScaling+0xfe>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x120>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	099b      	lsrs	r3, r3, #6
 8001666:	2232      	movs	r2, #50	; 0x32
 8001668:	fb02 f303 	mul.w	r3, r2, r3
 800166c:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x120>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	099b      	lsrs	r3, r3, #6
 8001674:	3301      	adds	r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001678:	e002      	b.n	8001680 <HAL_PWREx_ControlVoltageScaling+0xec>
    {
      timeout--;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3b01      	subs	r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_PWREx_ControlVoltageScaling+0x118>)
 8001682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <HAL_PWREx_ControlVoltageScaling+0xfe>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f3      	bne.n	800167a <HAL_PWREx_ControlVoltageScaling+0xe6>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_PWREx_ControlVoltageScaling+0x108>
  {
    return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e000      	b.n	800169e <HAL_PWREx_ControlVoltageScaling+0x10a>
  }

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	08007a74 	.word	0x08007a74
 80016ac:	46020800 	.word	0x46020800
 80016b0:	20000000 	.word	0x20000000
 80016b4:	10624dd3 	.word	0x10624dd3

080016b8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80016be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	46020800 	.word	0x46020800

080016d4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t timeout;

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <HAL_PWREx_ConfigSupply+0x1e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d004      	beq.n	80016f2 <HAL_PWREx_ConfigSupply+0x1e>
 80016e8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80016ec:	4822      	ldr	r0, [pc, #136]	; (8001778 <HAL_PWREx_ConfigSupply+0xa4>)
 80016ee:	f7ff f840 	bl	8000772 <assert_failed>

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80016f2:	4b22      	ldr	r3, [pc, #136]	; (800177c <HAL_PWREx_ConfigSupply+0xa8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a22      	ldr	r2, [pc, #136]	; (8001780 <HAL_PWREx_ConfigSupply+0xac>)
 80016f8:	fba2 2303 	umull	r2, r3, r2, r3
 80016fc:	099b      	lsrs	r3, r3, #6
 80016fe:	2232      	movs	r2, #50	; 0x32
 8001700:	fb02 f303 	mul.w	r3, r2, r3
 8001704:	4a1e      	ldr	r2, [pc, #120]	; (8001780 <HAL_PWREx_ConfigSupply+0xac>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	099b      	lsrs	r3, r3, #6
 800170c:	3301      	adds	r3, #1
 800170e:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d113      	bne.n	800173e <HAL_PWREx_ConfigSupply+0x6a>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	4a1a      	ldr	r2, [pc, #104]	; (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 800171c:	f023 0302 	bic.w	r3, r3, #2
 8001720:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001722:	e002      	b.n	800172a <HAL_PWREx_ConfigSupply+0x56>
    {
      timeout--;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3b01      	subs	r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 800172c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b02      	cmp	r3, #2
 8001734:	d116      	bne.n	8001764 <HAL_PWREx_ConfigSupply+0x90>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f3      	bne.n	8001724 <HAL_PWREx_ConfigSupply+0x50>
 800173c:	e012      	b.n	8001764 <HAL_PWREx_ConfigSupply+0x90>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	4a10      	ldr	r2, [pc, #64]	; (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800174a:	e002      	b.n	8001752 <HAL_PWREx_ConfigSupply+0x7e>
    {
      timeout--;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3b01      	subs	r3, #1
 8001750:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 8001754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <HAL_PWREx_ConfigSupply+0x90>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f3      	bne.n	800174c <HAL_PWREx_ConfigSupply+0x78>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_PWREx_ConfigSupply+0x9a>
  {
    return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e000      	b.n	8001770 <HAL_PWREx_ConfigSupply+0x9c>
  }

  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	08007a74 	.word	0x08007a74
 800177c:	20000000 	.word	0x20000000
 8001780:	10624dd3 	.word	0x10624dd3
 8001784:	46020800 	.word	0x46020800

08001788 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08e      	sub	sp, #56	; 0x38
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	f001 b908 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00a      	beq.n	80017c0 <HAL_RCC_OscConfig+0x38>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d004      	beq.n	80017c0 <HAL_RCC_OscConfig+0x38>
 80017b6:	f240 212f 	movw	r1, #559	; 0x22f
 80017ba:	4894      	ldr	r0, [pc, #592]	; (8001a0c <HAL_RCC_OscConfig+0x284>)
 80017bc:	f7fe ffd9 	bl	8000772 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c0:	4b93      	ldr	r3, [pc, #588]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ca:	4b91      	ldr	r3, [pc, #580]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 81d6 	beq.w	8001b8e <HAL_RCC_OscConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d008      	beq.n	80017fc <HAL_RCC_OscConfig+0x74>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d004      	beq.n	80017fc <HAL_RCC_OscConfig+0x74>
 80017f2:	f44f 710e 	mov.w	r1, #568	; 0x238
 80017f6:	4885      	ldr	r0, [pc, #532]	; (8001a0c <HAL_RCC_OscConfig+0x284>)
 80017f8:	f7fe ffbb 	bl	8000772 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	2bff      	cmp	r3, #255	; 0xff
 8001802:	d904      	bls.n	800180e <HAL_RCC_OscConfig+0x86>
 8001804:	f240 2139 	movw	r1, #569	; 0x239
 8001808:	4880      	ldr	r0, [pc, #512]	; (8001a0c <HAL_RCC_OscConfig+0x284>)
 800180a:	f7fe ffb2 	bl	8000772 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	2b00      	cmp	r3, #0
 8001814:	d04f      	beq.n	80018b6 <HAL_RCC_OscConfig+0x12e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800181e:	d04a      	beq.n	80018b6 <HAL_RCC_OscConfig+0x12e>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001828:	d045      	beq.n	80018b6 <HAL_RCC_OscConfig+0x12e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001832:	d040      	beq.n	80018b6 <HAL_RCC_OscConfig+0x12e>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800183c:	d03b      	beq.n	80018b6 <HAL_RCC_OscConfig+0x12e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001846:	d036      	beq.n	80018b6 <HAL_RCC_OscConfig+0x12e>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8001850:	d031      	beq.n	80018b6 <HAL_RCC_OscConfig+0x12e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	f1b3 4fe0 	cmp.w	r3, #1879048192	; 0x70000000
 800185a:	d02c      	beq.n	80018b6 <HAL_RCC_OscConfig+0x12e>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001864:	d027      	beq.n	80018b6 <HAL_RCC_OscConfig+0x12e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	f1b3 4f10 	cmp.w	r3, #2415919104	; 0x90000000
 800186e:	d022      	beq.n	80018b6 <HAL_RCC_OscConfig+0x12e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8001878:	d01d      	beq.n	80018b6 <HAL_RCC_OscConfig+0x12e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	f1b3 4f30 	cmp.w	r3, #2952790016	; 0xb0000000
 8001882:	d018      	beq.n	80018b6 <HAL_RCC_OscConfig+0x12e>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800188c:	d013      	beq.n	80018b6 <HAL_RCC_OscConfig+0x12e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	f1b3 4f50 	cmp.w	r3, #3489660928	; 0xd0000000
 8001896:	d00e      	beq.n	80018b6 <HAL_RCC_OscConfig+0x12e>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80018a0:	d009      	beq.n	80018b6 <HAL_RCC_OscConfig+0x12e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 80018aa:	d004      	beq.n	80018b6 <HAL_RCC_OscConfig+0x12e>
 80018ac:	f240 213a 	movw	r1, #570	; 0x23a
 80018b0:	4856      	ldr	r0, [pc, #344]	; (8001a0c <HAL_RCC_OscConfig+0x284>)
 80018b2:	f7fe ff5e 	bl	8000772 <assert_failed>

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80018b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d007      	beq.n	80018cc <HAL_RCC_OscConfig+0x144>
 80018bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	f040 80e3 	bne.w	8001a8a <HAL_RCC_OscConfig+0x302>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	f040 80df 	bne.w	8001a8a <HAL_RCC_OscConfig+0x302>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	f001 b86c 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018de:	4b4c      	ldr	r3, [pc, #304]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d004      	beq.n	80018f4 <HAL_RCC_OscConfig+0x16c>
 80018ea:	4b49      	ldr	r3, [pc, #292]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80018f2:	e005      	b.n	8001900 <HAL_RCC_OscConfig+0x178>
 80018f4:	4b46      	ldr	r3, [pc, #280]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 80018f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018fa:	041b      	lsls	r3, r3, #16
 80018fc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001900:	4293      	cmp	r3, r2
 8001902:	d255      	bcs.n	80019b0 <HAL_RCC_OscConfig+0x228>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10a      	bne.n	8001920 <HAL_RCC_OscConfig+0x198>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	4618      	mov	r0, r3
 8001910:	f001 fcf6 	bl	8003300 <RCC_SetFlashLatencyFromMSIRange>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <HAL_RCC_OscConfig+0x198>
            {
              return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	f001 b849 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001920:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4a3a      	ldr	r2, [pc, #232]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001926:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800192a:	6093      	str	r3, [r2, #8]
 800192c:	4b38      	ldr	r3, [pc, #224]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	4935      	ldr	r1, [pc, #212]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001946:	d309      	bcc.n	800195c <HAL_RCC_OscConfig+0x1d4>
 8001948:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f023 021f 	bic.w	r2, r3, #31
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	492e      	ldr	r1, [pc, #184]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001956:	4313      	orrs	r3, r2
 8001958:	60cb      	str	r3, [r1, #12]
 800195a:	e083      	b.n	8001a64 <HAL_RCC_OscConfig+0x2dc>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	2b00      	cmp	r3, #0
 8001962:	da0a      	bge.n	800197a <HAL_RCC_OscConfig+0x1f2>
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	015b      	lsls	r3, r3, #5
 8001972:	4927      	ldr	r1, [pc, #156]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001974:	4313      	orrs	r3, r2
 8001976:	60cb      	str	r3, [r1, #12]
 8001978:	e074      	b.n	8001a64 <HAL_RCC_OscConfig+0x2dc>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001982:	d30a      	bcc.n	800199a <HAL_RCC_OscConfig+0x212>
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	029b      	lsls	r3, r3, #10
 8001992:	491f      	ldr	r1, [pc, #124]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001994:	4313      	orrs	r3, r2
 8001996:	60cb      	str	r3, [r1, #12]
 8001998:	e064      	b.n	8001a64 <HAL_RCC_OscConfig+0x2dc>
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	03db      	lsls	r3, r3, #15
 80019a8:	4919      	ldr	r1, [pc, #100]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60cb      	str	r3, [r1, #12]
 80019ae:	e059      	b.n	8001a64 <HAL_RCC_OscConfig+0x2dc>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4a16      	ldr	r2, [pc, #88]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019ba:	6093      	str	r3, [r2, #8]
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	4911      	ldr	r1, [pc, #68]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80019d6:	d309      	bcc.n	80019ec <HAL_RCC_OscConfig+0x264>
 80019d8:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f023 021f 	bic.w	r2, r3, #31
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	490a      	ldr	r1, [pc, #40]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	60cb      	str	r3, [r1, #12]
 80019ea:	e02d      	b.n	8001a48 <HAL_RCC_OscConfig+0x2c0>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	da0f      	bge.n	8001a14 <HAL_RCC_OscConfig+0x28c>
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	015b      	lsls	r3, r3, #5
 8001a02:	4903      	ldr	r1, [pc, #12]	; (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	60cb      	str	r3, [r1, #12]
 8001a08:	e01e      	b.n	8001a48 <HAL_RCC_OscConfig+0x2c0>
 8001a0a:	bf00      	nop
 8001a0c:	08007ab0 	.word	0x08007ab0
 8001a10:	46020c00 	.word	0x46020c00
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1c:	d30a      	bcc.n	8001a34 <HAL_RCC_OscConfig+0x2ac>
 8001a1e:	4b92      	ldr	r3, [pc, #584]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	029b      	lsls	r3, r3, #10
 8001a2c:	498e      	ldr	r1, [pc, #568]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60cb      	str	r3, [r1, #12]
 8001a32:	e009      	b.n	8001a48 <HAL_RCC_OscConfig+0x2c0>
 8001a34:	4b8c      	ldr	r3, [pc, #560]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	03db      	lsls	r3, r3, #15
 8001a42:	4989      	ldr	r1, [pc, #548]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10a      	bne.n	8001a64 <HAL_RCC_OscConfig+0x2dc>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	4618      	mov	r0, r3
 8001a54:	f001 fc54 	bl	8003300 <RCC_SetFlashLatencyFromMSIRange>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <HAL_RCC_OscConfig+0x2dc>
            {
              return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f000 bfa7 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001a64:	f001 fbf6 	bl	8003254 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a68:	4b80      	ldr	r3, [pc, #512]	; (8001c6c <HAL_RCC_OscConfig+0x4e4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe ffc9 	bl	8000a04 <HAL_InitTick>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8001a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 8085 	beq.w	8001b8c <HAL_RCC_OscConfig+0x404>
        {
          return status;
 8001a82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a86:	f000 bf94 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d061      	beq.n	8001b56 <HAL_RCC_OscConfig+0x3ce>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001a92:	4b75      	ldr	r3, [pc, #468]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a74      	ldr	r2, [pc, #464]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a9e:	f7fe fffb 	bl	8000a98 <HAL_GetTick>
 8001aa2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001aa4:	e009      	b.n	8001aba <HAL_RCC_OscConfig+0x332>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aa6:	f7fe fff7 	bl	8000a98 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d902      	bls.n	8001aba <HAL_RCC_OscConfig+0x332>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	f000 bf7c 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001aba:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0ef      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x31e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001ac6:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	4a67      	ldr	r2, [pc, #412]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001acc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ad0:	6093      	str	r3, [r2, #8]
 8001ad2:	4b65      	ldr	r3, [pc, #404]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	4962      	ldr	r1, [pc, #392]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001aec:	d309      	bcc.n	8001b02 <HAL_RCC_OscConfig+0x37a>
 8001aee:	4b5e      	ldr	r3, [pc, #376]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f023 021f 	bic.w	r2, r3, #31
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	495b      	ldr	r1, [pc, #364]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60cb      	str	r3, [r1, #12]
 8001b00:	e045      	b.n	8001b8e <HAL_RCC_OscConfig+0x406>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	da0a      	bge.n	8001b20 <HAL_RCC_OscConfig+0x398>
 8001b0a:	4b57      	ldr	r3, [pc, #348]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	015b      	lsls	r3, r3, #5
 8001b18:	4953      	ldr	r1, [pc, #332]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60cb      	str	r3, [r1, #12]
 8001b1e:	e036      	b.n	8001b8e <HAL_RCC_OscConfig+0x406>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b28:	d30a      	bcc.n	8001b40 <HAL_RCC_OscConfig+0x3b8>
 8001b2a:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	029b      	lsls	r3, r3, #10
 8001b38:	494b      	ldr	r1, [pc, #300]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60cb      	str	r3, [r1, #12]
 8001b3e:	e026      	b.n	8001b8e <HAL_RCC_OscConfig+0x406>
 8001b40:	4b49      	ldr	r3, [pc, #292]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	03db      	lsls	r3, r3, #15
 8001b4e:	4946      	ldr	r1, [pc, #280]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60cb      	str	r3, [r1, #12]
 8001b54:	e01b      	b.n	8001b8e <HAL_RCC_OscConfig+0x406>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001b56:	4b44      	ldr	r3, [pc, #272]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a43      	ldr	r2, [pc, #268]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001b62:	f7fe ff99 	bl	8000a98 <HAL_GetTick>
 8001b66:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001b68:	e009      	b.n	8001b7e <HAL_RCC_OscConfig+0x3f6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b6a:	f7fe ff95 	bl	8000a98 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d902      	bls.n	8001b7e <HAL_RCC_OscConfig+0x3f6>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	f000 bf1a 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001b7e:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1ef      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3e2>
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x406>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001b8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 80ab 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x56a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_RCC_OscConfig+0x444>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bac:	d00e      	beq.n	8001bcc <HAL_RCC_OscConfig+0x444>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb6:	d009      	beq.n	8001bcc <HAL_RCC_OscConfig+0x444>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001bc0:	d004      	beq.n	8001bcc <HAL_RCC_OscConfig+0x444>
 8001bc2:	f240 21a9 	movw	r1, #681	; 0x2a9
 8001bc6:	482a      	ldr	r0, [pc, #168]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001bc8:	f7fe fdd3 	bl	8000772 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d005      	beq.n	8001bde <HAL_RCC_OscConfig+0x456>
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd4:	2b0c      	cmp	r3, #12
 8001bd6:	d10a      	bne.n	8001bee <HAL_RCC_OscConfig+0x466>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_OscConfig+0x466>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f040 8085 	bne.w	8001cf2 <HAL_RCC_OscConfig+0x56a>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	f000 bee2 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x47e>
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1a      	ldr	r2, [pc, #104]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	e048      	b.n	8001c98 <HAL_RCC_OscConfig+0x510>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c0e:	d112      	bne.n	8001c36 <HAL_RCC_OscConfig+0x4ae>
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001c16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001c22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	e030      	b.n	8001c98 <HAL_RCC_OscConfig+0x510>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001c3e:	d119      	bne.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001c46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a02      	ldr	r2, [pc, #8]	; (8001c68 <HAL_RCC_OscConfig+0x4e0>)
 8001c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	e018      	b.n	8001c98 <HAL_RCC_OscConfig+0x510>
 8001c66:	bf00      	nop
 8001c68:	46020c00 	.word	0x46020c00
 8001c6c:	20000004 	.word	0x20000004
 8001c70:	08007ab0 	.word	0x08007ab0
 8001c74:	4ba2      	ldr	r3, [pc, #648]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4aa1      	ldr	r2, [pc, #644]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b9f      	ldr	r3, [pc, #636]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a9e      	ldr	r2, [pc, #632]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b9c      	ldr	r3, [pc, #624]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a9b      	ldr	r2, [pc, #620]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001c92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d014      	beq.n	8001cca <HAL_RCC_OscConfig+0x542>
      {
        tickstart = HAL_GetTick();
 8001ca0:	f7fe fefa 	bl	8000a98 <HAL_GetTick>
 8001ca4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ca6:	e009      	b.n	8001cbc <HAL_RCC_OscConfig+0x534>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7fe fef6 	bl	8000a98 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d902      	bls.n	8001cbc <HAL_RCC_OscConfig+0x534>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	f000 be7b 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cbc:	4b90      	ldr	r3, [pc, #576]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0ef      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x520>
 8001cc8:	e013      	b.n	8001cf2 <HAL_RCC_OscConfig+0x56a>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001cca:	f7fe fee5 	bl	8000a98 <HAL_GetTick>
 8001cce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cd0:	e009      	b.n	8001ce6 <HAL_RCC_OscConfig+0x55e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd2:	f7fe fee1 	bl	8000a98 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b64      	cmp	r3, #100	; 0x64
 8001cde:	d902      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x55e>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	f000 be66 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ce6:	4b86      	ldr	r3, [pc, #536]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1ef      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x54a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d074      	beq.n	8001de8 <HAL_RCC_OscConfig+0x660>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <HAL_RCC_OscConfig+0x592>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d0e:	d004      	beq.n	8001d1a <HAL_RCC_OscConfig+0x592>
 8001d10:	f240 21da 	movw	r1, #730	; 0x2da
 8001d14:	487b      	ldr	r0, [pc, #492]	; (8001f04 <HAL_RCC_OscConfig+0x77c>)
 8001d16:	f7fe fd2c 	bl	8000772 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	2b1f      	cmp	r3, #31
 8001d20:	d904      	bls.n	8001d2c <HAL_RCC_OscConfig+0x5a4>
 8001d22:	f240 21db 	movw	r1, #731	; 0x2db
 8001d26:	4877      	ldr	r0, [pc, #476]	; (8001f04 <HAL_RCC_OscConfig+0x77c>)
 8001d28:	f7fe fd23 	bl	8000772 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d005      	beq.n	8001d3e <HAL_RCC_OscConfig+0x5b6>
 8001d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d34:	2b0c      	cmp	r3, #12
 8001d36:	d114      	bne.n	8001d62 <HAL_RCC_OscConfig+0x5da>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d111      	bne.n	8001d62 <HAL_RCC_OscConfig+0x5da>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d102      	bne.n	8001d4c <HAL_RCC_OscConfig+0x5c4>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f000 be33 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001d4c:	4b6c      	ldr	r3, [pc, #432]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	041b      	lsls	r3, r3, #16
 8001d5a:	4969      	ldr	r1, [pc, #420]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d60:	e042      	b.n	8001de8 <HAL_RCC_OscConfig+0x660>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d024      	beq.n	8001db4 <HAL_RCC_OscConfig+0x62c>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001d6a:	4b65      	ldr	r3, [pc, #404]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a64      	ldr	r2, [pc, #400]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d74:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001d76:	f7fe fe8f 	bl	8000a98 <HAL_GetTick>
 8001d7a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d7c:	e009      	b.n	8001d92 <HAL_RCC_OscConfig+0x60a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7fe fe8b 	bl	8000a98 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d902      	bls.n	8001d92 <HAL_RCC_OscConfig+0x60a>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	f000 be10 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d92:	4b5b      	ldr	r3, [pc, #364]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0ef      	beq.n	8001d7e <HAL_RCC_OscConfig+0x5f6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001d9e:	4b58      	ldr	r3, [pc, #352]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	041b      	lsls	r3, r3, #16
 8001dac:	4954      	ldr	r1, [pc, #336]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	610b      	str	r3, [r1, #16]
 8001db2:	e019      	b.n	8001de8 <HAL_RCC_OscConfig+0x660>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001db4:	4b52      	ldr	r3, [pc, #328]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a51      	ldr	r2, [pc, #324]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001dba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dbe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001dc0:	f7fe fe6a 	bl	8000a98 <HAL_GetTick>
 8001dc4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dc6:	e009      	b.n	8001ddc <HAL_RCC_OscConfig+0x654>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7fe fe66 	bl	8000a98 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d902      	bls.n	8001ddc <HAL_RCC_OscConfig+0x654>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	f000 bdeb 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ddc:	4b48      	ldr	r3, [pc, #288]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1ef      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80ee 	beq.w	8001fd2 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCC_OscConfig+0x68a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e06:	d004      	beq.n	8001e12 <HAL_RCC_OscConfig+0x68a>
 8001e08:	f240 3119 	movw	r1, #793	; 0x319
 8001e0c:	483d      	ldr	r0, [pc, #244]	; (8001f04 <HAL_RCC_OscConfig+0x77c>)
 8001e0e:	f7fe fcb0 	bl	8000772 <assert_failed>

    FlagStatus  pwrclkchanged = RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e18:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d111      	bne.n	8001e4a <HAL_RCC_OscConfig+0x6c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e2c:	4a34      	ldr	r2, [pc, #208]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001e36:	4b32      	ldr	r3, [pc, #200]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001e44:	2301      	movs	r3, #1
 8001e46:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e4a:	4b2f      	ldr	r3, [pc, #188]	; (8001f08 <HAL_RCC_OscConfig+0x780>)
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d119      	bne.n	8001e8a <HAL_RCC_OscConfig+0x702>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001e56:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <HAL_RCC_OscConfig+0x780>)
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	4a2b      	ldr	r2, [pc, #172]	; (8001f08 <HAL_RCC_OscConfig+0x780>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e62:	f7fe fe19 	bl	8000a98 <HAL_GetTick>
 8001e66:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e68:	e009      	b.n	8001e7e <HAL_RCC_OscConfig+0x6f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6a:	f7fe fe15 	bl	8000a98 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d902      	bls.n	8001e7e <HAL_RCC_OscConfig+0x6f6>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	f000 bd9a 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e7e:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <HAL_RCC_OscConfig+0x780>)
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0ef      	beq.n	8001e6a <HAL_RCC_OscConfig+0x6e2>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d076      	beq.n	8001f80 <HAL_RCC_OscConfig+0x7f8>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001e92:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001e94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e98:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d009      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x72e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001eaa:	d004      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x72e>
 8001eac:	f240 313b 	movw	r1, #827	; 0x33b
 8001eb0:	4814      	ldr	r0, [pc, #80]	; (8001f04 <HAL_RCC_OscConfig+0x77c>)
 8001eb2:	f7fe fc5e 	bl	8000772 <assert_failed>

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699a      	ldr	r2, [r3, #24]
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d03f      	beq.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <HAL_RCC_OscConfig+0x756>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <HAL_RCC_OscConfig+0x756>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f000 bd6a 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d022      	beq.n	8001f2e <HAL_RCC_OscConfig+0x7a6>
        {
          __HAL_RCC_LSI_DISABLE();
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001ef0:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001ef4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001ef8:	f7fe fdce 	bl	8000a98 <HAL_GetTick>
 8001efc:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001efe:	e00f      	b.n	8001f20 <HAL_RCC_OscConfig+0x798>
 8001f00:	46020c00 	.word	0x46020c00
 8001f04:	08007ab0 	.word	0x08007ab0
 8001f08:	46020800 	.word	0x46020800
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f0c:	f7fe fdc4 	bl	8000a98 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b05      	cmp	r3, #5
 8001f18:	d902      	bls.n	8001f20 <HAL_RCC_OscConfig+0x798>
            {
              return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	f000 bd49 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001f20:	4baa      	ldr	r3, [pc, #680]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 8001f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1ee      	bne.n	8001f0c <HAL_RCC_OscConfig+0x784>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001f2e:	4ba7      	ldr	r3, [pc, #668]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 8001f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f34:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	49a3      	ldr	r1, [pc, #652]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001f44:	4ba1      	ldr	r3, [pc, #644]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 8001f46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f4a:	4aa0      	ldr	r2, [pc, #640]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 8001f4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f50:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001f54:	f7fe fda0 	bl	8000a98 <HAL_GetTick>
 8001f58:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001f5a:	e009      	b.n	8001f70 <HAL_RCC_OscConfig+0x7e8>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5c:	f7fe fd9c 	bl	8000a98 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b05      	cmp	r3, #5
 8001f68:	d902      	bls.n	8001f70 <HAL_RCC_OscConfig+0x7e8>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	f000 bd21 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001f70:	4b96      	ldr	r3, [pc, #600]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 8001f72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0ee      	beq.n	8001f5c <HAL_RCC_OscConfig+0x7d4>
 8001f7e:	e01c      	b.n	8001fba <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001f80:	4b92      	ldr	r3, [pc, #584]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 8001f82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f86:	4a91      	ldr	r2, [pc, #580]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 8001f88:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001f8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001f90:	f7fe fd82 	bl	8000a98 <HAL_GetTick>
 8001f94:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001f96:	e009      	b.n	8001fac <HAL_RCC_OscConfig+0x824>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f98:	f7fe fd7e 	bl	8000a98 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d902      	bls.n	8001fac <HAL_RCC_OscConfig+0x824>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	f000 bd03 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001fac:	4b87      	ldr	r3, [pc, #540]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 8001fae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1ee      	bne.n	8001f98 <HAL_RCC_OscConfig+0x810>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x84a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc2:	4b82      	ldr	r3, [pc, #520]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 8001fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc8:	4a80      	ldr	r2, [pc, #512]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 8001fca:	f023 0304 	bic.w	r3, r3, #4
 8001fce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8131 	beq.w	8002242 <HAL_RCC_OscConfig+0xaba>
  {
    FlagStatus pwrclkchanged = RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d014      	beq.n	8002018 <HAL_RCC_OscConfig+0x890>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b81      	cmp	r3, #129	; 0x81
 8001ff4:	d010      	beq.n	8002018 <HAL_RCC_OscConfig+0x890>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d00c      	beq.n	8002018 <HAL_RCC_OscConfig+0x890>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b05      	cmp	r3, #5
 8002004:	d008      	beq.n	8002018 <HAL_RCC_OscConfig+0x890>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b85      	cmp	r3, #133	; 0x85
 800200c:	d004      	beq.n	8002018 <HAL_RCC_OscConfig+0x890>
 800200e:	f240 3186 	movw	r1, #902	; 0x386
 8002012:	486f      	ldr	r0, [pc, #444]	; (80021d0 <HAL_RCC_OscConfig+0xa48>)
 8002014:	f7fe fbad 	bl	8000772 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002018:	4b6c      	ldr	r3, [pc, #432]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 800201a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d111      	bne.n	800204a <HAL_RCC_OscConfig+0x8c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	4b69      	ldr	r3, [pc, #420]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 8002028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202c:	4a67      	ldr	r2, [pc, #412]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002036:	4b65      	ldr	r3, [pc, #404]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 8002038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002044:	2301      	movs	r3, #1
 8002046:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800204a:	4b62      	ldr	r3, [pc, #392]	; (80021d4 <HAL_RCC_OscConfig+0xa4c>)
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d119      	bne.n	800208a <HAL_RCC_OscConfig+0x902>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002056:	4b5f      	ldr	r3, [pc, #380]	; (80021d4 <HAL_RCC_OscConfig+0xa4c>)
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	4a5e      	ldr	r2, [pc, #376]	; (80021d4 <HAL_RCC_OscConfig+0xa4c>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002062:	f7fe fd19 	bl	8000a98 <HAL_GetTick>
 8002066:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002068:	e009      	b.n	800207e <HAL_RCC_OscConfig+0x8f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206a:	f7fe fd15 	bl	8000a98 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d902      	bls.n	800207e <HAL_RCC_OscConfig+0x8f6>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	f000 bc9a 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800207e:	4b55      	ldr	r3, [pc, #340]	; (80021d4 <HAL_RCC_OscConfig+0xa4c>)
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0ef      	beq.n	800206a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01f      	beq.n	80020d6 <HAL_RCC_OscConfig+0x94e>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d010      	beq.n	80020c4 <HAL_RCC_OscConfig+0x93c>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020a2:	4b4a      	ldr	r3, [pc, #296]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 80020a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020a8:	4a48      	ldr	r2, [pc, #288]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 80020aa:	f043 0304 	orr.w	r3, r3, #4
 80020ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020b2:	4b46      	ldr	r3, [pc, #280]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 80020b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020b8:	4a44      	ldr	r2, [pc, #272]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020c2:	e018      	b.n	80020f6 <HAL_RCC_OscConfig+0x96e>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020c4:	4b41      	ldr	r3, [pc, #260]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 80020c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020ca:	4a40      	ldr	r2, [pc, #256]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020d4:	e00f      	b.n	80020f6 <HAL_RCC_OscConfig+0x96e>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020d6:	4b3d      	ldr	r3, [pc, #244]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 80020d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020dc:	4a3b      	ldr	r2, [pc, #236]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020e6:	4b39      	ldr	r3, [pc, #228]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 80020e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020ec:	4a37      	ldr	r2, [pc, #220]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 80020ee:	f023 0304 	bic.w	r3, r3, #4
 80020f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d056      	beq.n	80021ac <HAL_RCC_OscConfig+0xa24>
    {
      tickstart = HAL_GetTick();
 80020fe:	f7fe fccb 	bl	8000a98 <HAL_GetTick>
 8002102:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002104:	e00b      	b.n	800211e <HAL_RCC_OscConfig+0x996>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7fe fcc7 	bl	8000a98 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	; 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d902      	bls.n	800211e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	f000 bc4a 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211e:	4b2b      	ldr	r3, [pc, #172]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 8002120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ec      	beq.n	8002106 <HAL_RCC_OscConfig+0x97e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01c      	beq.n	8002172 <HAL_RCC_OscConfig+0x9ea>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002138:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 800213a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800213e:	4a23      	ldr	r2, [pc, #140]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 8002140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002144:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002148:	e00b      	b.n	8002162 <HAL_RCC_OscConfig+0x9da>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214a:	f7fe fca5 	bl	8000a98 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	; 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d902      	bls.n	8002162 <HAL_RCC_OscConfig+0x9da>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	f000 bc28 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 8002164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ec      	beq.n	800214a <HAL_RCC_OscConfig+0x9c2>
 8002170:	e05b      	b.n	800222a <HAL_RCC_OscConfig+0xaa2>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002172:	4b16      	ldr	r3, [pc, #88]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 8002174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 800217a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800217e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0xa14>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7fe fc88 	bl	8000a98 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d902      	bls.n	800219c <HAL_RCC_OscConfig+0xa14>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	f000 bc0b 	b.w	80029b2 <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_OscConfig+0xa44>)
 800219e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1ec      	bne.n	8002184 <HAL_RCC_OscConfig+0x9fc>
 80021aa:	e03e      	b.n	800222a <HAL_RCC_OscConfig+0xaa2>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80021ac:	f7fe fc74 	bl	8000a98 <HAL_GetTick>
 80021b0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021b2:	e011      	b.n	80021d8 <HAL_RCC_OscConfig+0xa50>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7fe fc70 	bl	8000a98 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d908      	bls.n	80021d8 <HAL_RCC_OscConfig+0xa50>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e3f3      	b.n	80029b2 <HAL_RCC_OscConfig+0x122a>
 80021ca:	bf00      	nop
 80021cc:	46020c00 	.word	0x46020c00
 80021d0:	08007ab0 	.word	0x08007ab0
 80021d4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021d8:	4b62      	ldr	r3, [pc, #392]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 80021da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1e6      	bne.n	80021b4 <HAL_RCC_OscConfig+0xa2c>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80021e6:	4b5f      	ldr	r3, [pc, #380]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 80021e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01a      	beq.n	800222a <HAL_RCC_OscConfig+0xaa2>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80021f4:	4b5b      	ldr	r3, [pc, #364]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 80021f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021fa:	4a5a      	ldr	r2, [pc, #360]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 80021fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002200:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002204:	e00a      	b.n	800221c <HAL_RCC_OscConfig+0xa94>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002206:	f7fe fc47 	bl	8000a98 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f241 3288 	movw	r2, #5000	; 0x1388
 8002214:	4293      	cmp	r3, r2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0xa94>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e3ca      	b.n	80029b2 <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800221c:	4b51      	ldr	r3, [pc, #324]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 800221e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1ed      	bne.n	8002206 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800222a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800222e:	2b01      	cmp	r3, #1
 8002230:	d107      	bne.n	8002242 <HAL_RCC_OscConfig+0xaba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002232:	4b4c      	ldr	r3, [pc, #304]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 8002234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002238:	4a4a      	ldr	r2, [pc, #296]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 800223a:	f023 0304 	bic.w	r3, r3, #4
 800223e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	d044      	beq.n	80022d8 <HAL_RCC_OscConfig+0xb50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HAL_RCC_OscConfig+0xae2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225e:	d004      	beq.n	800226a <HAL_RCC_OscConfig+0xae2>
 8002260:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8002264:	4840      	ldr	r0, [pc, #256]	; (8002368 <HAL_RCC_OscConfig+0xbe0>)
 8002266:	f7fe fa84 	bl	8000772 <assert_failed>

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d019      	beq.n	80022a6 <HAL_RCC_OscConfig+0xb1e>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002272:	4b3c      	ldr	r3, [pc, #240]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a3b      	ldr	r2, [pc, #236]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 8002278:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800227c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800227e:	f7fe fc0b 	bl	8000a98 <HAL_GetTick>
 8002282:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0xb10>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002286:	f7fe fc07 	bl	8000a98 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0xb10>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e38c      	b.n	80029b2 <HAL_RCC_OscConfig+0x122a>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002298:	4b32      	ldr	r3, [pc, #200]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0xafe>
 80022a4:	e018      	b.n	80022d8 <HAL_RCC_OscConfig+0xb50>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80022a6:	4b2f      	ldr	r3, [pc, #188]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a2e      	ldr	r2, [pc, #184]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 80022ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022b0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80022b2:	f7fe fbf1 	bl	8000a98 <HAL_GetTick>
 80022b6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0xb44>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ba:	f7fe fbed 	bl	8000a98 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0xb44>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e372      	b.n	80029b2 <HAL_RCC_OscConfig+0x122a>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80022cc:	4b25      	ldr	r3, [pc, #148]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f0      	bne.n	80022ba <HAL_RCC_OscConfig+0xb32>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d049      	beq.n	8002378 <HAL_RCC_OscConfig+0xbf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d009      	beq.n	8002300 <HAL_RCC_OscConfig+0xb78>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022f4:	d004      	beq.n	8002300 <HAL_RCC_OscConfig+0xb78>
 80022f6:	f240 4131 	movw	r1, #1073	; 0x431
 80022fa:	481b      	ldr	r0, [pc, #108]	; (8002368 <HAL_RCC_OscConfig+0xbe0>)
 80022fc:	f7fe fa39 	bl	8000772 <assert_failed>

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	2b00      	cmp	r3, #0
 8002306:	d019      	beq.n	800233c <HAL_RCC_OscConfig+0xbb4>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a15      	ldr	r2, [pc, #84]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 800230e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002312:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002314:	f7fe fbc0 	bl	8000a98 <HAL_GetTick>
 8002318:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0xba6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800231c:	f7fe fbbc 	bl	8000a98 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0xba6>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e341      	b.n	80029b2 <HAL_RCC_OscConfig+0x122a>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0xb94>
 800233a:	e01d      	b.n	8002378 <HAL_RCC_OscConfig+0xbf0>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a08      	ldr	r2, [pc, #32]	; (8002364 <HAL_RCC_OscConfig+0xbdc>)
 8002342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002346:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002348:	f7fe fba6 	bl	8000a98 <HAL_GetTick>
 800234c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800234e:	e00d      	b.n	800236c <HAL_RCC_OscConfig+0xbe4>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002350:	f7fe fba2 	bl	8000a98 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d906      	bls.n	800236c <HAL_RCC_OscConfig+0xbe4>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e327      	b.n	80029b2 <HAL_RCC_OscConfig+0x122a>
 8002362:	bf00      	nop
 8002364:	46020c00 	.word	0x46020c00
 8002368:	08007ab0 	.word	0x08007ab0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800236c:	4b77      	ldr	r3, [pc, #476]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1eb      	bne.n	8002350 <HAL_RCC_OscConfig+0xbc8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80ed 	beq.w	8002560 <HAL_RCC_OscConfig+0xdd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <HAL_RCC_OscConfig+0xc18>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002392:	2b10      	cmp	r3, #16
 8002394:	d004      	beq.n	80023a0 <HAL_RCC_OscConfig+0xc18>
 8002396:	f240 4159 	movw	r1, #1113	; 0x459
 800239a:	486d      	ldr	r0, [pc, #436]	; (8002550 <HAL_RCC_OscConfig+0xdc8>)
 800239c:	f7fe f9e9 	bl	8000772 <assert_failed>
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d04f      	beq.n	8002448 <HAL_RCC_OscConfig+0xcc0>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b0:	d04a      	beq.n	8002448 <HAL_RCC_OscConfig+0xcc0>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023ba:	d045      	beq.n	8002448 <HAL_RCC_OscConfig+0xcc0>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023c4:	d040      	beq.n	8002448 <HAL_RCC_OscConfig+0xcc0>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023ce:	d03b      	beq.n	8002448 <HAL_RCC_OscConfig+0xcc0>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80023d8:	d036      	beq.n	8002448 <HAL_RCC_OscConfig+0xcc0>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80023e2:	d031      	beq.n	8002448 <HAL_RCC_OscConfig+0xcc0>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80023ec:	d02c      	beq.n	8002448 <HAL_RCC_OscConfig+0xcc0>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023f6:	d027      	beq.n	8002448 <HAL_RCC_OscConfig+0xcc0>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8002400:	d022      	beq.n	8002448 <HAL_RCC_OscConfig+0xcc0>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800240a:	d01d      	beq.n	8002448 <HAL_RCC_OscConfig+0xcc0>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8002414:	d018      	beq.n	8002448 <HAL_RCC_OscConfig+0xcc0>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800241e:	d013      	beq.n	8002448 <HAL_RCC_OscConfig+0xcc0>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8002428:	d00e      	beq.n	8002448 <HAL_RCC_OscConfig+0xcc0>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002432:	d009      	beq.n	8002448 <HAL_RCC_OscConfig+0xcc0>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800243c:	d004      	beq.n	8002448 <HAL_RCC_OscConfig+0xcc0>
 800243e:	f240 415a 	movw	r1, #1114	; 0x45a
 8002442:	4843      	ldr	r0, [pc, #268]	; (8002550 <HAL_RCC_OscConfig+0xdc8>)
 8002444:	f7fe f995 	bl	8000772 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	2bff      	cmp	r3, #255	; 0xff
 800244e:	d904      	bls.n	800245a <HAL_RCC_OscConfig+0xcd2>
 8002450:	f240 415b 	movw	r1, #1115	; 0x45b
 8002454:	483e      	ldr	r0, [pc, #248]	; (8002550 <HAL_RCC_OscConfig+0xdc8>)
 8002456:	f7fe f98c 	bl	8000772 <assert_failed>

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245e:	2b00      	cmp	r3, #0
 8002460:	d060      	beq.n	8002524 <HAL_RCC_OscConfig+0xd9c>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002462:	4b3a      	ldr	r3, [pc, #232]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	4a39      	ldr	r2, [pc, #228]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 8002468:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800246c:	6093      	str	r3, [r2, #8]
 800246e:	4b37      	ldr	r3, [pc, #220]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	4934      	ldr	r1, [pc, #208]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002488:	d309      	bcc.n	800249e <HAL_RCC_OscConfig+0xd16>
 800248a:	4b30      	ldr	r3, [pc, #192]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f023 021f 	bic.w	r2, r3, #31
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	492d      	ldr	r1, [pc, #180]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 8002498:	4313      	orrs	r3, r2
 800249a:	60cb      	str	r3, [r1, #12]
 800249c:	e028      	b.n	80024f0 <HAL_RCC_OscConfig+0xd68>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	da0a      	bge.n	80024bc <HAL_RCC_OscConfig+0xd34>
 80024a6:	4b29      	ldr	r3, [pc, #164]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	015b      	lsls	r3, r3, #5
 80024b4:	4925      	ldr	r1, [pc, #148]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60cb      	str	r3, [r1, #12]
 80024ba:	e019      	b.n	80024f0 <HAL_RCC_OscConfig+0xd68>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c4:	d30a      	bcc.n	80024dc <HAL_RCC_OscConfig+0xd54>
 80024c6:	4b21      	ldr	r3, [pc, #132]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	029b      	lsls	r3, r3, #10
 80024d4:	491d      	ldr	r1, [pc, #116]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60cb      	str	r3, [r1, #12]
 80024da:	e009      	b.n	80024f0 <HAL_RCC_OscConfig+0xd68>
 80024dc:	4b1b      	ldr	r3, [pc, #108]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	03db      	lsls	r3, r3, #15
 80024ea:	4918      	ldr	r1, [pc, #96]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80024f0:	4b16      	ldr	r3, [pc, #88]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a15      	ldr	r2, [pc, #84]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 80024f6:	f043 0310 	orr.w	r3, r3, #16
 80024fa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80024fc:	f7fe facc 	bl	8000a98 <HAL_GetTick>
 8002500:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0xd8e>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002504:	f7fe fac8 	bl	8000a98 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xd8e>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e24d      	b.n	80029b2 <HAL_RCC_OscConfig+0x122a>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002516:	4b0d      	ldr	r3, [pc, #52]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0xd7c>
 8002522:	e01d      	b.n	8002560 <HAL_RCC_OscConfig+0xdd8>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a08      	ldr	r2, [pc, #32]	; (800254c <HAL_RCC_OscConfig+0xdc4>)
 800252a:	f023 0310 	bic.w	r3, r3, #16
 800252e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002530:	f7fe fab2 	bl	8000a98 <HAL_GetTick>
 8002534:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002536:	e00d      	b.n	8002554 <HAL_RCC_OscConfig+0xdcc>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002538:	f7fe faae 	bl	8000a98 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d906      	bls.n	8002554 <HAL_RCC_OscConfig+0xdcc>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e233      	b.n	80029b2 <HAL_RCC_OscConfig+0x122a>
 800254a:	bf00      	nop
 800254c:	46020c00 	.word	0x46020c00
 8002550:	08007ab0 	.word	0x08007ab0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002554:	4b60      	ldr	r3, [pc, #384]	; (80026d8 <HAL_RCC_OscConfig+0xf50>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1eb      	bne.n	8002538 <HAL_RCC_OscConfig+0xdb0>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00c      	beq.n	8002582 <HAL_RCC_OscConfig+0xdfa>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256c:	2b01      	cmp	r3, #1
 800256e:	d008      	beq.n	8002582 <HAL_RCC_OscConfig+0xdfa>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002574:	2b02      	cmp	r3, #2
 8002576:	d004      	beq.n	8002582 <HAL_RCC_OscConfig+0xdfa>
 8002578:	f44f 6191 	mov.w	r1, #1160	; 0x488
 800257c:	4857      	ldr	r0, [pc, #348]	; (80026dc <HAL_RCC_OscConfig+0xf54>)
 800257e:	f7fe f8f8 	bl	8000772 <assert_failed>

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8212 	beq.w	80029b0 <HAL_RCC_OscConfig+0x1228>
  {
    FlagStatus  pwrclkchanged = RESET;
 800258c:	2300      	movs	r3, #0
 800258e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002592:	4b51      	ldr	r3, [pc, #324]	; (80026d8 <HAL_RCC_OscConfig+0xf50>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b0c      	cmp	r3, #12
 800259c:	f000 818b 	beq.w	80028b6 <HAL_RCC_OscConfig+0x112e>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	f040 8164 	bne.w	8002872 <HAL_RCC_OscConfig+0x10ea>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLMBOOST_VALUE(pRCC_OscInitStruct->PLL.PLLMBOOST));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d02c      	beq.n	800260c <HAL_RCC_OscConfig+0xe84>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ba:	d027      	beq.n	800260c <HAL_RCC_OscConfig+0xe84>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c4:	d022      	beq.n	800260c <HAL_RCC_OscConfig+0xe84>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025ce:	d01d      	beq.n	800260c <HAL_RCC_OscConfig+0xe84>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025d8:	d018      	beq.n	800260c <HAL_RCC_OscConfig+0xe84>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80025e2:	d013      	beq.n	800260c <HAL_RCC_OscConfig+0xe84>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80025ec:	d00e      	beq.n	800260c <HAL_RCC_OscConfig+0xe84>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80025f6:	d009      	beq.n	800260c <HAL_RCC_OscConfig+0xe84>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002600:	d004      	beq.n	800260c <HAL_RCC_OscConfig+0xe84>
 8002602:	f240 4194 	movw	r1, #1172	; 0x494
 8002606:	4835      	ldr	r0, [pc, #212]	; (80026dc <HAL_RCC_OscConfig+0xf54>)
 8002608:	f7fe f8b3 	bl	8000772 <assert_failed>
        assert_param(IS_RCC_PLLSOURCE(pRCC_OscInitStruct->PLL.PLLSource));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002610:	2b01      	cmp	r3, #1
 8002612:	d00c      	beq.n	800262e <HAL_RCC_OscConfig+0xea6>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002618:	2b02      	cmp	r3, #2
 800261a:	d008      	beq.n	800262e <HAL_RCC_OscConfig+0xea6>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002620:	2b03      	cmp	r3, #3
 8002622:	d004      	beq.n	800262e <HAL_RCC_OscConfig+0xea6>
 8002624:	f240 4195 	movw	r1, #1173	; 0x495
 8002628:	482c      	ldr	r0, [pc, #176]	; (80026dc <HAL_RCC_OscConfig+0xf54>)
 800262a:	f7fe f8a2 	bl	8000772 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(pRCC_OscInitStruct->PLL.PLLM));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_RCC_OscConfig+0xeb6>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	2b10      	cmp	r3, #16
 800263c:	d904      	bls.n	8002648 <HAL_RCC_OscConfig+0xec0>
 800263e:	f240 4196 	movw	r1, #1174	; 0x496
 8002642:	4826      	ldr	r0, [pc, #152]	; (80026dc <HAL_RCC_OscConfig+0xf54>)
 8002644:	f7fe f895 	bl	8000772 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(pRCC_OscInitStruct->PLL.PLLN));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264c:	2b03      	cmp	r3, #3
 800264e:	d904      	bls.n	800265a <HAL_RCC_OscConfig+0xed2>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002658:	d904      	bls.n	8002664 <HAL_RCC_OscConfig+0xedc>
 800265a:	f240 4197 	movw	r1, #1175	; 0x497
 800265e:	481f      	ldr	r0, [pc, #124]	; (80026dc <HAL_RCC_OscConfig+0xf54>)
 8002660:	f7fe f887 	bl	8000772 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_RCC_OscConfig+0xeec>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002670:	2b80      	cmp	r3, #128	; 0x80
 8002672:	d904      	bls.n	800267e <HAL_RCC_OscConfig+0xef6>
 8002674:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8002678:	4818      	ldr	r0, [pc, #96]	; (80026dc <HAL_RCC_OscConfig+0xf54>)
 800267a:	f7fe f87a 	bl	8000772 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_RCC_OscConfig+0xf06>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268a:	2b80      	cmp	r3, #128	; 0x80
 800268c:	d904      	bls.n	8002698 <HAL_RCC_OscConfig+0xf10>
 800268e:	f240 4199 	movw	r1, #1177	; 0x499
 8002692:	4812      	ldr	r0, [pc, #72]	; (80026dc <HAL_RCC_OscConfig+0xf54>)
 8002694:	f7fe f86d 	bl	8000772 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_RCC_OscConfig+0xf20>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d904      	bls.n	80026b2 <HAL_RCC_OscConfig+0xf2a>
 80026a8:	f240 419a 	movw	r1, #1178	; 0x49a
 80026ac:	480b      	ldr	r0, [pc, #44]	; (80026dc <HAL_RCC_OscConfig+0xf54>)
 80026ae:	f7fe f860 	bl	8000772 <assert_failed>

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCC_OscConfig+0xf50>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a08      	ldr	r2, [pc, #32]	; (80026d8 <HAL_RCC_OscConfig+0xf50>)
 80026b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80026be:	f7fe f9eb 	bl	8000a98 <HAL_GetTick>
 80026c2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80026c4:	e00c      	b.n	80026e0 <HAL_RCC_OscConfig+0xf58>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c6:	f7fe f9e7 	bl	8000a98 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d905      	bls.n	80026e0 <HAL_RCC_OscConfig+0xf58>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e16c      	b.n	80029b2 <HAL_RCC_OscConfig+0x122a>
 80026d8:	46020c00 	.word	0x46020c00
 80026dc:	08007ab0 	.word	0x08007ab0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80026e0:	4b98      	ldr	r3, [pc, #608]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1ec      	bne.n	80026c6 <HAL_RCC_OscConfig+0xf3e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ec:	4b95      	ldr	r3, [pc, #596]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 80026ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d111      	bne.n	800271e <HAL_RCC_OscConfig+0xf96>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	4b92      	ldr	r3, [pc, #584]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 80026fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002700:	4a90      	ldr	r2, [pc, #576]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 8002702:	f043 0304 	orr.w	r3, r3, #4
 8002706:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800270a:	4b8e      	ldr	r3, [pc, #568]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 800270c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002718:	2301      	movs	r3, #1
 800271a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800271e:	4b8a      	ldr	r3, [pc, #552]	; (8002948 <HAL_RCC_OscConfig+0x11c0>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002726:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800272a:	d102      	bne.n	8002732 <HAL_RCC_OscConfig+0xfaa>
        {
          pwrboosten = SET;
 800272c:	2301      	movs	r3, #1
 800272e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002732:	4b85      	ldr	r3, [pc, #532]	; (8002948 <HAL_RCC_OscConfig+0x11c0>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	4a84      	ldr	r2, [pc, #528]	; (8002948 <HAL_RCC_OscConfig+0x11c0>)
 8002738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800273e:	4b81      	ldr	r3, [pc, #516]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002746:	f023 0303 	bic.w	r3, r3, #3
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002752:	3a01      	subs	r2, #1
 8002754:	0212      	lsls	r2, r2, #8
 8002756:	4311      	orrs	r1, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800275c:	430a      	orrs	r2, r1
 800275e:	4979      	ldr	r1, [pc, #484]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 8002760:	4313      	orrs	r3, r2
 8002762:	628b      	str	r3, [r1, #40]	; 0x28
 8002764:	4b77      	ldr	r3, [pc, #476]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 8002766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002768:	4b78      	ldr	r3, [pc, #480]	; (800294c <HAL_RCC_OscConfig+0x11c4>)
 800276a:	4013      	ands	r3, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002770:	3a01      	subs	r2, #1
 8002772:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800277a:	3a01      	subs	r2, #1
 800277c:	0252      	lsls	r2, r2, #9
 800277e:	b292      	uxth	r2, r2
 8002780:	4311      	orrs	r1, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002786:	3a01      	subs	r2, #1
 8002788:	0412      	lsls	r2, r2, #16
 800278a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800278e:	4311      	orrs	r1, r2
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002794:	3a01      	subs	r2, #1
 8002796:	0612      	lsls	r2, r2, #24
 8002798:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800279c:	430a      	orrs	r2, r1
 800279e:	4969      	ldr	r1, [pc, #420]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLN,
                             pRCC_OscInitStruct->PLL.PLLP,
                             pRCC_OscInitStruct->PLL.PLLQ,
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ac:	d304      	bcc.n	80027b8 <HAL_RCC_OscConfig+0x1030>
 80027ae:	f240 41c1 	movw	r1, #1217	; 0x4c1
 80027b2:	4867      	ldr	r0, [pc, #412]	; (8002950 <HAL_RCC_OscConfig+0x11c8>)
 80027b4:	f7fd ffdd 	bl	8000772 <assert_failed>

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80027b8:	4b62      	ldr	r3, [pc, #392]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	4a61      	ldr	r2, [pc, #388]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 80027be:	f023 0310 	bic.w	r3, r3, #16
 80027c2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	4a5e      	ldr	r2, [pc, #376]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80027ce:	4b5d      	ldr	r3, [pc, #372]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	4a5c      	ldr	r2, [pc, #368]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 80027d4:	f043 0310 	orr.w	r3, r3, #16
 80027d8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <HAL_RCC_OscConfig+0x106c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e6:	2b0c      	cmp	r3, #12
 80027e8:	d004      	beq.n	80027f4 <HAL_RCC_OscConfig+0x106c>
 80027ea:	f240 41cc 	movw	r1, #1228	; 0x4cc
 80027ee:	4858      	ldr	r0, [pc, #352]	; (8002950 <HAL_RCC_OscConfig+0x11c8>)
 80027f0:	f7fd ffbf 	bl	8000772 <assert_failed>

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80027f4:	4b53      	ldr	r3, [pc, #332]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	f023 020c 	bic.w	r2, r3, #12
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002800:	4950      	ldr	r1, [pc, #320]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 8002802:	4313      	orrs	r3, r2
 8002804:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8002806:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800280a:	2b01      	cmp	r3, #1
 800280c:	d105      	bne.n	800281a <HAL_RCC_OscConfig+0x1092>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800280e:	4b4e      	ldr	r3, [pc, #312]	; (8002948 <HAL_RCC_OscConfig+0x11c0>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	4a4d      	ldr	r2, [pc, #308]	; (8002948 <HAL_RCC_OscConfig+0x11c0>)
 8002814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002818:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800281a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800281e:	2b01      	cmp	r3, #1
 8002820:	d107      	bne.n	8002832 <HAL_RCC_OscConfig+0x10aa>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002822:	4b48      	ldr	r3, [pc, #288]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 8002824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002828:	4a46      	ldr	r2, [pc, #280]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 800282a:	f023 0304 	bic.w	r3, r3, #4
 800282e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002832:	4b44      	ldr	r3, [pc, #272]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	4a43      	ldr	r2, [pc, #268]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 8002838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800283c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800283e:	4b41      	ldr	r3, [pc, #260]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a40      	ldr	r2, [pc, #256]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 8002844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002848:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800284a:	f7fe f925 	bl	8000a98 <HAL_GetTick>
 800284e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x10dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002852:	f7fe f921 	bl	8000a98 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x10dc>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e0a6      	b.n	80029b2 <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002864:	4b37      	ldr	r3, [pc, #220]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x10ca>
 8002870:	e09e      	b.n	80029b0 <HAL_RCC_OscConfig+0x1228>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002872:	4b34      	ldr	r3, [pc, #208]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a33      	ldr	r2, [pc, #204]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 8002878:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800287c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800287e:	f7fe f90b 	bl	8000a98 <HAL_GetTick>
 8002882:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x1110>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe f907 	bl	8000a98 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x1110>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e08c      	b.n	80029b2 <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002898:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCC_OscConfig+0x10fe>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80028a4:	4b27      	ldr	r3, [pc, #156]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	4a26      	ldr	r2, [pc, #152]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 80028aa:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80028ae:	f023 0303 	bic.w	r3, r3, #3
 80028b2:	6293      	str	r3, [r2, #40]	; 0x28
 80028b4:	e07c      	b.n	80029b0 <HAL_RCC_OscConfig+0x1228>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80028b6:	4b23      	ldr	r3, [pc, #140]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028bc:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_RCC_OscConfig+0x11bc>)
 80028be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c0:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d039      	beq.n	800293e <HAL_RCC_OscConfig+0x11b6>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f003 0203 	and.w	r2, r3, #3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d132      	bne.n	800293e <HAL_RCC_OscConfig+0x11b6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	0a1b      	lsrs	r3, r3, #8
 80028dc:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d129      	bne.n	800293e <HAL_RCC_OscConfig+0x11b6>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d122      	bne.n	800293e <HAL_RCC_OscConfig+0x11b6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002902:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d11a      	bne.n	800293e <HAL_RCC_OscConfig+0x11b6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	0a5b      	lsrs	r3, r3, #9
 800290c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002914:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d111      	bne.n	800293e <HAL_RCC_OscConfig+0x11b6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	0c1b      	lsrs	r3, r3, #16
 800291e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002926:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d108      	bne.n	800293e <HAL_RCC_OscConfig+0x11b6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	0e1b      	lsrs	r3, r3, #24
 8002930:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800293a:	429a      	cmp	r2, r3
 800293c:	d00a      	beq.n	8002954 <HAL_RCC_OscConfig+0x11cc>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e037      	b.n	80029b2 <HAL_RCC_OscConfig+0x122a>
 8002942:	bf00      	nop
 8002944:	46020c00 	.word	0x46020c00
 8002948:	46020800 	.word	0x46020800
 800294c:	80800000 	.word	0x80800000
 8002950:	08007ab0 	.word	0x08007ab0
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCC_OscConfig+0x1234>)
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	08db      	lsrs	r3, r3, #3
 800295a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002962:	429a      	cmp	r2, r3
 8002964:	d024      	beq.n	80029b0 <HAL_RCC_OscConfig+0x1228>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800296e:	d304      	bcc.n	800297a <HAL_RCC_OscConfig+0x11f2>
 8002970:	f240 511c 	movw	r1, #1308	; 0x51c
 8002974:	4812      	ldr	r0, [pc, #72]	; (80029c0 <HAL_RCC_OscConfig+0x1238>)
 8002976:	f7fd fefc 	bl	8000772 <assert_failed>

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_RCC_OscConfig+0x1234>)
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	4a0f      	ldr	r2, [pc, #60]	; (80029bc <HAL_RCC_OscConfig+0x1234>)
 8002980:	f023 0310 	bic.w	r3, r3, #16
 8002984:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7fe f887 	bl	8000a98 <HAL_GetTick>
 800298a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800298c:	bf00      	nop
 800298e:	f7fe f883 	bl	8000a98 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002996:	4293      	cmp	r3, r2
 8002998:	d0f9      	beq.n	800298e <HAL_RCC_OscConfig+0x1206>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	4a07      	ldr	r2, [pc, #28]	; (80029bc <HAL_RCC_OscConfig+0x1234>)
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_RCC_OscConfig+0x1234>)
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <HAL_RCC_OscConfig+0x1234>)
 80029aa:	f043 0310 	orr.w	r3, r3, #16
 80029ae:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3738      	adds	r7, #56	; 0x38
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	46020c00 	.word	0x46020c00
 80029c0:	08007ab0 	.word	0x08007ab0

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e326      	b.n	8003026 <HAL_RCC_ClockConfig+0x662>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x24>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b1f      	cmp	r3, #31
 80029e6:	d904      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x2e>
 80029e8:	f240 5164 	movw	r1, #1380	; 0x564
 80029ec:	4827      	ldr	r0, [pc, #156]	; (8002a8c <HAL_RCC_ClockConfig+0xc8>)
 80029ee:	f7fd fec0 	bl	8000772 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d031      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x98>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d02e      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x98>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d02b      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x98>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d028      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x98>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d025      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x98>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b05      	cmp	r3, #5
 8002a14:	d022      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x98>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b06      	cmp	r3, #6
 8002a1a:	d01f      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x98>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2b07      	cmp	r3, #7
 8002a20:	d01c      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x98>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d019      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x98>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2b09      	cmp	r3, #9
 8002a2c:	d016      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x98>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b0a      	cmp	r3, #10
 8002a32:	d013      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x98>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b0b      	cmp	r3, #11
 8002a38:	d010      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x98>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b0c      	cmp	r3, #12
 8002a3e:	d00d      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x98>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2b0d      	cmp	r3, #13
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x98>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b0e      	cmp	r3, #14
 8002a4a:	d007      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x98>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b0f      	cmp	r3, #15
 8002a50:	d004      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x98>
 8002a52:	f240 5165 	movw	r1, #1381	; 0x565
 8002a56:	480d      	ldr	r0, [pc, #52]	; (8002a8c <HAL_RCC_ClockConfig+0xc8>)
 8002a58:	f7fd fe8b 	bl	8000772 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <HAL_RCC_ClockConfig+0xcc>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d914      	bls.n	8002a94 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0xcc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 020f 	bic.w	r2, r3, #15
 8002a72:	4907      	ldr	r1, [pc, #28]	; (8002a90 <HAL_RCC_ClockConfig+0xcc>)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_RCC_ClockConfig+0xcc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e2cc      	b.n	8003026 <HAL_RCC_ClockConfig+0x662>
 8002a8c:	08007ab0 	.word	0x08007ab0
 8002a90:	40022000 	.word	0x40022000
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d029      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x130>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	4b8b      	ldr	r3, [pc, #556]	; (8002cd4 <HAL_RCC_ClockConfig+0x310>)
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d921      	bls.n	8002af4 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d014      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x11e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	2b40      	cmp	r3, #64	; 0x40
 8002abe:	d010      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x11e>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	2b50      	cmp	r3, #80	; 0x50
 8002ac6:	d00c      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x11e>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	2b60      	cmp	r3, #96	; 0x60
 8002ace:	d008      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x11e>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	2b70      	cmp	r3, #112	; 0x70
 8002ad6:	d004      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x11e>
 8002ad8:	f240 517f 	movw	r1, #1407	; 0x57f
 8002adc:	487e      	ldr	r0, [pc, #504]	; (8002cd8 <HAL_RCC_ClockConfig+0x314>)
 8002ade:	f7fd fe48 	bl	8000772 <assert_failed>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002ae2:	4b7c      	ldr	r3, [pc, #496]	; (8002cd4 <HAL_RCC_ClockConfig+0x310>)
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	4979      	ldr	r1, [pc, #484]	; (8002cd4 <HAL_RCC_ClockConfig+0x310>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d02b      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x194>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	4b73      	ldr	r3, [pc, #460]	; (8002cd4 <HAL_RCC_ClockConfig+0x310>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d922      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x194>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d014      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x180>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b40      	cmp	r3, #64	; 0x40
 8002b20:	d010      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x180>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	2b50      	cmp	r3, #80	; 0x50
 8002b28:	d00c      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x180>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	2b60      	cmp	r3, #96	; 0x60
 8002b30:	d008      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x180>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b70      	cmp	r3, #112	; 0x70
 8002b38:	d004      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x180>
 8002b3a:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 8002b3e:	4866      	ldr	r0, [pc, #408]	; (8002cd8 <HAL_RCC_ClockConfig+0x314>)
 8002b40:	f7fd fe17 	bl	8000772 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002b44:	4b63      	ldr	r3, [pc, #396]	; (8002cd4 <HAL_RCC_ClockConfig+0x310>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	4960      	ldr	r1, [pc, #384]	; (8002cd4 <HAL_RCC_ClockConfig+0x310>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d029      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x1f4>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	4b5a      	ldr	r3, [pc, #360]	; (8002cd4 <HAL_RCC_ClockConfig+0x310>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d921      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0x1f4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d014      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x1e2>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d010      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x1e2>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	2b50      	cmp	r3, #80	; 0x50
 8002b8a:	d00c      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x1e2>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	2b60      	cmp	r3, #96	; 0x60
 8002b92:	d008      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x1e2>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b70      	cmp	r3, #112	; 0x70
 8002b9a:	d004      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x1e2>
 8002b9c:	f240 5192 	movw	r1, #1426	; 0x592
 8002ba0:	484d      	ldr	r0, [pc, #308]	; (8002cd8 <HAL_RCC_ClockConfig+0x314>)
 8002ba2:	f7fd fde6 	bl	8000772 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002ba6:	4b4b      	ldr	r3, [pc, #300]	; (8002cd4 <HAL_RCC_ClockConfig+0x310>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	4948      	ldr	r1, [pc, #288]	; (8002cd4 <HAL_RCC_ClockConfig+0x310>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d039      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x274>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	4b42      	ldr	r3, [pc, #264]	; (8002cd4 <HAL_RCC_ClockConfig+0x310>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f003 030f 	and.w	r3, r3, #15
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d931      	bls.n	8002c38 <HAL_RCC_ClockConfig+0x274>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d024      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x262>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d020      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x262>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b09      	cmp	r3, #9
 8002bea:	d01c      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x262>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b0a      	cmp	r3, #10
 8002bf2:	d018      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x262>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b0b      	cmp	r3, #11
 8002bfa:	d014      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x262>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b0c      	cmp	r3, #12
 8002c02:	d010      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x262>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b0d      	cmp	r3, #13
 8002c0a:	d00c      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x262>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b0e      	cmp	r3, #14
 8002c12:	d008      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x262>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b0f      	cmp	r3, #15
 8002c1a:	d004      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x262>
 8002c1c:	f240 519c 	movw	r1, #1436	; 0x59c
 8002c20:	482d      	ldr	r0, [pc, #180]	; (8002cd8 <HAL_RCC_ClockConfig+0x314>)
 8002c22:	f7fd fda6 	bl	8000772 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002c26:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <HAL_RCC_ClockConfig+0x310>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	f023 020f 	bic.w	r2, r3, #15
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	4928      	ldr	r1, [pc, #160]	; (8002cd4 <HAL_RCC_ClockConfig+0x310>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80e8 	beq.w	8002e16 <HAL_RCC_ClockConfig+0x452>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d010      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x2ac>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d00c      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x2ac>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d008      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x2ac>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d004      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x2ac>
 8002c66:	f240 51a4 	movw	r1, #1444	; 0x5a4
 8002c6a:	481b      	ldr	r0, [pc, #108]	; (8002cd8 <HAL_RCC_ClockConfig+0x314>)
 8002c6c:	f7fd fd81 	bl	8000772 <assert_failed>
    FlagStatus  pwrclkchanged = RESET;
 8002c70:	2300      	movs	r3, #0
 8002c72:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d14a      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x34e>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c7c:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <HAL_RCC_ClockConfig+0x310>)
 8002c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d110      	bne.n	8002cac <HAL_RCC_ClockConfig+0x2e8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002c8a:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_RCC_ClockConfig+0x310>)
 8002c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c90:	4a10      	ldr	r2, [pc, #64]	; (8002cd4 <HAL_RCC_ClockConfig+0x310>)
 8002c92:	f043 0304 	orr.w	r3, r3, #4
 8002c96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002c9a:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <HAL_RCC_ClockConfig+0x310>)
 8002c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002cac:	f7fd fef4 	bl	8000a98 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <HAL_RCC_ClockConfig+0x318>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d016      	beq.n	8002cec <HAL_RCC_ClockConfig+0x328>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002cbe:	e00f      	b.n	8002ce0 <HAL_RCC_ClockConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002cc0:	f7fd feea 	bl	8000a98 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d908      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e1a9      	b.n	8003026 <HAL_RCC_ClockConfig+0x662>
 8002cd2:	bf00      	nop
 8002cd4:	46020c00 	.word	0x46020c00
 8002cd8:	08007ab0 	.word	0x08007ab0
 8002cdc:	46020800 	.word	0x46020800
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002ce0:	4b79      	ldr	r3, [pc, #484]	; (8002ec8 <HAL_RCC_ClockConfig+0x504>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0e9      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x2fc>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0x33e>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002cf2:	4b76      	ldr	r3, [pc, #472]	; (8002ecc <HAL_RCC_ClockConfig+0x508>)
 8002cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf8:	4a74      	ldr	r2, [pc, #464]	; (8002ecc <HAL_RCC_ClockConfig+0x508>)
 8002cfa:	f023 0304 	bic.w	r3, r3, #4
 8002cfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002d02:	4b72      	ldr	r3, [pc, #456]	; (8002ecc <HAL_RCC_ClockConfig+0x508>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d121      	bne.n	8002d52 <HAL_RCC_ClockConfig+0x38e>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e189      	b.n	8003026 <HAL_RCC_ClockConfig+0x662>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0x366>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d1a:	4b6c      	ldr	r3, [pc, #432]	; (8002ecc <HAL_RCC_ClockConfig+0x508>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d115      	bne.n	8002d52 <HAL_RCC_ClockConfig+0x38e>
        {
          return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e17d      	b.n	8003026 <HAL_RCC_ClockConfig+0x662>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d107      	bne.n	8002d42 <HAL_RCC_ClockConfig+0x37e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002d32:	4b66      	ldr	r3, [pc, #408]	; (8002ecc <HAL_RCC_ClockConfig+0x508>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <HAL_RCC_ClockConfig+0x38e>
        {
          return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e171      	b.n	8003026 <HAL_RCC_ClockConfig+0x662>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d42:	4b62      	ldr	r3, [pc, #392]	; (8002ecc <HAL_RCC_ClockConfig+0x508>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_ClockConfig+0x38e>
        {
          return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e169      	b.n	8003026 <HAL_RCC_ClockConfig+0x662>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002d52:	4b5e      	ldr	r3, [pc, #376]	; (8002ecc <HAL_RCC_ClockConfig+0x508>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f023 0203 	bic.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	495b      	ldr	r1, [pc, #364]	; (8002ecc <HAL_RCC_ClockConfig+0x508>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002d64:	f7fd fe98 	bl	8000a98 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d112      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x3d4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x3c6>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d74:	f7fd fe90 	bl	8000a98 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e14d      	b.n	8003026 <HAL_RCC_ClockConfig+0x662>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d8a:	4b50      	ldr	r3, [pc, #320]	; (8002ecc <HAL_RCC_ClockConfig+0x508>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b0c      	cmp	r3, #12
 8002d94:	d1ee      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x3b0>
 8002d96:	e03e      	b.n	8002e16 <HAL_RCC_ClockConfig+0x452>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d112      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0x402>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_ClockConfig+0x3f4>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da2:	f7fd fe79 	bl	8000a98 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x3f4>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e136      	b.n	8003026 <HAL_RCC_ClockConfig+0x662>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002db8:	4b44      	ldr	r3, [pc, #272]	; (8002ecc <HAL_RCC_ClockConfig+0x508>)
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d1ee      	bne.n	8002da2 <HAL_RCC_ClockConfig+0x3de>
 8002dc4:	e027      	b.n	8002e16 <HAL_RCC_ClockConfig+0x452>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d11d      	bne.n	8002e0a <HAL_RCC_ClockConfig+0x446>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_ClockConfig+0x422>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd0:	f7fd fe62 	bl	8000a98 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x422>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e11f      	b.n	8003026 <HAL_RCC_ClockConfig+0x662>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002de6:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <HAL_RCC_ClockConfig+0x508>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1ee      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x40c>
 8002df2:	e010      	b.n	8002e16 <HAL_RCC_ClockConfig+0x452>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df4:	f7fd fe50 	bl	8000a98 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e10d      	b.n	8003026 <HAL_RCC_ClockConfig+0x662>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e0a:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <HAL_RCC_ClockConfig+0x508>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d1ee      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x430>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d039      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x4d2>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	4b29      	ldr	r3, [pc, #164]	; (8002ecc <HAL_RCC_ClockConfig+0x508>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d231      	bcs.n	8002e96 <HAL_RCC_ClockConfig+0x4d2>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d024      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x4c0>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d020      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x4c0>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b09      	cmp	r3, #9
 8002e48:	d01c      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x4c0>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b0a      	cmp	r3, #10
 8002e50:	d018      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x4c0>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b0b      	cmp	r3, #11
 8002e58:	d014      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x4c0>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b0c      	cmp	r3, #12
 8002e60:	d010      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x4c0>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b0d      	cmp	r3, #13
 8002e68:	d00c      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x4c0>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b0e      	cmp	r3, #14
 8002e70:	d008      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x4c0>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b0f      	cmp	r3, #15
 8002e78:	d004      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x4c0>
 8002e7a:	f240 611f 	movw	r1, #1567	; 0x61f
 8002e7e:	4814      	ldr	r0, [pc, #80]	; (8002ed0 <HAL_RCC_ClockConfig+0x50c>)
 8002e80:	f7fd fc77 	bl	8000772 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <HAL_RCC_ClockConfig+0x508>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f023 020f 	bic.w	r2, r3, #15
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	490e      	ldr	r1, [pc, #56]	; (8002ecc <HAL_RCC_ClockConfig+0x508>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e96:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <HAL_RCC_ClockConfig+0x510>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d219      	bcs.n	8002ed8 <HAL_RCC_ClockConfig+0x514>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_RCC_ClockConfig+0x510>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 020f 	bic.w	r2, r3, #15
 8002eac:	4909      	ldr	r1, [pc, #36]	; (8002ed4 <HAL_RCC_ClockConfig+0x510>)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb4:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <HAL_RCC_ClockConfig+0x510>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x514>
    {
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0af      	b.n	8003026 <HAL_RCC_ClockConfig+0x662>
 8002ec6:	bf00      	nop
 8002ec8:	46020800 	.word	0x46020800
 8002ecc:	46020c00 	.word	0x46020c00
 8002ed0:	08007ab0 	.word	0x08007ab0
 8002ed4:	40022000 	.word	0x40022000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d029      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x574>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	4b51      	ldr	r3, [pc, #324]	; (8003030 <HAL_RCC_ClockConfig+0x66c>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d221      	bcs.n	8002f38 <HAL_RCC_ClockConfig+0x574>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d014      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x562>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d010      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x562>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b50      	cmp	r3, #80	; 0x50
 8002f0a:	d00c      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x562>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b60      	cmp	r3, #96	; 0x60
 8002f12:	d008      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x562>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b70      	cmp	r3, #112	; 0x70
 8002f1a:	d004      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x562>
 8002f1c:	f240 6137 	movw	r1, #1591	; 0x637
 8002f20:	4844      	ldr	r0, [pc, #272]	; (8003034 <HAL_RCC_ClockConfig+0x670>)
 8002f22:	f7fd fc26 	bl	8000772 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002f26:	4b42      	ldr	r3, [pc, #264]	; (8003030 <HAL_RCC_ClockConfig+0x66c>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	493f      	ldr	r1, [pc, #252]	; (8003030 <HAL_RCC_ClockConfig+0x66c>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d02b      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x5d8>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	4b39      	ldr	r3, [pc, #228]	; (8003030 <HAL_RCC_ClockConfig+0x66c>)
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d222      	bcs.n	8002f9c <HAL_RCC_ClockConfig+0x5d8>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d014      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x5c4>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d010      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x5c4>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	2b50      	cmp	r3, #80	; 0x50
 8002f6c:	d00c      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x5c4>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b60      	cmp	r3, #96	; 0x60
 8002f74:	d008      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x5c4>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b70      	cmp	r3, #112	; 0x70
 8002f7c:	d004      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x5c4>
 8002f7e:	f240 6141 	movw	r1, #1601	; 0x641
 8002f82:	482c      	ldr	r0, [pc, #176]	; (8003034 <HAL_RCC_ClockConfig+0x670>)
 8002f84:	f7fd fbf5 	bl	8000772 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002f88:	4b29      	ldr	r3, [pc, #164]	; (8003030 <HAL_RCC_ClockConfig+0x66c>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	4926      	ldr	r1, [pc, #152]	; (8003030 <HAL_RCC_ClockConfig+0x66c>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d029      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x638>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	4b20      	ldr	r3, [pc, #128]	; (8003030 <HAL_RCC_ClockConfig+0x66c>)
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d221      	bcs.n	8002ffc <HAL_RCC_ClockConfig+0x638>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d014      	beq.n	8002fea <HAL_RCC_ClockConfig+0x626>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	d010      	beq.n	8002fea <HAL_RCC_ClockConfig+0x626>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	2b50      	cmp	r3, #80	; 0x50
 8002fce:	d00c      	beq.n	8002fea <HAL_RCC_ClockConfig+0x626>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	2b60      	cmp	r3, #96	; 0x60
 8002fd6:	d008      	beq.n	8002fea <HAL_RCC_ClockConfig+0x626>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	2b70      	cmp	r3, #112	; 0x70
 8002fde:	d004      	beq.n	8002fea <HAL_RCC_ClockConfig+0x626>
 8002fe0:	f240 614b 	movw	r1, #1611	; 0x64b
 8002fe4:	4813      	ldr	r0, [pc, #76]	; (8003034 <HAL_RCC_ClockConfig+0x670>)
 8002fe6:	f7fd fbc4 	bl	8000772 <assert_failed>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002fea:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_RCC_ClockConfig+0x66c>)
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	490e      	ldr	r1, [pc, #56]	; (8003030 <HAL_RCC_ClockConfig+0x66c>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002ffc:	f000 f822 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8003000:	4602      	mov	r2, r0
 8003002:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_ClockConfig+0x66c>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	490b      	ldr	r1, [pc, #44]	; (8003038 <HAL_RCC_ClockConfig+0x674>)
 800300c:	5ccb      	ldrb	r3, [r1, r3]
 800300e:	fa22 f303 	lsr.w	r3, r2, r3
 8003012:	4a0a      	ldr	r2, [pc, #40]	; (800303c <HAL_RCC_ClockConfig+0x678>)
 8003014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_RCC_ClockConfig+0x67c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd fcf2 	bl	8000a04 <HAL_InitTick>
 8003020:	4603      	mov	r3, r0
 8003022:	73fb      	strb	r3, [r7, #15]

  return status;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	46020c00 	.word	0x46020c00
 8003034:	08007ab0 	.word	0x08007ab0
 8003038:	08007b9c 	.word	0x08007b9c
 800303c:	20000000 	.word	0x20000000
 8003040:	20000004 	.word	0x20000004

08003044 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003044:	b480      	push	{r7}
 8003046:	b08b      	sub	sp, #44	; 0x2c
 8003048:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003052:	4b7b      	ldr	r3, [pc, #492]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800305c:	4b78      	ldr	r3, [pc, #480]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0x34>
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d121      	bne.n	80030b6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d11e      	bne.n	80030b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003078:	4b71      	ldr	r3, [pc, #452]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d107      	bne.n	8003094 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003084:	4b6e      	ldr	r3, [pc, #440]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800308a:	0b1b      	lsrs	r3, r3, #12
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
 8003092:	e005      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003094:	4b6a      	ldr	r3, [pc, #424]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	0f1b      	lsrs	r3, r3, #28
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030a0:	4a68      	ldr	r2, [pc, #416]	; (8003244 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d110      	bne.n	80030d2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80030b4:	e00d      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030b6:	4b62      	ldr	r3, [pc, #392]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d102      	bne.n	80030c8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030c2:	4b61      	ldr	r3, [pc, #388]	; (8003248 <HAL_RCC_GetSysClockFreq+0x204>)
 80030c4:	623b      	str	r3, [r7, #32]
 80030c6:	e004      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d101      	bne.n	80030d2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030ce:	4b5e      	ldr	r3, [pc, #376]	; (8003248 <HAL_RCC_GetSysClockFreq+0x204>)
 80030d0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b0c      	cmp	r3, #12
 80030d6:	f040 80ac 	bne.w	8003232 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80030da:	4b59      	ldr	r3, [pc, #356]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80030e4:	4b56      	ldr	r3, [pc, #344]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	0a1b      	lsrs	r3, r3, #8
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	3301      	adds	r3, #1
 80030f0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80030f2:	4b53      	ldr	r3, [pc, #332]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80030fe:	4b50      	ldr	r3, [pc, #320]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	08db      	lsrs	r3, r3, #3
 8003104:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003116:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8086 	beq.w	800322e <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d003      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0xec>
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	2b03      	cmp	r3, #3
 800312c:	d022      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0x130>
 800312e:	e043      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313a:	eddf 6a44 	vldr	s13, [pc, #272]	; 800324c <HAL_RCC_GetSysClockFreq+0x208>
 800313e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003142:	4b3f      	ldr	r3, [pc, #252]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003152:	ed97 6a01 	vldr	s12, [r7, #4]
 8003156:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003250 <HAL_RCC_GetSysClockFreq+0x20c>
 800315a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800315e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003166:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800316a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003172:	e046      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317e:	eddf 6a33 	vldr	s13, [pc, #204]	; 800324c <HAL_RCC_GetSysClockFreq+0x208>
 8003182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003186:	4b2e      	ldr	r3, [pc, #184]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003196:	ed97 6a01 	vldr	s12, [r7, #4]
 800319a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003250 <HAL_RCC_GetSysClockFreq+0x20c>
 800319e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80031a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b2:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80031b6:	e024      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	ee07 3a90 	vmov	s15, r3
 80031c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031d0:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80031d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d8:	ee07 3a90 	vmov	s15, r3
 80031dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80031e0:	ed97 6a01 	vldr	s12, [r7, #4]
 80031e4:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8003250 <HAL_RCC_GetSysClockFreq+0x20c>
 80031e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80031f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fc:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003200:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003202:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003206:	0e1b      	lsrs	r3, r3, #24
 8003208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800320c:	3301      	adds	r3, #1
 800320e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800321a:	edd7 6a07 	vldr	s13, [r7, #28]
 800321e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003226:	ee17 3a90 	vmov	r3, s15
 800322a:	623b      	str	r3, [r7, #32]
 800322c:	e001      	b.n	8003232 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8003232:	6a3b      	ldr	r3, [r7, #32]
}
 8003234:	4618      	mov	r0, r3
 8003236:	372c      	adds	r7, #44	; 0x2c
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	46020c00 	.word	0x46020c00
 8003244:	08007bb4 	.word	0x08007bb4
 8003248:	00f42400 	.word	0x00f42400
 800324c:	4b742400 	.word	0x4b742400
 8003250:	46000000 	.word	0x46000000

08003254 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003258:	f7ff fef4 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b07      	ldr	r3, [pc, #28]	; (800327c <HAL_RCC_GetHCLKFreq+0x28>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	4906      	ldr	r1, [pc, #24]	; (8003280 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003268:	5ccb      	ldrb	r3, [r1, r3]
 800326a:	fa22 f303 	lsr.w	r3, r2, r3
 800326e:	4a05      	ldr	r2, [pc, #20]	; (8003284 <HAL_RCC_GetHCLKFreq+0x30>)
 8003270:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003272:	4b04      	ldr	r3, [pc, #16]	; (8003284 <HAL_RCC_GetHCLKFreq+0x30>)
 8003274:	681b      	ldr	r3, [r3, #0]
}
 8003276:	4618      	mov	r0, r3
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	46020c00 	.word	0x46020c00
 8003280:	08007b9c 	.word	0x08007b9c
 8003284:	20000000 	.word	0x20000000

08003288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800328c:	f7ff ffe2 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 8003290:	4602      	mov	r2, r0
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	091b      	lsrs	r3, r3, #4
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	4903      	ldr	r1, [pc, #12]	; (80032ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800329e:	5ccb      	ldrb	r3, [r1, r3]
 80032a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	46020c00 	.word	0x46020c00
 80032ac:	08007bac 	.word	0x08007bac

080032b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80032b4:	f7ff ffce 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	; (80032d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	46020c00 	.word	0x46020c00
 80032d4:	08007bac 	.word	0x08007bac

080032d8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80032dc:	f7ff ffba 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <HAL_RCC_GetPCLK3Freq+0x20>)
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4903      	ldr	r1, [pc, #12]	; (80032fc <HAL_RCC_GetPCLK3Freq+0x24>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	46020c00 	.word	0x46020c00
 80032fc:	08007bac 	.word	0x08007bac

08003300 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003308:	4b3e      	ldr	r3, [pc, #248]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800330a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003316:	f7fe f9cf 	bl	80016b8 <HAL_PWREx_GetVoltageRange>
 800331a:	6178      	str	r0, [r7, #20]
 800331c:	e019      	b.n	8003352 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800331e:	4b39      	ldr	r3, [pc, #228]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003324:	4a37      	ldr	r2, [pc, #220]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003326:	f043 0304 	orr.w	r3, r3, #4
 800332a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800332e:	4b35      	ldr	r3, [pc, #212]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800333c:	f7fe f9bc 	bl	80016b8 <HAL_PWREx_GetVoltageRange>
 8003340:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003342:	4b30      	ldr	r3, [pc, #192]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003348:	4a2e      	ldr	r2, [pc, #184]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800334a:	f023 0304 	bic.w	r3, r3, #4
 800334e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003358:	d003      	beq.n	8003362 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003360:	d109      	bne.n	8003376 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003368:	d202      	bcs.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800336a:	2301      	movs	r3, #1
 800336c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800336e:	e033      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003374:	e030      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800337c:	d208      	bcs.n	8003390 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003384:	d102      	bne.n	800338c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003386:	2303      	movs	r3, #3
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	e025      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e035      	b.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003396:	d90f      	bls.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033a4:	d902      	bls.n	80033ac <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80033a6:	2300      	movs	r3, #0
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	e015      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80033ac:	2301      	movs	r3, #1
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	e012      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	e00f      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033be:	d109      	bne.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c6:	d102      	bne.n	80033ce <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80033c8:	2301      	movs	r3, #1
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	e004      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80033ce:	2302      	movs	r3, #2
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	e001      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80033d4:	2301      	movs	r3, #1
 80033d6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f023 020f 	bic.w	r2, r3, #15
 80033e0:	4909      	ldr	r1, [pc, #36]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80033e8:	4b07      	ldr	r3, [pc, #28]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d001      	beq.n	80033fa <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	46020c00 	.word	0x46020c00
 8003408:	40022000 	.word	0x40022000

0800340c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800340c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003410:	b0be      	sub	sp, #248	; 0xf8
 8003412:	af00      	add	r7, sp, #0
 8003414:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003418:	2300      	movs	r3, #0
 800341a:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800341e:	2300      	movs	r3, #0
 8003420:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));
 8003424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	f022 4460 	bic.w	r4, r2, #3758096384	; 0xe0000000
 8003430:	2500      	movs	r5, #0
 8003432:	ea54 0305 	orrs.w	r3, r4, r5
 8003436:	d009      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	f002 4860 	and.w	r8, r2, #3758096384	; 0xe0000000
 8003444:	4699      	mov	r9, r3
 8003446:	ea58 0309 	orrs.w	r3, r8, r9
 800344a:	d004      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800344c:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8003450:	48bc      	ldr	r0, [pc, #752]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003452:	f7fd f98e 	bl	8000772 <assert_failed>

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345e:	f002 0a01 	and.w	sl, r2, #1
 8003462:	f04f 0b00 	mov.w	fp, #0
 8003466:	ea5a 030b 	orrs.w	r3, sl, fp
 800346a:	d024      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));
 800346c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003472:	2b00      	cmp	r3, #0
 8003474:	d013      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8003476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347c:	2b01      	cmp	r3, #1
 800347e:	d00e      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8003480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003486:	2b02      	cmp	r3, #2
 8003488:	d009      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x92>
 800348a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800348e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003490:	2b03      	cmp	r3, #3
 8003492:	d004      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8003494:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8003498:	48aa      	ldr	r0, [pc, #680]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800349a:	f7fd f96a 	bl	8000772 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800349e:	4baa      	ldr	r3, [pc, #680]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034a4:	f023 0103 	bic.w	r1, r3, #3
 80034a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ae:	4aa6      	ldr	r2, [pc, #664]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034b0:	430b      	orrs	r3, r1
 80034b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034be:	f002 0302 	and.w	r3, r2, #2
 80034c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034c6:	2300      	movs	r3, #0
 80034c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80034cc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034d0:	460b      	mov	r3, r1
 80034d2:	4313      	orrs	r3, r2
 80034d4:	d024      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));
 80034d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d013      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80034e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d00e      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80034ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d009      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80034f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d004      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80034fe:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003502:	4890      	ldr	r0, [pc, #576]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003504:	f7fd f935 	bl	8000772 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003508:	4b8f      	ldr	r3, [pc, #572]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800350a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800350e:	f023 010c 	bic.w	r1, r3, #12
 8003512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	4a8b      	ldr	r2, [pc, #556]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800351a:	430b      	orrs	r3, r1
 800351c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003528:	f002 0304 	and.w	r3, r2, #4
 800352c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003530:	2300      	movs	r3, #0
 8003532:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003536:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800353a:	460b      	mov	r3, r1
 800353c:	4313      	orrs	r3, r2
 800353e:	d024      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));
 8003540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003546:	2b00      	cmp	r3, #0
 8003548:	d013      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800354a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	2b10      	cmp	r3, #16
 8003552:	d00e      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	2b20      	cmp	r3, #32
 800355c:	d009      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800355e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	2b30      	cmp	r3, #48	; 0x30
 8003566:	d004      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003568:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800356c:	4875      	ldr	r0, [pc, #468]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800356e:	f7fd f900 	bl	8000772 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003572:	4b75      	ldr	r3, [pc, #468]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003578:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800357c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003582:	4a71      	ldr	r2, [pc, #452]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003584:	430b      	orrs	r3, r1
 8003586:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800358a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	f002 0308 	and.w	r3, r2, #8
 8003596:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800359a:	2300      	movs	r3, #0
 800359c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035a0:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80035a4:	460b      	mov	r3, r1
 80035a6:	4313      	orrs	r3, r2
 80035a8:	d024      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));
 80035aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d013      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80035b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	d00e      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80035be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	2b80      	cmp	r3, #128	; 0x80
 80035c6:	d009      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80035c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ce:	2bc0      	cmp	r3, #192	; 0xc0
 80035d0:	d004      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80035d2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80035d6:	485b      	ldr	r0, [pc, #364]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d8:	f7fd f8cb 	bl	8000772 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80035dc:	4b5a      	ldr	r3, [pc, #360]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ec:	4a56      	ldr	r2, [pc, #344]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035ee:	430b      	orrs	r3, r1
 80035f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	f002 0310 	and.w	r3, r2, #16
 8003600:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003604:	2300      	movs	r3, #0
 8003606:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800360a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800360e:	460b      	mov	r3, r1
 8003610:	4313      	orrs	r3, r2
 8003612:	d027      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));
 8003614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x240>
 800361e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003628:	d010      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x240>
 800362a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003634:	d00a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800363a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003640:	d004      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003642:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003646:	483f      	ldr	r0, [pc, #252]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003648:	f7fd f893 	bl	8000772 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800364c:	4b3e      	ldr	r3, [pc, #248]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800364e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003652:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365c:	4a3a      	ldr	r2, [pc, #232]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800365e:	430b      	orrs	r3, r1
 8003660:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	f002 0320 	and.w	r3, r2, #32
 8003670:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003674:	2300      	movs	r3, #0
 8003676:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800367a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800367e:	460b      	mov	r3, r1
 8003680:	4313      	orrs	r3, r2
 8003682:	d029      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));
 8003684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800368a:	2b00      	cmp	r3, #0
 800368c:	d018      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800368e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003694:	2b01      	cmp	r3, #1
 8003696:	d013      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d00e      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80036a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d009      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80036ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d004      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80036b6:	f240 11f7 	movw	r1, #503	; 0x1f7
 80036ba:	4822      	ldr	r0, [pc, #136]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036bc:	f7fd f859 	bl	8000772 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80036c0:	4b21      	ldr	r3, [pc, #132]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036c6:	f023 0107 	bic.w	r1, r3, #7
 80036ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036d0:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036d2:	430b      	orrs	r3, r1
 80036d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80036e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	d02d      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));
 80036f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800370c:	d010      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800371a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003720:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003724:	d004      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003726:	f240 2101 	movw	r1, #513	; 0x201
 800372a:	4806      	ldr	r0, [pc, #24]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800372c:	f7fd f821 	bl	8000772 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003736:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800373a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800373e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003740:	e004      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x340>
 8003742:	bf00      	nop
 8003744:	08007ae8 	.word	0x08007ae8
 8003748:	46020c00 	.word	0x46020c00
 800374c:	4aab      	ldr	r2, [pc, #684]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800374e:	430b      	orrs	r3, r1
 8003750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003760:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003764:	2300      	movs	r3, #0
 8003766:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800376a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800376e:	460b      	mov	r3, r1
 8003770:	4313      	orrs	r3, r2
 8003772:	d027      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));
 8003774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d016      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800377e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003788:	d010      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800379a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800379c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037a0:	d004      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80037a2:	f240 210b 	movw	r1, #523	; 0x20b
 80037a6:	4896      	ldr	r0, [pc, #600]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80037a8:	f7fc ffe3 	bl	8000772 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80037ac:	4b93      	ldr	r3, [pc, #588]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80037ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037bc:	4a8f      	ldr	r2, [pc, #572]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80037be:	430b      	orrs	r3, r1
 80037c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80037d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037d4:	2300      	movs	r3, #0
 80037d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80037da:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80037de:	460b      	mov	r3, r1
 80037e0:	4313      	orrs	r3, r2
 80037e2:	d024      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));
 80037e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d013      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80037ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d00e      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80037f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fe:	2b80      	cmp	r3, #128	; 0x80
 8003800:	d009      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	2bc0      	cmp	r3, #192	; 0xc0
 800380a:	d004      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800380c:	f240 2115 	movw	r1, #533	; 0x215
 8003810:	487b      	ldr	r0, [pc, #492]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003812:	f7fc ffae 	bl	8000772 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003816:	4b79      	ldr	r3, [pc, #484]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800381c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003826:	4a75      	ldr	r2, [pc, #468]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003828:	430b      	orrs	r3, r1
 800382a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800382e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003836:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800383a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800383e:	2300      	movs	r3, #0
 8003840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003844:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003848:	460b      	mov	r3, r1
 800384a:	4313      	orrs	r3, r2
 800384c:	d027      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x492>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));
 800384e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003854:	2b00      	cmp	r3, #0
 8003856:	d016      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800385c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800385e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003862:	d010      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800386a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003876:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800387a:	d004      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800387c:	f240 211f 	movw	r1, #543	; 0x21f
 8003880:	485f      	ldr	r0, [pc, #380]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003882:	f7fc ff76 	bl	8000772 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003886:	4b5d      	ldr	r3, [pc, #372]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800388c:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8003890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003896:	4a59      	ldr	r2, [pc, #356]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003898:	430b      	orrs	r3, r1
 800389a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a6:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80038aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038ae:	2300      	movs	r3, #0
 80038b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038b4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80038b8:	460b      	mov	r3, r1
 80038ba:	4313      	orrs	r3, r2
 80038bc:	d027      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x502>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
 80038be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d016      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 80038c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d2:	d010      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 80038d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038de:	d00a      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 80038e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038ea:	d004      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 80038ec:	f44f 7110 	mov.w	r1, #576	; 0x240
 80038f0:	4843      	ldr	r0, [pc, #268]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80038f2:	f7fc ff3e 	bl	8000772 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80038f6:	4b41      	ldr	r3, [pc, #260]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80038f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038fc:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003906:	4a3d      	ldr	r2, [pc, #244]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003908:	430b      	orrs	r3, r1
 800390a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800390e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800391a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800391e:	2300      	movs	r3, #0
 8003920:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003924:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003928:	460b      	mov	r3, r1
 800392a:	4313      	orrs	r3, r2
 800392c:	d027      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
 800392e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003934:	2b00      	cmp	r3, #0
 8003936:	d016      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8003938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800393c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800393e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003942:	d010      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8003944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800394a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800394e:	d00a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8003950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003956:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800395a:	d004      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800395c:	f240 2147 	movw	r1, #583	; 0x247
 8003960:	4827      	ldr	r0, [pc, #156]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003962:	f7fc ff06 	bl	8000772 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003966:	4b25      	ldr	r3, [pc, #148]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800396c:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003976:	4a21      	ldr	r2, [pc, #132]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003978:	430b      	orrs	r3, r1
 800397a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800397e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800398a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800398e:	2300      	movs	r3, #0
 8003990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003994:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003998:	460b      	mov	r3, r1
 800399a:	4313      	orrs	r3, r2
 800399c:	d032      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
 800399e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d019      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80039aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b6:	d012      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80039b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c4:	d00b      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80039c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039d2:	d004      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80039d4:	f240 214e 	movw	r1, #590	; 0x24e
 80039d8:	4809      	ldr	r0, [pc, #36]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80039da:	f7fc feca 	bl	8000772 <assert_failed>
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80039de:	4b07      	ldr	r3, [pc, #28]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80039e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039f0:	4a02      	ldr	r2, [pc, #8]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80039f2:	430b      	orrs	r3, r1
 80039f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039f8:	e004      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80039fa:	bf00      	nop
 80039fc:	46020c00 	.word	0x46020c00
 8003a00:	08007ae8 	.word	0x08007ae8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0c:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003a10:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a12:	2300      	movs	r3, #0
 8003a14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a16:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	d06f      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));
 8003a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01c      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8003a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d016      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8003a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d010      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8003a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4c:	2b60      	cmp	r3, #96	; 0x60
 8003a4e:	d00a      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8003a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a58:	2b80      	cmp	r3, #128	; 0x80
 8003a5a:	d004      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8003a5c:	f240 2156 	movw	r1, #598	; 0x256
 8003a60:	48ab      	ldr	r0, [pc, #684]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 8003a62:	f7fc fe86 	bl	8000772 <assert_failed>

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6e:	2b80      	cmp	r3, #128	; 0x80
 8003a70:	d02d      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003a72:	2b80      	cmp	r3, #128	; 0x80
 8003a74:	d827      	bhi.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8003a76:	2b60      	cmp	r3, #96	; 0x60
 8003a78:	d02b      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8003a7a:	2b60      	cmp	r3, #96	; 0x60
 8003a7c:	d823      	bhi.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8003a7e:	2b40      	cmp	r3, #64	; 0x40
 8003a80:	d006      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d81f      	bhi.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x692>
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	d011      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8003a8e:	e01a      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a90:	4ba0      	ldr	r3, [pc, #640]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	4a9f      	ldr	r2, [pc, #636]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a9c:	e01a      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa2:	3308      	adds	r3, #8
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f002 fc25 	bl	80062f4 <RCCEx_PLL2_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ab0:	e010      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab6:	332c      	adds	r3, #44	; 0x2c
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f002 fd07 	bl	80064cc <RCCEx_PLL3_Config>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ac4:	e006      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8003acc:	e002      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
        break;
 8003ace:	bf00      	nop
 8003ad0:	e000      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
        break;
 8003ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad4:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10d      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003adc:	4b8d      	ldr	r3, [pc, #564]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003ade:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ae2:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8003ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aee:	4a89      	ldr	r2, [pc, #548]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003af0:	430b      	orrs	r3, r1
 8003af2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003af6:	e003      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af8:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003afc:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003b0c:	673b      	str	r3, [r7, #112]	; 0x70
 8003b0e:	2300      	movs	r3, #0
 8003b10:	677b      	str	r3, [r7, #116]	; 0x74
 8003b12:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003b16:	460b      	mov	r3, r1
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	d07a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x806>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));
 8003b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d020      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8003b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b34:	d019      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8003b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b42:	d012      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8003b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b50:	d00b      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8003b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5e:	d004      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8003b60:	f240 218a 	movw	r1, #650	; 0x28a
 8003b64:	486a      	ldr	r0, [pc, #424]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 8003b66:	f7fc fe04 	bl	8000772 <assert_failed>

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b76:	d033      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8003b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b7c:	d82c      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8003b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b82:	d02f      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8003b84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b88:	d826      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8003b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x796>
 8003b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b94:	d820      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 8003b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b9e:	d011      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8003ba0:	e01a      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ba2:	4b5c      	ldr	r3, [pc, #368]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	4a5b      	ldr	r2, [pc, #364]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bac:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003bae:	e01a      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7da>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f002 fb9c 	bl	80062f4 <RCCEx_PLL2_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003bc2:	e010      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7da>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc8:	332c      	adds	r3, #44	; 0x2c
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f002 fc7e 	bl	80064cc <RCCEx_PLL3_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003bd6:	e006      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8003bde:	e002      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7da>
        break;
 8003be0:	bf00      	nop
 8003be2:	e000      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7da>
        break;
 8003be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be6:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10d      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003bee:	4b49      	ldr	r3, [pc, #292]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003bf0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003bf4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c00:	4a44      	ldr	r2, [pc, #272]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003c02:	430b      	orrs	r3, r1
 8003c04:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003c08:	e003      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x806>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0a:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003c0e:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003c1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c20:	2300      	movs	r3, #0
 8003c22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c24:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	d078      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));
 8003c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d027      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x87e>
 8003c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c46:	d020      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x87e>
 8003c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c54:	d019      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x87e>
 8003c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c62:	d012      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x87e>
 8003c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c70:	d00b      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x87e>
 8003c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c7a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003c7e:	d004      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x87e>
 8003c80:	f240 21bd 	movw	r1, #701	; 0x2bd
 8003c84:	4822      	ldr	r0, [pc, #136]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 8003c86:	f7fc fd74 	bl	8000772 <assert_failed>

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c92:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003c96:	d028      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8003c98:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003c9c:	d821      	bhi.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8003c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ca2:	d022      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8003ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ca8:	d81b      	bhi.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8003caa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cae:	d01c      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8003cb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cb4:	d815      	bhi.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8003cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cba:	d008      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 8003cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc0:	d80f      	bhi.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d011      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8003cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cca:	d00e      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8003ccc:	e009      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f002 fb0d 	bl	80062f4 <RCCEx_PLL2_Config>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8003ce0:	e004      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x8e0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8003ce8:	e000      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x8e0>
        break;
 8003cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cec:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d111      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x90c>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003cf4:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003cf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cfa:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d06:	4a03      	ldr	r2, [pc, #12]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d0e:	e007      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8003d10:	08007ae8 	.word	0x08007ae8
 8003d14:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d18:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003d1c:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d28:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003d2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d2e:	2300      	movs	r3, #0
 8003d30:	667b      	str	r3, [r7, #100]	; 0x64
 8003d32:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003d36:	460b      	mov	r3, r1
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	d061      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));
 8003d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01c      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d016      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d010      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d00a      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d004      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003d78:	f240 21e1 	movw	r1, #737	; 0x2e1
 8003d7c:	48bb      	ldr	r0, [pc, #748]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0xc60>)
 8003d7e:	f7fc fcf8 	bl	8000772 <assert_failed>

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d81d      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003d8e:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003dd3 	.word	0x08003dd3
 8003d98:	08003da9 	.word	0x08003da9
 8003d9c:	08003db7 	.word	0x08003db7
 8003da0:	08003dd3 	.word	0x08003dd3
 8003da4:	08003dd3 	.word	0x08003dd3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003da8:	4bb1      	ldr	r3, [pc, #708]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	4ab0      	ldr	r2, [pc, #704]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8003dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003db4:	e00e      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dba:	332c      	adds	r3, #44	; 0x2c
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f002 fb85 	bl	80064cc <RCCEx_PLL3_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8003dc8:	e004      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
        break;
 8003dd2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003dd4:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10d      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003ddc:	4ba4      	ldr	r3, [pc, #656]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8003dde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003de2:	f023 0107 	bic.w	r1, r3, #7
 8003de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	4aa0      	ldr	r2, [pc, #640]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8003df0:	430b      	orrs	r3, r1
 8003df2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003df6:	e003      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003dfc:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003e0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e0e:	2300      	movs	r3, #0
 8003e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e12:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003e16:	460b      	mov	r3, r1
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	d071      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
 8003e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d020      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d019      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e42:	d012      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e50:	d00b      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e5e:	d004      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003e60:	f240 3107 	movw	r1, #775	; 0x307
 8003e64:	4881      	ldr	r0, [pc, #516]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0xc60>)
 8003e66:	f7fc fc84 	bl	8000772 <assert_failed>
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e76:	d028      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xabe>
 8003e78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e7c:	d821      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003e7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e82:	d024      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xac2>
 8003e84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e88:	d81b      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003e8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e8e:	d00e      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003e90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e94:	d815      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01b      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xac6>
 8003e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9e:	d110      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ea0:	4b73      	ldr	r3, [pc, #460]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	4a72      	ldr	r2, [pc, #456]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8003ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eaa:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003eac:	e012      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb2:	332c      	adds	r3, #44	; 0x2c
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f002 fb09 	bl	80064cc <RCCEx_PLL3_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8003ec8:	e004      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
        break;
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
        break;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
        break;
 8003ed2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003ed4:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10d      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003edc:	4b64      	ldr	r3, [pc, #400]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8003ede:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ee2:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eee:	4a60      	ldr	r2, [pc, #384]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ef6:	e003      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003efc:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003f0c:	653b      	str	r3, [r7, #80]	; 0x50
 8003f0e:	2300      	movs	r3, #0
 8003f10:	657b      	str	r3, [r7, #84]	; 0x54
 8003f12:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003f16:	460b      	mov	r3, r1
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f000 80db 	beq.w	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
 8003f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d019      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8003f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f3c:	d012      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8003f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f4a:	d00b      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8003f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f58:	d004      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8003f5a:	f240 312d 	movw	r1, #813	; 0x32d
 8003f5e:	4843      	ldr	r0, [pc, #268]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0xc60>)
 8003f60:	f7fc fc07 	bl	8000772 <assert_failed>
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f64:	4b42      	ldr	r3, [pc, #264]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8003f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d113      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f72:	4b3f      	ldr	r3, [pc, #252]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8003f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f78:	4a3d      	ldr	r2, [pc, #244]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8003f7a:	f043 0304 	orr.w	r3, r3, #4
 8003f7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003f82:	4b3b      	ldr	r3, [pc, #236]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8003f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
      pwrclkchanged = SET;
 8003f94:	2301      	movs	r3, #1
 8003f96:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003f9a:	4b36      	ldr	r3, [pc, #216]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xc68>)
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9e:	4a35      	ldr	r2, [pc, #212]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xc68>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fa6:	f7fc fd77 	bl	8000a98 <HAL_GetTick>
 8003faa:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003fae:	e00b      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb0:	f7fc fd72 	bl	8000a98 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d903      	bls.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
      {
        ret = HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8003fc6:	e005      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003fc8:	4b2a      	ldr	r3, [pc, #168]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xc68>)
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0ed      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
      }
    }

    if (ret == HAL_OK)
 8003fd4:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d16b      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fdc:	4b24      	ldr	r3, [pc, #144]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8003fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d023      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 8003ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d01b      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xc2e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004002:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8004004:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004010:	4b17      	ldr	r3, [pc, #92]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8004012:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004016:	4a16      	ldr	r2, [pc, #88]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8004018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004020:	4b13      	ldr	r3, [pc, #76]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8004022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004026:	4a12      	ldr	r2, [pc, #72]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8004028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004030:	4a0f      	ldr	r2, [pc, #60]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8004032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004036:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01f      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7fc fd27 	bl	8000a98 <HAL_GetTick>
 800404a:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404e:	e013      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004050:	f7fc fd22 	bl	8000a98 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800405a:	1ad2      	subs	r2, r2, r3
 800405c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004060:	429a      	cmp	r2, r3
 8004062:	d909      	bls.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
          {
            ret = HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
            break;
 800406a:	e00c      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800406c:	08007ae8 	.word	0x08007ae8
 8004070:	46020c00 	.word	0x46020c00
 8004074:	46020800 	.word	0x46020800
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004078:	4b77      	ldr	r3, [pc, #476]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 800407a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0e4      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xc44>
          }
        }
      }

      if (ret == HAL_OK)
 8004086:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10d      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800408e:	4b72      	ldr	r3, [pc, #456]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8004090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004094:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80040a0:	4a6d      	ldr	r2, [pc, #436]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80040a2:	430b      	orrs	r3, r1
 80040a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80040a8:	e008      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xcb0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040aa:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80040ae:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 80040b2:	e003      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xcb0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80040b8:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040bc:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d107      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c4:	4b64      	ldr	r3, [pc, #400]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80040c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ca:	4a63      	ldr	r2, [pc, #396]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80040cc:	f023 0304 	bic.w	r3, r3, #4
 80040d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80040d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040dc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80040e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80040e2:	2300      	movs	r3, #0
 80040e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80040ea:	460b      	mov	r3, r1
 80040ec:	4313      	orrs	r3, r2
 80040ee:	d062      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));
 80040f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d019      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80040fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004100:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004104:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004108:	d012      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800410a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004112:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004116:	d00b      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004120:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004124:	d004      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004126:	f44f 7160 	mov.w	r1, #896	; 0x380
 800412a:	484c      	ldr	r0, [pc, #304]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 800412c:	f7fc fb21 	bl	8000772 <assert_failed>

    switch (pPeriphClkInit->IclkClockSelection)
 8004130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004134:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004138:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800413c:	d022      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 800413e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004142:	d81b      	bhi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8004144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004148:	d011      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xd62>
 800414a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800414e:	d815      	bhi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8004150:	2b00      	cmp	r3, #0
 8004152:	d019      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004154:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004158:	d110      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800415a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415e:	3308      	adds	r3, #8
 8004160:	4618      	mov	r0, r3
 8004162:	f002 f8c7 	bl	80062f4 <RCCEx_PLL2_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 800416c:	e00d      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800416e:	4b3a      	ldr	r3, [pc, #232]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	4a39      	ldr	r2, [pc, #228]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8004174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004178:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800417a:	e006      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8004182:	e002      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xd7e>
        break;
 8004184:	bf00      	nop
 8004186:	e000      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xd7e>
        break;
 8004188:	bf00      	nop
    }
    if (ret == HAL_OK)
 800418a:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10d      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xda2>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004192:	4b31      	ldr	r3, [pc, #196]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8004194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004198:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800419c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041a4:	4a2c      	ldr	r2, [pc, #176]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80041a6:	430b      	orrs	r3, r1
 80041a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041ac:	e003      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ae:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80041b2:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041be:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80041c2:	643b      	str	r3, [r7, #64]	; 0x40
 80041c4:	2300      	movs	r3, #0
 80041c6:	647b      	str	r3, [r7, #68]	; 0x44
 80041c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80041cc:	460b      	mov	r3, r1
 80041ce:	4313      	orrs	r3, r2
 80041d0:	d04a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));
 80041d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d012      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80041de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ea:	d00b      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80041ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f8:	d004      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80041fa:	f240 31a5 	movw	r1, #933	; 0x3a5
 80041fe:	4817      	ldr	r0, [pc, #92]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8004200:	f7fc fab7 	bl	8000772 <assert_failed>

    switch (pPeriphClkInit->RngClockSelection)
 8004204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004208:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800420c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004210:	d00b      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
 8004212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004216:	d804      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xe16>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xe22>
 800421c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004220:	d007      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xe26>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8004228:	e004      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xe28>
        break;
 800422a:	bf00      	nop
 800422c:	e002      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xe28>
        break;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xe28>
        break;
 8004232:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004234:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d111      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 800423e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004242:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800424e:	4a02      	ldr	r2, [pc, #8]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8004250:	430b      	orrs	r3, r1
 8004252:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004256:	e007      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004258:	46020c00 	.word	0x46020c00
 800425c:	08007ae8 	.word	0x08007ae8
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004260:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8004264:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004270:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004274:	63bb      	str	r3, [r7, #56]	; 0x38
 8004276:	2300      	movs	r3, #0
 8004278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800427a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800427e:	460b      	mov	r3, r1
 8004280:	4313      	orrs	r3, r2
 8004282:	d01e      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));
 8004284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004288:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00b      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 8004290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004294:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800429c:	d004      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 800429e:	f240 31c6 	movw	r1, #966	; 0x3c6
 80042a2:	48aa      	ldr	r0, [pc, #680]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 80042a4:	f7fc fa65 	bl	8000772 <assert_failed>

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80042a8:	4ba9      	ldr	r3, [pc, #676]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 80042aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80042ae:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80042b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042ba:	4aa5      	ldr	r2, [pc, #660]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 80042bc:	430b      	orrs	r3, r1
 80042be:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80042c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80042ce:	633b      	str	r3, [r7, #48]	; 0x30
 80042d0:	2300      	movs	r3, #0
 80042d2:	637b      	str	r3, [r7, #52]	; 0x34
 80042d4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80042d8:	460b      	mov	r3, r1
 80042da:	4313      	orrs	r3, r2
 80042dc:	d02b      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xf2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));
 80042de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 80042ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042f6:	d004      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 80042f8:	f240 31cf 	movw	r1, #975	; 0x3cf
 80042fc:	4893      	ldr	r0, [pc, #588]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 80042fe:	f7fc fa38 	bl	8000772 <assert_failed>

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004306:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800430a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800430e:	d105      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xf10>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004310:	4b8f      	ldr	r3, [pc, #572]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	4a8e      	ldr	r2, [pc, #568]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8004316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431a:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800431c:	4b8c      	ldr	r3, [pc, #560]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 800431e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004322:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800432e:	4a88      	ldr	r2, [pc, #544]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8004330:	430b      	orrs	r3, r1
 8004332:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28
 8004344:	2300      	movs	r3, #0
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004348:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800434c:	460b      	mov	r3, r1
 800434e:	4313      	orrs	r3, r2
 8004350:	d02c      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xfa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));
 8004352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004356:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d019      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xf86>
 800435e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004362:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800436a:	d012      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xf86>
 800436c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004370:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004374:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004378:	d00b      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xf86>
 800437a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004382:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004386:	d004      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xf86>
 8004388:	f240 31df 	movw	r1, #991	; 0x3df
 800438c:	486f      	ldr	r0, [pc, #444]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 800438e:	f7fc f9f0 	bl	8000772 <assert_failed>

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004392:	4b6f      	ldr	r3, [pc, #444]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8004394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800439c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043a4:	496a      	ldr	r1, [pc, #424]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80043ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80043b8:	623b      	str	r3, [r7, #32]
 80043ba:	2300      	movs	r3, #0
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
 80043be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80043c2:	460b      	mov	r3, r1
 80043c4:	4313      	orrs	r3, r2
 80043c6:	d02c      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x1016>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));
 80043c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d019      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80043d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e0:	d012      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80043e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043ee:	d00b      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80043f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043fc:	d004      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80043fe:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8004402:	4852      	ldr	r0, [pc, #328]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 8004404:	f7fc f9b5 	bl	8000772 <assert_failed>

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004408:	4b51      	ldr	r3, [pc, #324]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 800440a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800440e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004416:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800441a:	494d      	ldr	r1, [pc, #308]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	2300      	movs	r3, #0
 8004432:	61fb      	str	r3, [r7, #28]
 8004434:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004438:	460b      	mov	r3, r1
 800443a:	4313      	orrs	r3, r2
 800443c:	d029      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1086>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));
 800443e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004442:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004446:	2b00      	cmp	r3, #0
 8004448:	d016      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800444a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004452:	2b08      	cmp	r3, #8
 8004454:	d010      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800445e:	2b10      	cmp	r3, #16
 8004460:	d00a      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004466:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800446a:	2b18      	cmp	r3, #24
 800446c:	d004      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800446e:	f240 31f3 	movw	r1, #1011	; 0x3f3
 8004472:	4836      	ldr	r0, [pc, #216]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 8004474:	f7fc f97d 	bl	8000772 <assert_failed>

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004478:	4b35      	ldr	r3, [pc, #212]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 800447a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800447e:	f023 0218 	bic.w	r2, r3, #24
 8004482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004486:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800448a:	4931      	ldr	r1, [pc, #196]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80044a8:	460b      	mov	r3, r1
 80044aa:	4313      	orrs	r3, r2
 80044ac:	d056      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x1150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));
 80044ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d019      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x10e2>
 80044ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c6:	d012      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x10e2>
 80044c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044d4:	d00b      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x10e2>
 80044d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044e2:	d004      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x10e2>
 80044e4:	f240 31fd 	movw	r1, #1021	; 0x3fd
 80044e8:	4818      	ldr	r0, [pc, #96]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 80044ea:	f7fc f942 	bl	8000772 <assert_failed>

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80044ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044fa:	d105      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x10fc>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044fc:	4b14      	ldr	r3, [pc, #80]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	4a13      	ldr	r2, [pc, #76]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8004502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004506:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800450c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004510:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004514:	d108      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x111c>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451a:	3308      	adds	r3, #8
 800451c:	4618      	mov	r0, r3
 800451e:	f001 fee9 	bl	80062f4 <RCCEx_PLL2_Config>
 8004522:	4603      	mov	r3, r0
 8004524:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    }
    if (ret == HAL_OK)
 8004528:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d111      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004530:	4b07      	ldr	r3, [pc, #28]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8004532:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004536:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800453a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004542:	4903      	ldr	r1, [pc, #12]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800454a:	e007      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x1150>
 800454c:	08007ae8 	.word	0x08007ae8
 8004550:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004554:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8004558:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800455c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004564:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004572:	460b      	mov	r3, r1
 8004574:	4313      	orrs	r3, r2
 8004576:	d053      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));
 8004578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004580:	2b00      	cmp	r3, #0
 8004582:	d012      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x119e>
 8004584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800458c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004590:	d00b      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x119e>
 8004592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800459a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800459e:	d004      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x119e>
 80045a0:	f240 414a 	movw	r1, #1098	; 0x44a
 80045a4:	4838      	ldr	r0, [pc, #224]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 80045a6:	f7fc f8e4 	bl	8000772 <assert_failed>

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80045aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045b6:	d00e      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
 80045b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045bc:	d815      	bhi.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x11de>
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d017      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x11e6>
 80045c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c6:	d110      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x11de>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c8:	4b30      	ldr	r3, [pc, #192]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	4a2f      	ldr	r2, [pc, #188]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 80045ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d2:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80045d4:	e00e      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045da:	3308      	adds	r3, #8
 80045dc:	4618      	mov	r0, r3
 80045de:	f001 fe89 	bl	80062f4 <RCCEx_PLL2_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80045e8:	e004      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      default:
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 80045f0:	e000      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 80045f2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80045f4:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10d      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80045fc:	4b23      	ldr	r3, [pc, #140]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 80045fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004602:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460e:	491f      	ldr	r1, [pc, #124]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004616:	e003      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004618:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800461c:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800462c:	603b      	str	r3, [r7, #0]
 800462e:	2300      	movs	r3, #0
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004636:	460b      	mov	r3, r1
 8004638:	4313      	orrs	r3, r2
 800463a:	d01e      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x126e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));
 800463c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004640:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00b      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800464c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004654:	d004      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004656:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800465a:	480b      	ldr	r0, [pc, #44]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 800465c:	f7fc f889 	bl	8000772 <assert_failed>

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 8004662:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004666:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800466a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004672:	4906      	ldr	r1, [pc, #24]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800467a:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
}
 800467e:	4618      	mov	r0, r3
 8004680:	37f8      	adds	r7, #248	; 0xf8
 8004682:	46bd      	mov	sp, r7
 8004684:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004688:	08007ae8 	.word	0x08007ae8
 800468c:	46020c00 	.word	0x46020c00

08004690 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004690:	b480      	push	{r7}
 8004692:	b089      	sub	sp, #36	; 0x24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004698:	4bad      	ldr	r3, [pc, #692]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800469a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80046a2:	4bab      	ldr	r3, [pc, #684]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80046ac:	4ba8      	ldr	r3, [pc, #672]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	0a1b      	lsrs	r3, r3, #8
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	3301      	adds	r3, #1
 80046b8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80046ba:	4ba5      	ldr	r3, [pc, #660]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	091b      	lsrs	r3, r3, #4
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80046c6:	4ba2      	ldr	r3, [pc, #648]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	08db      	lsrs	r3, r3, #3
 80046cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046de:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8123 	beq.w	8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d062      	beq.n	80047b6 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	f200 8081 	bhi.w	80047fa <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d024      	beq.n	8004748 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d17a      	bne.n	80047fa <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004954 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004716:	4b8e      	ldr	r3, [pc, #568]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471e:	ee07 3a90 	vmov	s15, r3
 8004722:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004726:	ed97 6a02 	vldr	s12, [r7, #8]
 800472a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004958 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800472e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004732:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800473a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800473e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004746:	e08f      	b.n	8004868 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004748:	4b81      	ldr	r3, [pc, #516]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8004754:	4b7e      	ldr	r3, [pc, #504]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	0f1b      	lsrs	r3, r3, #28
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	e006      	b.n	800476e <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8004760:	4b7b      	ldr	r3, [pc, #492]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004766:	041b      	lsls	r3, r3, #16
 8004768:	0f1b      	lsrs	r3, r3, #28
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	4a7b      	ldr	r2, [pc, #492]	; (800495c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8004770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004774:	ee07 3a90 	vmov	s15, r3
 8004778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	ee07 3a90 	vmov	s15, r3
 8004790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004794:	ed97 6a02 	vldr	s12, [r7, #8]
 8004798:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004958 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800479c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80047ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047b4:	e058      	b.n	8004868 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	ee07 3a90 	vmov	s15, r3
 80047bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004954 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80047c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c8:	4b61      	ldr	r3, [pc, #388]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d0:	ee07 3a90 	vmov	s15, r3
 80047d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80047d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80047dc:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004958 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80047e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80047e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047f8:	e036      	b.n	8004868 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80047fa:	4b55      	ldr	r3, [pc, #340]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8004806:	4b52      	ldr	r3, [pc, #328]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	0f1b      	lsrs	r3, r3, #28
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	e006      	b.n	8004820 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8004812:	4b4f      	ldr	r3, [pc, #316]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004814:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004818:	041b      	lsls	r3, r3, #16
 800481a:	0f1b      	lsrs	r3, r3, #28
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	4a4e      	ldr	r2, [pc, #312]	; (800495c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8004822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	ee07 3a90 	vmov	s15, r3
 8004834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004846:	ed97 6a02 	vldr	s12, [r7, #8]
 800484a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004958 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800484e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800485a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800485e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004866:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004868:	4b39      	ldr	r3, [pc, #228]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d017      	beq.n	80048a4 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004874:	4b36      	ldr	r3, [pc, #216]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004878:	0a5b      	lsrs	r3, r3, #9
 800487a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8004886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800488a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800488e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800489a:	ee17 2a90 	vmov	r2, s15
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e002      	b.n	80048aa <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80048aa:	4b29      	ldr	r3, [pc, #164]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d017      	beq.n	80048e6 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80048b6:	4b26      	ldr	r3, [pc, #152]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80048b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ba:	0c1b      	lsrs	r3, r3, #16
 80048bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c0:	ee07 3a90 	vmov	s15, r3
 80048c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80048c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048cc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80048d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80048d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048dc:	ee17 2a90 	vmov	r2, s15
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	605a      	str	r2, [r3, #4]
 80048e4:	e002      	b.n	80048ec <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80048ec:	4b18      	ldr	r3, [pc, #96]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d017      	beq.n	8004928 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80048f8:	4b15      	ldr	r3, [pc, #84]	; (8004950 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80048fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fc:	0e1b      	lsrs	r3, r3, #24
 80048fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800490a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800490e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004912:	edd7 6a07 	vldr	s13, [r7, #28]
 8004916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800491a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800491e:	ee17 2a90 	vmov	r2, s15
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004926:	e00c      	b.n	8004942 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	609a      	str	r2, [r3, #8]
}
 800492e:	e008      	b.n	8004942 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	609a      	str	r2, [r3, #8]
}
 8004942:	bf00      	nop
 8004944:	3724      	adds	r7, #36	; 0x24
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	46020c00 	.word	0x46020c00
 8004954:	4b742400 	.word	0x4b742400
 8004958:	46000000 	.word	0x46000000
 800495c:	08007bb4 	.word	0x08007bb4

08004960 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004960:	b480      	push	{r7}
 8004962:	b089      	sub	sp, #36	; 0x24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004968:	4bad      	ldr	r3, [pc, #692]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800496a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004970:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004972:	4bab      	ldr	r3, [pc, #684]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800497c:	4ba8      	ldr	r3, [pc, #672]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	0a1b      	lsrs	r3, r3, #8
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	3301      	adds	r3, #1
 8004988:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800498a:	4ba5      	ldr	r3, [pc, #660]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004996:	4ba2      	ldr	r3, [pc, #648]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	08db      	lsrs	r3, r3, #3
 800499c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 8123 	beq.w	8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d062      	beq.n	8004a86 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	f200 8081 	bhi.w	8004aca <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d024      	beq.n	8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d17a      	bne.n	8004aca <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049de:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004c24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80049e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049e6:	4b8e      	ldr	r3, [pc, #568]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80049f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80049fa:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80049fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a16:	e08f      	b.n	8004b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004a18:	4b81      	ldr	r3, [pc, #516]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8004a24:	4b7e      	ldr	r3, [pc, #504]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	0f1b      	lsrs	r3, r3, #28
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	e006      	b.n	8004a3e <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8004a30:	4b7b      	ldr	r3, [pc, #492]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a36:	041b      	lsls	r3, r3, #16
 8004a38:	0f1b      	lsrs	r3, r3, #28
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	4a7b      	ldr	r2, [pc, #492]	; (8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8004a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a44:	ee07 3a90 	vmov	s15, r3
 8004a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	ee07 3a90 	vmov	s15, r3
 8004a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a64:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a68:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004a6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a78:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a84:	e058      	b.n	8004b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	ee07 3a90 	vmov	s15, r3
 8004a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a90:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004c24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004a94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a98:	4b61      	ldr	r3, [pc, #388]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa0:	ee07 3a90 	vmov	s15, r3
 8004aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004aa8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aac:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004ab0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004ab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ab8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004abc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ac8:	e036      	b.n	8004b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004aca:	4b55      	ldr	r3, [pc, #340]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8004ad6:	4b52      	ldr	r3, [pc, #328]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	0f1b      	lsrs	r3, r3, #28
 8004adc:	f003 030f 	and.w	r3, r3, #15
 8004ae0:	e006      	b.n	8004af0 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8004ae2:	4b4f      	ldr	r3, [pc, #316]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ae8:	041b      	lsls	r3, r3, #16
 8004aea:	0f1b      	lsrs	r3, r3, #28
 8004aec:	f003 030f 	and.w	r3, r3, #15
 8004af0:	4a4e      	ldr	r2, [pc, #312]	; (8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8004af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b16:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b1a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b36:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004b38:	4b39      	ldr	r3, [pc, #228]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d017      	beq.n	8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004b44:	4b36      	ldr	r3, [pc, #216]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b48:	0a5b      	lsrs	r3, r3, #9
 8004b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8004b56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b5a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004b5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b6a:	ee17 2a90 	vmov	r2, s15
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	e002      	b.n	8004b7a <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004b7a:	4b29      	ldr	r3, [pc, #164]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d017      	beq.n	8004bb6 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004b86:	4b26      	ldr	r3, [pc, #152]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8a:	0c1b      	lsrs	r3, r3, #16
 8004b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b90:	ee07 3a90 	vmov	s15, r3
 8004b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004b98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b9c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004ba0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bac:	ee17 2a90 	vmov	r2, s15
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	605a      	str	r2, [r3, #4]
 8004bb4:	e002      	b.n	8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004bbc:	4b18      	ldr	r3, [pc, #96]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d017      	beq.n	8004bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004bc8:	4b15      	ldr	r3, [pc, #84]	; (8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bcc:	0e1b      	lsrs	r3, r3, #24
 8004bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004bda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bde:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004be2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bee:	ee17 2a90 	vmov	r2, s15
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004bf6:	e00c      	b.n	8004c12 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	609a      	str	r2, [r3, #8]
}
 8004bfe:	e008      	b.n	8004c12 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	609a      	str	r2, [r3, #8]
}
 8004c12:	bf00      	nop
 8004c14:	3724      	adds	r7, #36	; 0x24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	46020c00 	.word	0x46020c00
 8004c24:	4b742400 	.word	0x4b742400
 8004c28:	46000000 	.word	0x46000000
 8004c2c:	08007bb4 	.word	0x08007bb4

08004c30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b089      	sub	sp, #36	; 0x24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004c38:	4bad      	ldr	r3, [pc, #692]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c40:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004c42:	4bab      	ldr	r3, [pc, #684]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004c4c:	4ba8      	ldr	r3, [pc, #672]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c50:	0a1b      	lsrs	r3, r3, #8
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	3301      	adds	r3, #1
 8004c58:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004c5a:	4ba5      	ldr	r3, [pc, #660]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	091b      	lsrs	r3, r3, #4
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004c66:	4ba2      	ldr	r3, [pc, #648]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6a:	08db      	lsrs	r3, r3, #3
 8004c6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8123 	beq.w	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d062      	beq.n	8004d56 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	f200 8081 	bhi.w	8004d9a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d024      	beq.n	8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d17a      	bne.n	8004d9a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cae:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb6:	4b8e      	ldr	r3, [pc, #568]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cca:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce2:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8004ce6:	e08f      	b.n	8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004ce8:	4b81      	ldr	r3, [pc, #516]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8004cf4:	4b7e      	ldr	r3, [pc, #504]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	0f1b      	lsrs	r3, r3, #28
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	e006      	b.n	8004d0e <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8004d00:	4b7b      	ldr	r3, [pc, #492]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004d02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d06:	041b      	lsls	r3, r3, #16
 8004d08:	0f1b      	lsrs	r3, r3, #28
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	4a7b      	ldr	r2, [pc, #492]	; (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d14:	ee07 3a90 	vmov	s15, r3
 8004d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	ee07 3a90 	vmov	s15, r3
 8004d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d34:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d38:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d54:	e058      	b.n	8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	ee07 3a90 	vmov	s15, r3
 8004d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d60:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d68:	4b61      	ldr	r3, [pc, #388]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d70:	ee07 3a90 	vmov	s15, r3
 8004d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d78:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d7c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d98:	e036      	b.n	8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004d9a:	4b55      	ldr	r3, [pc, #340]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8004da6:	4b52      	ldr	r3, [pc, #328]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	0f1b      	lsrs	r3, r3, #28
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	e006      	b.n	8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8004db2:	4b4f      	ldr	r3, [pc, #316]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004db4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004db8:	041b      	lsls	r3, r3, #16
 8004dba:	0f1b      	lsrs	r3, r3, #28
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	4a4e      	ldr	r2, [pc, #312]	; (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	ee07 3a90 	vmov	s15, r3
 8004dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dea:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e06:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004e08:	4b39      	ldr	r3, [pc, #228]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d017      	beq.n	8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004e14:	4b36      	ldr	r3, [pc, #216]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e18:	0a5b      	lsrs	r3, r3, #9
 8004e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e3a:	ee17 2a90 	vmov	r2, s15
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	e002      	b.n	8004e4a <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004e4a:	4b29      	ldr	r3, [pc, #164]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d017      	beq.n	8004e86 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004e56:	4b26      	ldr	r3, [pc, #152]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	0c1b      	lsrs	r3, r3, #16
 8004e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e60:	ee07 3a90 	vmov	s15, r3
 8004e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004e68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e6c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004e70:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e7c:	ee17 2a90 	vmov	r2, s15
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	605a      	str	r2, [r3, #4]
 8004e84:	e002      	b.n	8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004e8c:	4b18      	ldr	r3, [pc, #96]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d017      	beq.n	8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004e98:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9c:	0e1b      	lsrs	r3, r3, #24
 8004e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004eae:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ebe:	ee17 2a90 	vmov	r2, s15
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004ec6:	e00c      	b.n	8004ee2 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	609a      	str	r2, [r3, #8]
}
 8004ece:	e008      	b.n	8004ee2 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	609a      	str	r2, [r3, #8]
}
 8004ee2:	bf00      	nop
 8004ee4:	3724      	adds	r7, #36	; 0x24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	46020c00 	.word	0x46020c00
 8004ef4:	4b742400 	.word	0x4b742400
 8004ef8:	46000000 	.word	0x46000000
 8004efc:	08007bb4 	.word	0x08007bb4

08004f00 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004f00:	b5b0      	push	{r4, r5, r7, lr}
 8004f02:	b08e      	sub	sp, #56	; 0x38
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	e9c7 0100 	strd	r0, r1, [r7]

  uint32_t frequency;
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8004f0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f0e:	f020 4260 	bic.w	r2, r0, #3758096384	; 0xe0000000
 8004f12:	2300      	movs	r3, #0
 8004f14:	4313      	orrs	r3, r2
 8004f16:	d007      	beq.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8004f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f1c:	f002 4460 	and.w	r4, r2, #3758096384	; 0xe0000000
 8004f20:	461d      	mov	r5, r3
 8004f22:	ea54 0305 	orrs.w	r3, r4, r5
 8004f26:	d004      	beq.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 8004f28:	f240 711a 	movw	r1, #1818	; 0x71a
 8004f2c:	4899      	ldr	r0, [pc, #612]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f2e:	f7fb fc20 	bl	8000772 <assert_failed>

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004f32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f36:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004f3a:	430b      	orrs	r3, r1
 8004f3c:	d145      	bne.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xca>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004f3e:	4b96      	ldr	r3, [pc, #600]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f48:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004f4a:	4b93      	ldr	r3, [pc, #588]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d108      	bne.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f5e:	d104      	bne.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      frequency = LSE_VALUE;
 8004f60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f64:	637b      	str	r3, [r7, #52]	; 0x34
 8004f66:	f001 b9b5 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004f6a:	4b8b      	ldr	r3, [pc, #556]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f78:	d114      	bne.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f80:	d110      	bne.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f82:	4b85      	ldr	r3, [pc, #532]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004f84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f90:	d103      	bne.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        frequency = LSI_VALUE / 128U;
 8004f92:	23fa      	movs	r3, #250	; 0xfa
 8004f94:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f96:	f001 b99d 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      else
      {
        frequency = LSI_VALUE;
 8004f9a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004f9e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004fa0:	f001 b998 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004fa4:	4b7c      	ldr	r3, [pc, #496]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fb0:	d107      	bne.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fb8:	d103      	bne.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
    {
      frequency = HSE_VALUE / 32U;
 8004fba:	4b78      	ldr	r3, [pc, #480]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004fbe:	f001 b989 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fc6:	f001 b985 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fce:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	d151      	bne.n	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004fd6:	4b70      	ldr	r3, [pc, #448]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004fd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004fdc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004fe0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	2b80      	cmp	r3, #128	; 0x80
 8004fe6:	d035      	beq.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	2b80      	cmp	r3, #128	; 0x80
 8004fec:	d841      	bhi.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	2b60      	cmp	r3, #96	; 0x60
 8004ff2:	d02a      	beq.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	2b60      	cmp	r3, #96	; 0x60
 8004ff8:	d83b      	bhi.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	2b40      	cmp	r3, #64	; 0x40
 8004ffe:	d009      	beq.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8005000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005002:	2b40      	cmp	r3, #64	; 0x40
 8005004:	d835      	bhi.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00c      	beq.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	2b20      	cmp	r3, #32
 8005010:	d012      	beq.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005012:	e02e      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff fb39 	bl	8004690 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005022:	f001 b957 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005026:	f107 0318 	add.w	r3, r7, #24
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff fc98 	bl	8004960 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005034:	f001 b94e 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005038:	f107 030c 	add.w	r3, r7, #12
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff fdf7 	bl	8004c30 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005046:	f001 b945 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800504a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800504e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005050:	f001 b940 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005054:	4b50      	ldr	r3, [pc, #320]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800505c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005060:	d103      	bne.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        {
          frequency = HSI_VALUE;
 8005062:	4b4f      	ldr	r3, [pc, #316]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005064:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005066:	f001 b935 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800506e:	f001 b931 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default :
      {
        frequency = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005076:	f001 b92d 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800507a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800507e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005082:	430b      	orrs	r3, r1
 8005084:	d158      	bne.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005086:	4b44      	ldr	r3, [pc, #272]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005088:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800508c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005090:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005098:	d03b      	beq.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a0:	d846      	bhi.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050a8:	d02e      	beq.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050b0:	d83e      	bhi.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050b8:	d00b      	beq.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c0:	d836      	bhi.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00d      	beq.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ce:	d012      	beq.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
 80050d0:	e02e      	b.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff fada 	bl	8004690 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050e0:	f001 b8f8 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050e4:	f107 0318 	add.w	r3, r7, #24
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7ff fc39 	bl	8004960 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050f2:	f001 b8ef 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050f6:	f107 030c 	add.w	r3, r7, #12
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff fd98 	bl	8004c30 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005104:	f001 b8e6 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005108:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800510c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800510e:	f001 b8e1 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005112:	4b21      	ldr	r3, [pc, #132]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800511a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511e:	d103      	bne.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
        {
          frequency = HSI_VALUE;
 8005120:	4b1f      	ldr	r3, [pc, #124]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005122:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005124:	f001 b8d6 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800512c:	f001 b8d2 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default :

        frequency = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005134:	f001 b8ce 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8005138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800513c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005140:	430b      	orrs	r3, r1
 8005142:	d131      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8005144:	4b14      	ldr	r3, [pc, #80]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005146:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800514a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800514e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8005150:	4b11      	ldr	r3, [pc, #68]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800515c:	d106      	bne.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	2b00      	cmp	r3, #0
 8005162:	d103      	bne.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      frequency = HSI_VALUE;
 8005164:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005166:	637b      	str	r3, [r7, #52]	; 0x34
 8005168:	f001 b8b4 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800516c:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005178:	d107      	bne.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005180:	d103      	bne.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      frequency = HSI_VALUE >> 1U;
 8005182:	4b08      	ldr	r3, [pc, #32]	; (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005184:	637b      	str	r3, [r7, #52]	; 0x34
 8005186:	f001 b8a5 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
 800518e:	f001 b8a1 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 8005192:	bf00      	nop
 8005194:	08007ae8 	.word	0x08007ae8
 8005198:	46020c00 	.word	0x46020c00
 800519c:	0007a120 	.word	0x0007a120
 80051a0:	00f42400 	.word	0x00f42400
 80051a4:	007a1200 	.word	0x007a1200
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80051a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ac:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80051b0:	430b      	orrs	r3, r1
 80051b2:	d165      	bne.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80051b4:	4ba8      	ldr	r3, [pc, #672]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80051b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051ba:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80051be:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80051c6:	d034      	beq.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80051ce:	d853      	bhi.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80051d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051d6:	d00b      	beq.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051de:	d84b      	bhi.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d016      	beq.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051ec:	d009      	beq.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80051ee:	e043      	b.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff fa4b 	bl	8004690 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051fe:	f001 b869 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005202:	f107 0318 	add.w	r3, r7, #24
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff fbaa 	bl	8004960 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005210:	f001 b860 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005214:	4b90      	ldr	r3, [pc, #576]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800521c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005220:	d103      	bne.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
        {
          frequency = HSI48_VALUE;
 8005222:	4b8e      	ldr	r3, [pc, #568]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8005224:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005226:	f001 b855 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800522e:	f001 b851 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005232:	4b89      	ldr	r3, [pc, #548]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b20      	cmp	r3, #32
 800523c:	d118      	bne.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800523e:	4b86      	ldr	r3, [pc, #536]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d005      	beq.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800524a:	4b83      	ldr	r3, [pc, #524]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	0e1b      	lsrs	r3, r3, #24
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	e006      	b.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8005256:	4b80      	ldr	r3, [pc, #512]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005258:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800525c:	041b      	lsls	r3, r3, #16
 800525e:	0e1b      	lsrs	r3, r3, #24
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	4a7e      	ldr	r2, [pc, #504]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x560>)
 8005266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800526a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800526c:	f001 b832 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005274:	f001 b82e 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default :

        frequency = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800527c:	f001 b82a 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005284:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8005288:	430b      	orrs	r3, r1
 800528a:	d17f      	bne.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800528c:	4b72      	ldr	r3, [pc, #456]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800528e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005296:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	2b00      	cmp	r3, #0
 800529c:	d165      	bne.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800529e:	4b6e      	ldr	r3, [pc, #440]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80052a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052a4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80052a8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80052b0:	d034      	beq.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80052b8:	d853      	bhi.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c0:	d00b      	beq.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c8:	d84b      	bhi.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d016      	beq.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052d6:	d009      	beq.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
 80052d8:	e043      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff f9d6 	bl	8004690 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80052e8:	f000 bff4 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052ec:	f107 0318 	add.w	r3, r7, #24
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff fb35 	bl	8004960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80052fa:	f000 bfeb 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80052fe:	4b56      	ldr	r3, [pc, #344]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800530a:	d103      	bne.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          {
            frequency = HSI48_VALUE;
 800530c:	4b53      	ldr	r3, [pc, #332]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 800530e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005310:	f000 bfe0 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
            frequency = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005318:	f000 bfdc 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800531c:	4b4e      	ldr	r3, [pc, #312]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b20      	cmp	r3, #32
 8005326:	d118      	bne.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005328:	4b4b      	ldr	r3, [pc, #300]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 8005334:	4b48      	ldr	r3, [pc, #288]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	0e1b      	lsrs	r3, r3, #24
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	e006      	b.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005340:	4b45      	ldr	r3, [pc, #276]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005342:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005346:	041b      	lsls	r3, r3, #16
 8005348:	0e1b      	lsrs	r3, r3, #24
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	4a44      	ldr	r2, [pc, #272]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x560>)
 8005350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005354:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005356:	f000 bfbd 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
            frequency = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800535e:	f000 bfb9 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
        }
        default :
        {
          frequency = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005366:	f000 bfb5 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005370:	d108      	bne.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff f98a 	bl	8004690 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	637b      	str	r3, [r7, #52]	; 0x34
 8005380:	f000 bfa8 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else
    {
      frequency = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	637b      	str	r3, [r7, #52]	; 0x34
 8005388:	f000 bfa4 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800538c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005390:	1e51      	subs	r1, r2, #1
 8005392:	430b      	orrs	r3, r1
 8005394:	d136      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005396:	4b30      	ldr	r3, [pc, #192]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d104      	bne.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80053a8:	f7fd ff82 	bl	80032b0 <HAL_RCC_GetPCLK2Freq>
 80053ac:	6378      	str	r0, [r7, #52]	; 0x34
 80053ae:	f000 bf91 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d104      	bne.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80053b8:	f7fd fe44 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 80053bc:	6378      	str	r0, [r7, #52]	; 0x34
 80053be:	f000 bf89 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80053c2:	4b25      	ldr	r3, [pc, #148]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ce:	d106      	bne.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d103      	bne.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
    {
      frequency = HSI_VALUE;
 80053d6:	4b23      	ldr	r3, [pc, #140]	; (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x564>)
 80053d8:	637b      	str	r3, [r7, #52]	; 0x34
 80053da:	f000 bf7b 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80053de:	4b1e      	ldr	r3, [pc, #120]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80053e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d107      	bne.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d104      	bne.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
    {
      frequency = LSE_VALUE;
 80053f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053f6:	637b      	str	r3, [r7, #52]	; 0x34
 80053f8:	f000 bf6c 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005400:	f000 bf68 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8005404:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005408:	1e91      	subs	r1, r2, #2
 800540a:	430b      	orrs	r3, r1
 800540c:	d13f      	bne.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800540e:	4b12      	ldr	r3, [pc, #72]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005414:	f003 030c 	and.w	r3, r3, #12
 8005418:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	2b00      	cmp	r3, #0
 800541e:	d104      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005420:	f7fd ff32 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8005424:	6378      	str	r0, [r7, #52]	; 0x34
 8005426:	f000 bf55 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	2b04      	cmp	r3, #4
 800542e:	d104      	bne.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005430:	f7fd fe08 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8005434:	6378      	str	r0, [r7, #52]	; 0x34
 8005436:	f000 bf4d 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800543a:	4b07      	ldr	r3, [pc, #28]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005446:	d10f      	bne.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	2b08      	cmp	r3, #8
 800544c:	d10c      	bne.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
    {
      frequency = HSI_VALUE;
 800544e:	4b05      	ldr	r3, [pc, #20]	; (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x564>)
 8005450:	637b      	str	r3, [r7, #52]	; 0x34
 8005452:	f000 bf3f 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 8005456:	bf00      	nop
 8005458:	46020c00 	.word	0x46020c00
 800545c:	02dc6c00 	.word	0x02dc6c00
 8005460:	08007bb4 	.word	0x08007bb4
 8005464:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005468:	4baa      	ldr	r3, [pc, #680]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 800546a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b02      	cmp	r3, #2
 8005474:	d107      	bne.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	2b0c      	cmp	r3, #12
 800547a:	d104      	bne.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
    {
      frequency = LSE_VALUE;
 800547c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005480:	637b      	str	r3, [r7, #52]	; 0x34
 8005482:	f000 bf27 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	637b      	str	r3, [r7, #52]	; 0x34
 800548a:	f000 bf23 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800548e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005492:	1f11      	subs	r1, r2, #4
 8005494:	430b      	orrs	r3, r1
 8005496:	d136      	bne.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005498:	4b9e      	ldr	r3, [pc, #632]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 800549a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800549e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054a2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d104      	bne.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80054aa:	f7fd feed 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 80054ae:	6378      	str	r0, [r7, #52]	; 0x34
 80054b0:	f000 bf10 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b6:	2b10      	cmp	r3, #16
 80054b8:	d104      	bne.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80054ba:	f7fd fdc3 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 80054be:	6378      	str	r0, [r7, #52]	; 0x34
 80054c0:	f000 bf08 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80054c4:	4b93      	ldr	r3, [pc, #588]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d0:	d106      	bne.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	d103      	bne.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
    {
      frequency = HSI_VALUE;
 80054d8:	4b8f      	ldr	r3, [pc, #572]	; (8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
 80054dc:	f000 befa 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80054e0:	4b8c      	ldr	r3, [pc, #560]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80054e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d107      	bne.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	2b30      	cmp	r3, #48	; 0x30
 80054f2:	d104      	bne.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
    {
      frequency = LSE_VALUE;
 80054f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054f8:	637b      	str	r3, [r7, #52]	; 0x34
 80054fa:	f000 beeb 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	637b      	str	r3, [r7, #52]	; 0x34
 8005502:	f000 bee7 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800550a:	f1a2 0108 	sub.w	r1, r2, #8
 800550e:	430b      	orrs	r3, r1
 8005510:	d136      	bne.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005512:	4b80      	ldr	r3, [pc, #512]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005518:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800551c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	2b00      	cmp	r3, #0
 8005522:	d104      	bne.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005524:	f7fd feb0 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8005528:	6378      	str	r0, [r7, #52]	; 0x34
 800552a:	f000 bed3 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	2b40      	cmp	r3, #64	; 0x40
 8005532:	d104      	bne.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005534:	f7fd fd86 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8005538:	6378      	str	r0, [r7, #52]	; 0x34
 800553a:	f000 becb 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800553e:	4b75      	ldr	r3, [pc, #468]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554a:	d106      	bne.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554e:	2b80      	cmp	r3, #128	; 0x80
 8005550:	d103      	bne.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
    {
      frequency = HSI_VALUE;
 8005552:	4b71      	ldr	r3, [pc, #452]	; (8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005554:	637b      	str	r3, [r7, #52]	; 0x34
 8005556:	f000 bebd 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800555a:	4b6e      	ldr	r3, [pc, #440]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 800555c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b02      	cmp	r3, #2
 8005566:	d107      	bne.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
 8005568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556a:	2bc0      	cmp	r3, #192	; 0xc0
 800556c:	d104      	bne.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
    {
      frequency = LSE_VALUE;
 800556e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005572:	637b      	str	r3, [r7, #52]	; 0x34
 8005574:	f000 beae 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	637b      	str	r3, [r7, #52]	; 0x34
 800557c:	f000 beaa 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005584:	f1a2 0110 	sub.w	r1, r2, #16
 8005588:	430b      	orrs	r3, r1
 800558a:	d139      	bne.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800558c:	4b61      	ldr	r3, [pc, #388]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 800558e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005596:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	2b00      	cmp	r3, #0
 800559c:	d104      	bne.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800559e:	f7fd fe73 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 80055a2:	6378      	str	r0, [r7, #52]	; 0x34
 80055a4:	f000 be96 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80055a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ae:	d104      	bne.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80055b0:	f7fd fd48 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 80055b4:	6378      	str	r0, [r7, #52]	; 0x34
 80055b6:	f000 be8d 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80055ba:	4b56      	ldr	r3, [pc, #344]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c6:	d107      	bne.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ce:	d103      	bne.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
    {
      frequency = HSI_VALUE;
 80055d0:	4b51      	ldr	r3, [pc, #324]	; (8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80055d2:	637b      	str	r3, [r7, #52]	; 0x34
 80055d4:	f000 be7e 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80055d8:	4b4e      	ldr	r3, [pc, #312]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80055da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d108      	bne.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ec:	d104      	bne.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
    {
      frequency = LSE_VALUE;
 80055ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f2:	637b      	str	r3, [r7, #52]	; 0x34
 80055f4:	f000 be6e 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	637b      	str	r3, [r7, #52]	; 0x34
 80055fc:	f000 be6a 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8005600:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005604:	f1a2 0120 	sub.w	r1, r2, #32
 8005608:	430b      	orrs	r3, r1
 800560a:	d158      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800560c:	4b41      	ldr	r3, [pc, #260]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 800560e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561a:	2b00      	cmp	r3, #0
 800561c:	d104      	bne.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800561e:	f7fd fe5b 	bl	80032d8 <HAL_RCC_GetPCLK3Freq>
 8005622:	6378      	str	r0, [r7, #52]	; 0x34
 8005624:	f000 be56 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	2b01      	cmp	r3, #1
 800562c:	d104      	bne.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800562e:	f7fd fd09 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8005632:	6378      	str	r0, [r7, #52]	; 0x34
 8005634:	f000 be4e 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005638:	4b36      	ldr	r3, [pc, #216]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005644:	d106      	bne.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	2b02      	cmp	r3, #2
 800564a:	d103      	bne.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      frequency = HSI_VALUE;
 800564c:	4b32      	ldr	r3, [pc, #200]	; (8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800564e:	637b      	str	r3, [r7, #52]	; 0x34
 8005650:	f000 be40 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005654:	4b2f      	ldr	r3, [pc, #188]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b02      	cmp	r3, #2
 8005660:	d107      	bne.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	2b03      	cmp	r3, #3
 8005666:	d104      	bne.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
    {
      frequency = LSE_VALUE;
 8005668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800566c:	637b      	str	r3, [r7, #52]	; 0x34
 800566e:	f000 be31 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005672:	4b28      	ldr	r3, [pc, #160]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b20      	cmp	r3, #32
 800567c:	d11b      	bne.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	2b04      	cmp	r3, #4
 8005682:	d118      	bne.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005684:	4b23      	ldr	r3, [pc, #140]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
 8005690:	4b20      	ldr	r3, [pc, #128]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	0e1b      	lsrs	r3, r3, #24
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	e006      	b.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 800569c:	4b1d      	ldr	r3, [pc, #116]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 800569e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056a2:	041b      	lsls	r3, r3, #16
 80056a4:	0e1b      	lsrs	r3, r3, #24
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	4a1c      	ldr	r2, [pc, #112]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80056ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b0:	637b      	str	r3, [r7, #52]	; 0x34
 80056b2:	f000 be0f 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ba:	f000 be0b 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80056be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056c2:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80056c6:	430b      	orrs	r3, r1
 80056c8:	d173      	bne.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80056ca:	4b12      	ldr	r3, [pc, #72]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80056cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056d0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80056d4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056dc:	d104      	bne.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80056de:	f7fd fcb1 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 80056e2:	6378      	str	r0, [r7, #52]	; 0x34
 80056e4:	f000 bdf6 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ee:	d108      	bne.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056f0:	f107 0318 	add.w	r3, r7, #24
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff f933 	bl	8004960 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	637b      	str	r3, [r7, #52]	; 0x34
 80056fe:	f000 bde9 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10b      	bne.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8005708:	f7fd fda4 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 800570c:	6378      	str	r0, [r7, #52]	; 0x34
 800570e:	f000 bde1 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 8005712:	bf00      	nop
 8005714:	46020c00 	.word	0x46020c00
 8005718:	00f42400 	.word	0x00f42400
 800571c:	08007bb4 	.word	0x08007bb4
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005726:	d122      	bne.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005728:	4baa      	ldr	r3, [pc, #680]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0320 	and.w	r3, r3, #32
 8005730:	2b20      	cmp	r3, #32
 8005732:	d118      	bne.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005734:	4ba7      	ldr	r3, [pc, #668]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d005      	beq.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 8005740:	4ba4      	ldr	r3, [pc, #656]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	0e1b      	lsrs	r3, r3, #24
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	e006      	b.n	800575a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
 800574c:	4ba1      	ldr	r3, [pc, #644]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800574e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005752:	041b      	lsls	r3, r3, #16
 8005754:	0e1b      	lsrs	r3, r3, #24
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	4a9f      	ldr	r2, [pc, #636]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800575c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005760:	637b      	str	r3, [r7, #52]	; 0x34
 8005762:	f000 bdb7 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      else
      {
        frequency = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
 800576a:	f000 bdb3 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800576e:	4b99      	ldr	r3, [pc, #612]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005776:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800577a:	d107      	bne.n	800578c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005782:	d103      	bne.n	800578c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
    {
      frequency = HSE_VALUE;
 8005784:	4b95      	ldr	r3, [pc, #596]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005786:	637b      	str	r3, [r7, #52]	; 0x34
 8005788:	f000 bda4 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800578c:	4b91      	ldr	r3, [pc, #580]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005798:	d107      	bne.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057a0:	d103      	bne.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      frequency = HSI_VALUE;
 80057a2:	4b8e      	ldr	r3, [pc, #568]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80057a4:	637b      	str	r3, [r7, #52]	; 0x34
 80057a6:	f000 bd95 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	637b      	str	r3, [r7, #52]	; 0x34
 80057ae:	f000 bd91 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80057b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057b6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80057ba:	430b      	orrs	r3, r1
 80057bc:	d159      	bne.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80057be:	4b85      	ldr	r3, [pc, #532]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80057c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d84c      	bhi.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80057d0:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
 80057d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d6:	bf00      	nop
 80057d8:	08005811 	.word	0x08005811
 80057dc:	080057ed 	.word	0x080057ed
 80057e0:	080057ff 	.word	0x080057ff
 80057e4:	0800581b 	.word	0x0800581b
 80057e8:	08005825 	.word	0x08005825
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fe ff4d 	bl	8004690 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057fa:	f000 bd6b 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057fe:	f107 030c 	add.w	r3, r7, #12
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff fa14 	bl	8004c30 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800580c:	f000 bd62 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005810:	f7fd fd20 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 8005814:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005816:	f000 bd5d 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800581a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800581e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005820:	f000 bd58 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005824:	4b6b      	ldr	r3, [pc, #428]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b20      	cmp	r3, #32
 800582e:	d118      	bne.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x962>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005830:	4b68      	ldr	r3, [pc, #416]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d005      	beq.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 800583c:	4b65      	ldr	r3, [pc, #404]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	0e1b      	lsrs	r3, r3, #24
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	e006      	b.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
 8005848:	4b62      	ldr	r3, [pc, #392]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800584a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800584e:	041b      	lsls	r3, r3, #16
 8005850:	0e1b      	lsrs	r3, r3, #24
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	4a60      	ldr	r2, [pc, #384]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800585e:	f000 bd39 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005866:	f000 bd35 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default:

        frequency = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800586e:	f000 bd31 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005876:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800587a:	430b      	orrs	r3, r1
 800587c:	d167      	bne.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800587e:	4b55      	ldr	r3, [pc, #340]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005884:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005888:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005890:	d036      	beq.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005898:	d855      	bhi.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058a0:	d029      	beq.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058a8:	d84d      	bhi.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058b0:	d013      	beq.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058b8:	d845      	bhi.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d015      	beq.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x9ec>
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c6:	d13e      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fe fedf 	bl	8004690 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058d6:	f000 bcfd 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058da:	f107 030c 	add.w	r3, r7, #12
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff f9a6 	bl	8004c30 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058e8:	f000 bcf4 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80058ec:	f7fd fcb2 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 80058f0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80058f2:	f000 bcef 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80058f6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80058fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058fc:	f000 bcea 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005900:	4b34      	ldr	r3, [pc, #208]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0320 	and.w	r3, r3, #32
 8005908:	2b20      	cmp	r3, #32
 800590a:	d118      	bne.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800590c:	4b31      	ldr	r3, [pc, #196]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
 8005918:	4b2e      	ldr	r3, [pc, #184]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	0e1b      	lsrs	r3, r3, #24
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	e006      	b.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 8005924:	4b2b      	ldr	r3, [pc, #172]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005926:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800592a:	041b      	lsls	r3, r3, #16
 800592c:	0e1b      	lsrs	r3, r3, #24
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	4a29      	ldr	r2, [pc, #164]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005938:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800593a:	f000 bccb 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005942:	f000 bcc7 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default:

        frequency = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800594a:	f000 bcc3 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800594e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005952:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005956:	430b      	orrs	r3, r1
 8005958:	d153      	bne.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800595a:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800595c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005960:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005964:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	2b00      	cmp	r3, #0
 800596a:	d104      	bne.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800596c:	f7fd fc8c 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8005970:	6378      	str	r0, [r7, #52]	; 0x34
 8005972:	f000 bcaf 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597c:	d104      	bne.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0xa88>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800597e:	f7fd fb61 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8005982:	6378      	str	r0, [r7, #52]	; 0x34
 8005984:	f000 bca6 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005988:	4b12      	ldr	r3, [pc, #72]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005994:	d107      	bne.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800599c:	d103      	bne.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HSI_VALUE;
 800599e:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80059a0:	637b      	str	r3, [r7, #52]	; 0x34
 80059a2:	f000 bc97 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80059a6:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	d123      	bne.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059b8:	d11f      	bne.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80059ba:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00c      	beq.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
 80059c6:	4b03      	ldr	r3, [pc, #12]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	0e1b      	lsrs	r3, r3, #24
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	e00d      	b.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059d2:	bf00      	nop
 80059d4:	46020c00 	.word	0x46020c00
 80059d8:	08007bb4 	.word	0x08007bb4
 80059dc:	00f42400 	.word	0x00f42400
 80059e0:	4b9c      	ldr	r3, [pc, #624]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 80059e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059e6:	041b      	lsls	r3, r3, #16
 80059e8:	0e1b      	lsrs	r3, r3, #24
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	4a9a      	ldr	r2, [pc, #616]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>)
 80059f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f4:	637b      	str	r3, [r7, #52]	; 0x34
 80059f6:	f000 bc6d 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	637b      	str	r3, [r7, #52]	; 0x34
 80059fe:	f000 bc69 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8005a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a06:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	d14c      	bne.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005a0e:	4b91      	ldr	r3, [pc, #580]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a14:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a18:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d104      	bne.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005a20:	f7fd fc32 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8005a24:	6378      	str	r0, [r7, #52]	; 0x34
 8005a26:	f000 bc55 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a30:	d104      	bne.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005a32:	f7fd fb07 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8005a36:	6378      	str	r0, [r7, #52]	; 0x34
 8005a38:	f000 bc4c 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005a3c:	4b85      	ldr	r3, [pc, #532]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a48:	d107      	bne.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a50:	d103      	bne.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
    {
      frequency = HSI_VALUE;
 8005a52:	4b82      	ldr	r3, [pc, #520]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
 8005a56:	f000 bc3d 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8005a5a:	4b7e      	ldr	r3, [pc, #504]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	d11c      	bne.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a6c:	d118      	bne.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a6e:	4b79      	ldr	r3, [pc, #484]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8005a7a:	4b76      	ldr	r3, [pc, #472]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	0e1b      	lsrs	r3, r3, #24
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	e006      	b.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8005a86:	4b73      	ldr	r3, [pc, #460]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005a88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a8c:	041b      	lsls	r3, r3, #16
 8005a8e:	0e1b      	lsrs	r3, r3, #24
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	4a70      	ldr	r2, [pc, #448]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>)
 8005a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a9c:	f000 bc1a 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa4:	f000 bc16 	b.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aac:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005ab0:	430b      	orrs	r3, r1
 8005ab2:	d151      	bne.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005ab4:	4b67      	ldr	r3, [pc, #412]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005ab6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005aba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005abe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ac4:	d024      	beq.n	8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	2bc0      	cmp	r3, #192	; 0xc0
 8005aca:	d842      	bhi.n	8005b52 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	2b80      	cmp	r3, #128	; 0x80
 8005ad0:	d00d      	beq.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	2b80      	cmp	r3, #128	; 0x80
 8005ad6:	d83c      	bhi.n	8005b52 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	2b40      	cmp	r3, #64	; 0x40
 8005ae2:	d011      	beq.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
 8005ae4:	e035      	b.n	8005b52 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005ae6:	f7fd fbf7 	bl	80032d8 <HAL_RCC_GetPCLK3Freq>
 8005aea:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005aec:	e3f2      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005aee:	4b59      	ldr	r3, [pc, #356]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005afa:	d102      	bne.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
        {
          frequency = HSI_VALUE;
 8005afc:	4b57      	ldr	r3, [pc, #348]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005afe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005b00:	e3e8      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b06:	e3e5      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8005b08:	f7fd fa9c 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8005b0c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005b0e:	e3e1      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005b10:	4b50      	ldr	r3, [pc, #320]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d117      	bne.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005b1c:	4b4d      	ldr	r3, [pc, #308]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8005b28:	4b4a      	ldr	r3, [pc, #296]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	0e1b      	lsrs	r3, r3, #24
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	e006      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8005b34:	4b47      	ldr	r3, [pc, #284]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005b36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b3a:	041b      	lsls	r3, r3, #16
 8005b3c:	0e1b      	lsrs	r3, r3, #24
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	4a45      	ldr	r2, [pc, #276]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>)
 8005b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b48:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005b4a:	e3c3      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b50:	e3c0      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      default:
      {
        frequency = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b56:	e3bd      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b5c:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8005b60:	430b      	orrs	r3, r1
 8005b62:	d147      	bne.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005b64:	4b3b      	ldr	r3, [pc, #236]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b6e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d103      	bne.n	8005b7e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005b76:	f7fd fb87 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8005b7a:	6378      	str	r0, [r7, #52]	; 0x34
 8005b7c:	e3aa      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b84:	d103      	bne.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005b86:	f7fd fa5d 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8005b8a:	6378      	str	r0, [r7, #52]	; 0x34
 8005b8c:	e3a2      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005b8e:	4b31      	ldr	r3, [pc, #196]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b9a:	d106      	bne.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba2:	d102      	bne.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
    {
      frequency = HSI_VALUE;
 8005ba4:	4b2d      	ldr	r3, [pc, #180]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba8:	e394      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005baa:	4b2a      	ldr	r3, [pc, #168]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d11b      	bne.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005bbc:	d117      	bne.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005bbe:	4b25      	ldr	r3, [pc, #148]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d005      	beq.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xcd6>
 8005bca:	4b22      	ldr	r3, [pc, #136]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	0e1b      	lsrs	r3, r3, #24
 8005bd0:	f003 030f 	and.w	r3, r3, #15
 8005bd4:	e006      	b.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xce4>
 8005bd6:	4b1f      	ldr	r3, [pc, #124]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005bdc:	041b      	lsls	r3, r3, #16
 8005bde:	0e1b      	lsrs	r3, r3, #24
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	4a1c      	ldr	r2, [pc, #112]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>)
 8005be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bea:	637b      	str	r3, [r7, #52]	; 0x34
 8005bec:	e372      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf2:	e36f      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bf8:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	d16a      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005c00:	4b14      	ldr	r3, [pc, #80]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005c02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d126      	bne.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005c12:	4b10      	ldr	r3, [pc, #64]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	d117      	bne.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0xd4e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c1e:	4b0d      	ldr	r3, [pc, #52]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005c2a:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	0e1b      	lsrs	r3, r3, #24
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	e006      	b.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
 8005c36:	4b07      	ldr	r3, [pc, #28]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005c38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c3c:	041b      	lsls	r3, r3, #16
 8005c3e:	0e1b      	lsrs	r3, r3, #24
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	4a04      	ldr	r2, [pc, #16]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>)
 8005c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4c:	e342      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      else
      {
        frequency = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	637b      	str	r3, [r7, #52]	; 0x34
 8005c52:	e33f      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 8005c54:	46020c00 	.word	0x46020c00
 8005c58:	08007bb4 	.word	0x08007bb4
 8005c5c:	00f42400 	.word	0x00f42400
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005c60:	4b93      	ldr	r3, [pc, #588]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c6e:	d112      	bne.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c76:	d10e      	bne.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c78:	4b8d      	ldr	r3, [pc, #564]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c86:	d102      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
      {
        frequency = LSI_VALUE / 128U;
 8005c88:	23fa      	movs	r3, #250	; 0xfa
 8005c8a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c8c:	e322      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      else
      {
        frequency = LSI_VALUE;
 8005c8e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005c92:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c94:	e31e      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005c96:	4b86      	ldr	r3, [pc, #536]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca2:	d106      	bne.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005caa:	d102      	bne.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8005cac:	4b81      	ldr	r3, [pc, #516]	; (8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xfb4>)
 8005cae:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb0:	e310      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005cb2:	4b7f      	ldr	r3, [pc, #508]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d107      	bne.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xdd0>
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cc6:	d103      	bne.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xdd0>
    {
      frequency = LSE_VALUE;
 8005cc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8005cce:	e301      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd4:	e2fe      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cda:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005cde:	430b      	orrs	r3, r1
 8005ce0:	d164      	bne.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005ce2:	4b73      	ldr	r3, [pc, #460]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005ce4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ce8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d120      	bne.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005cf4:	4b6e      	ldr	r3, [pc, #440]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d117      	bne.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d00:	4b6b      	ldr	r3, [pc, #428]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
 8005d0c:	4b68      	ldr	r3, [pc, #416]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	0e1b      	lsrs	r3, r3, #24
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	e006      	b.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005d18:	4b65      	ldr	r3, [pc, #404]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005d1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d1e:	041b      	lsls	r3, r3, #16
 8005d20:	0e1b      	lsrs	r3, r3, #24
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	4a64      	ldr	r2, [pc, #400]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>)
 8005d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d2e:	e2d1      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      else
      {
        frequency = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34
 8005d34:	e2ce      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005d36:	4b5e      	ldr	r3, [pc, #376]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005d38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d44:	d112      	bne.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xe6c>
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d4c:	d10e      	bne.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xe6c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005d4e:	4b58      	ldr	r3, [pc, #352]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d5c:	d102      	bne.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
      {
        frequency = LSI_VALUE / 128U;
 8005d5e:	23fa      	movs	r3, #250	; 0xfa
 8005d60:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005d62:	e2b7      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      else
      {
        frequency = LSI_VALUE;
 8005d64:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005d68:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005d6a:	e2b3      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005d6c:	4b50      	ldr	r3, [pc, #320]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d78:	d106      	bne.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0xe88>
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d80:	d102      	bne.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0xe88>
    {
      frequency = HSI_VALUE;
 8005d82:	4b4c      	ldr	r3, [pc, #304]	; (8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xfb4>)
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
 8005d86:	e2a5      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005d88:	4b49      	ldr	r3, [pc, #292]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005d8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d107      	bne.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0xea6>
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d9c:	d103      	bne.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0xea6>
    {
      frequency = LSE_VALUE;
 8005d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005da2:	637b      	str	r3, [r7, #52]	; 0x34
 8005da4:	e296      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	637b      	str	r3, [r7, #52]	; 0x34
 8005daa:	e293      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005db0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005db4:	430b      	orrs	r3, r1
 8005db6:	d147      	bne.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005db8:	4b3d      	ldr	r3, [pc, #244]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dbe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005dc2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d103      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005dca:	f7fd fa5d 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8005dce:	6378      	str	r0, [r7, #52]	; 0x34
 8005dd0:	e280      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005dd2:	4b37      	ldr	r3, [pc, #220]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ddc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005de0:	d112      	bne.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005de8:	d10e      	bne.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005dea:	4b31      	ldr	r3, [pc, #196]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005dec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005df8:	d102      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
      {
        frequency = LSI_VALUE / 128U;
 8005dfa:	23fa      	movs	r3, #250	; 0xfa
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005dfe:	e269      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      else
      {
        frequency = LSI_VALUE;
 8005e00:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005e04:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005e06:	e265      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005e08:	4b29      	ldr	r3, [pc, #164]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e14:	d106      	bne.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e1c:	d102      	bne.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
    {
      frequency = HSI_VALUE;
 8005e1e:	4b25      	ldr	r3, [pc, #148]	; (8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xfb4>)
 8005e20:	637b      	str	r3, [r7, #52]	; 0x34
 8005e22:	e257      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005e24:	4b22      	ldr	r3, [pc, #136]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005e26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d107      	bne.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xf42>
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e38:	d103      	bne.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xf42>
    {
      frequency = LSE_VALUE;
 8005e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e40:	e248      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	637b      	str	r3, [r7, #52]	; 0x34
 8005e46:	e245      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e4c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8005e50:	430b      	orrs	r3, r1
 8005e52:	d133      	bne.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfbc>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005e54:	4b16      	ldr	r3, [pc, #88]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e5a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005e5e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005e60:	4b13      	ldr	r3, [pc, #76]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e6c:	d105      	bne.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d102      	bne.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      frequency = HSE_VALUE;
 8005e74:	4b0f      	ldr	r3, [pc, #60]	; (8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xfb4>)
 8005e76:	637b      	str	r3, [r7, #52]	; 0x34
 8005e78:	e22c      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e80:	d107      	bne.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xf92>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe fc02 	bl	8004690 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e90:	e220      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e98:	d107      	bne.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0xfaa>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e9a:	f107 0318 	add.w	r3, r7, #24
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fe fd5e 	bl	8004960 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea8:	e214      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34
 8005eae:	e211      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 8005eb0:	46020c00 	.word	0x46020c00
 8005eb4:	00f42400 	.word	0x00f42400
 8005eb8:	08007bb4 	.word	0x08007bb4
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ec0:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	d156      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1076>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005ec8:	4b98      	ldr	r3, [pc, #608]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ece:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005ed2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eda:	d028      	beq.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ee2:	d845      	bhi.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1070>
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eea:	d013      	beq.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ef2:	d83d      	bhi.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1070>
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d004      	beq.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f00:	d004      	beq.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>
 8005f02:	e035      	b.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1070>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005f04:	f7fd f9d4 	bl	80032b0 <HAL_RCC_GetPCLK2Freq>
 8005f08:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005f0a:	e1e3      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005f0c:	f7fd f89a 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8005f10:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005f12:	e1df      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f14:	4b85      	ldr	r3, [pc, #532]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f20:	d102      	bne.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1028>
        {
          frequency = HSI_VALUE;
 8005f22:	4b83      	ldr	r3, [pc, #524]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8005f24:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f26:	e1d5      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f2c:	e1d2      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005f2e:	4b7f      	ldr	r3, [pc, #508]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	d117      	bne.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x106a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f3a:	4b7c      	ldr	r3, [pc, #496]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1052>
 8005f46:	4b79      	ldr	r3, [pc, #484]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	0e1b      	lsrs	r3, r3, #24
 8005f4c:	f003 030f 	and.w	r3, r3, #15
 8005f50:	e006      	b.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>
 8005f52:	4b76      	ldr	r3, [pc, #472]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005f54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f58:	041b      	lsls	r3, r3, #16
 8005f5a:	0e1b      	lsrs	r3, r3, #24
 8005f5c:	f003 030f 	and.w	r3, r3, #15
 8005f60:	4a74      	ldr	r2, [pc, #464]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8005f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f66:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f68:	e1b4      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f6e:	e1b1      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default:

        frequency = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f74:	e1ae      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005f76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f7a:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8005f7e:	430b      	orrs	r3, r1
 8005f80:	d156      	bne.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x1130>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005f82:	4b6a      	ldr	r3, [pc, #424]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f8c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f94:	d028      	beq.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e8>
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f9c:	d845      	bhi.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x112a>
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fa4:	d013      	beq.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fac:	d83d      	bhi.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x112a>
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d004      	beq.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fba:	d004      	beq.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x10c6>
 8005fbc:	e035      	b.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x112a>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005fbe:	f7fd f963 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8005fc2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005fc4:	e186      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005fc6:	f7fd f83d 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8005fca:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005fcc:	e182      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fce:	4b57      	ldr	r3, [pc, #348]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fda:	d102      	bne.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e2>
        {
          frequency = HSI_VALUE;
 8005fdc:	4b54      	ldr	r3, [pc, #336]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005fe0:	e178      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fe6:	e175      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005fe8:	4b50      	ldr	r3, [pc, #320]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0320 	and.w	r3, r3, #32
 8005ff0:	2b20      	cmp	r3, #32
 8005ff2:	d117      	bne.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ff4:	4b4d      	ldr	r3, [pc, #308]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d005      	beq.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8006000:	4b4a      	ldr	r3, [pc, #296]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	0e1b      	lsrs	r3, r3, #24
 8006006:	f003 030f 	and.w	r3, r3, #15
 800600a:	e006      	b.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800600c:	4b47      	ldr	r3, [pc, #284]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 800600e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006012:	041b      	lsls	r3, r3, #16
 8006014:	0e1b      	lsrs	r3, r3, #24
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	4a46      	ldr	r2, [pc, #280]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 800601c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006020:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006022:	e157      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006028:	e154      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default:

        frequency = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800602e:	e151      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006034:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8006038:	430b      	orrs	r3, r1
 800603a:	d17d      	bne.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800603c:	4b3b      	ldr	r3, [pc, #236]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 800603e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006042:	f003 0318 	and.w	r3, r3, #24
 8006046:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	2b18      	cmp	r3, #24
 800604c:	d86a      	bhi.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800604e:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x1154>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	080060b9 	.word	0x080060b9
 8006058:	08006125 	.word	0x08006125
 800605c:	08006125 	.word	0x08006125
 8006060:	08006125 	.word	0x08006125
 8006064:	08006125 	.word	0x08006125
 8006068:	08006125 	.word	0x08006125
 800606c:	08006125 	.word	0x08006125
 8006070:	08006125 	.word	0x08006125
 8006074:	080060c1 	.word	0x080060c1
 8006078:	08006125 	.word	0x08006125
 800607c:	08006125 	.word	0x08006125
 8006080:	08006125 	.word	0x08006125
 8006084:	08006125 	.word	0x08006125
 8006088:	08006125 	.word	0x08006125
 800608c:	08006125 	.word	0x08006125
 8006090:	08006125 	.word	0x08006125
 8006094:	080060c9 	.word	0x080060c9
 8006098:	08006125 	.word	0x08006125
 800609c:	08006125 	.word	0x08006125
 80060a0:	08006125 	.word	0x08006125
 80060a4:	08006125 	.word	0x08006125
 80060a8:	08006125 	.word	0x08006125
 80060ac:	08006125 	.word	0x08006125
 80060b0:	08006125 	.word	0x08006125
 80060b4:	080060e3 	.word	0x080060e3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80060b8:	f7fd f90e 	bl	80032d8 <HAL_RCC_GetPCLK3Freq>
 80060bc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80060be:	e109      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80060c0:	f7fc ffc0 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 80060c4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80060c6:	e105      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060c8:	4b18      	ldr	r3, [pc, #96]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d4:	d102      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 80060d6:	4b16      	ldr	r3, [pc, #88]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80060d8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80060da:	e0fb      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060e0:	e0f8      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80060e2:	4b12      	ldr	r3, [pc, #72]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d117      	bne.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80060ee:	4b0f      	ldr	r3, [pc, #60]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 80060fa:	4b0c      	ldr	r3, [pc, #48]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	0e1b      	lsrs	r3, r3, #24
 8006100:	f003 030f 	and.w	r3, r3, #15
 8006104:	e006      	b.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 8006106:	4b09      	ldr	r3, [pc, #36]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006108:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800610c:	041b      	lsls	r3, r3, #16
 800610e:	0e1b      	lsrs	r3, r3, #24
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	4a07      	ldr	r2, [pc, #28]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800611a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800611c:	e0da      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006122:	e0d7      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default:

        frequency = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006128:	e0d4      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800612a:	bf00      	nop
 800612c:	46020c00 	.word	0x46020c00
 8006130:	00f42400 	.word	0x00f42400
 8006134:	08007bb4 	.word	0x08007bb4
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800613c:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8006140:	430b      	orrs	r3, r1
 8006142:	d155      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006144:	4b66      	ldr	r3, [pc, #408]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 8006146:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800614a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800614e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006156:	d013      	beq.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8006158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800615e:	d844      	bhi.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006166:	d013      	beq.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800616e:	d83c      	bhi.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	2b00      	cmp	r3, #0
 8006174:	d014      	beq.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800617c:	d014      	beq.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12a8>
 800617e:	e034      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006180:	f107 0318 	add.w	r3, r7, #24
 8006184:	4618      	mov	r0, r3
 8006186:	f7fe fbeb 	bl	8004960 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800618e:	e0a1      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006194:	4618      	mov	r0, r3
 8006196:	f7fe fa7b 	bl	8004690 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800619e:	e099      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80061a0:	f7fc ff50 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 80061a4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80061a6:	e095      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80061a8:	4b4d      	ldr	r3, [pc, #308]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d117      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80061b4:	4b4a      	ldr	r3, [pc, #296]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
 80061c0:	4b47      	ldr	r3, [pc, #284]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	0e1b      	lsrs	r3, r3, #24
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	e006      	b.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 80061cc:	4b44      	ldr	r3, [pc, #272]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 80061ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061d2:	041b      	lsls	r3, r3, #16
 80061d4:	0e1b      	lsrs	r3, r3, #24
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	4a42      	ldr	r2, [pc, #264]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>)
 80061dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061e0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80061e2:	e077      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061e8:	e074      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default:

        frequency = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061ee:	e071      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80061f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061f4:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80061f8:	430b      	orrs	r3, r1
 80061fa:	d131      	bne.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80061fc:	4b38      	ldr	r3, [pc, #224]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 80061fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006206:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006208:	4b35      	ldr	r3, [pc, #212]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 800620a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b02      	cmp	r3, #2
 8006214:	d106      	bne.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x1324>
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	2b00      	cmp	r3, #0
 800621a:	d103      	bne.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x1324>
    {
      frequency = LSE_VALUE;
 800621c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006220:	637b      	str	r3, [r7, #52]	; 0x34
 8006222:	e057      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006224:	4b2e      	ldr	r3, [pc, #184]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 8006226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800622a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800622e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006232:	d112      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x135a>
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800623a:	d10e      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x135a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800623c:	4b28      	ldr	r3, [pc, #160]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 800623e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800624a:	d102      	bne.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x1352>
      {
        frequency = LSI_VALUE / 128U;
 800624c:	23fa      	movs	r3, #250	; 0xfa
 800624e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006250:	e040      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      else
      {
        frequency = LSI_VALUE;
 8006252:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006256:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006258:	e03c      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	637b      	str	r3, [r7, #52]	; 0x34
 800625e:	e039      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8006260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006264:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006268:	430b      	orrs	r3, r1
 800626a:	d131      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800626c:	4b1c      	ldr	r3, [pc, #112]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 800626e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006272:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006276:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006278:	4b19      	ldr	r3, [pc, #100]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006284:	d105      	bne.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x1392>
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	2b00      	cmp	r3, #0
 800628a:	d102      	bne.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x1392>
    {
      frequency = HSI48_VALUE;
 800628c:	4b16      	ldr	r3, [pc, #88]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>)
 800628e:	637b      	str	r3, [r7, #52]	; 0x34
 8006290:	e020      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8006292:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800629a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800629e:	d106      	bne.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x13ae>
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a6:	d102      	bne.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x13ae>
    {
      frequency = HSI48_VALUE >> 1U ;
 80062a8:	4b10      	ldr	r3, [pc, #64]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x13ec>)
 80062aa:	637b      	str	r3, [r7, #52]	; 0x34
 80062ac:	e012      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80062ae:	4b0c      	ldr	r3, [pc, #48]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ba:	d106      	bne.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c2:	d102      	bne.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
    {
      frequency = HSI_VALUE;
 80062c4:	4b0a      	ldr	r3, [pc, #40]	; (80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13f0>)
 80062c6:	637b      	str	r3, [r7, #52]	; 0x34
 80062c8:	e004      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	637b      	str	r3, [r7, #52]	; 0x34
 80062ce:	e001      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80062d0:	2300      	movs	r3, #0
 80062d2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80062d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3738      	adds	r7, #56	; 0x38
 80062da:	46bd      	mov	sp, r7
 80062dc:	bdb0      	pop	{r4, r5, r7, pc}
 80062de:	bf00      	nop
 80062e0:	46020c00 	.word	0x46020c00
 80062e4:	08007bb4 	.word	0x08007bb4
 80062e8:	02dc6c00 	.word	0x02dc6c00
 80062ec:	016e3600 	.word	0x016e3600
 80062f0:	00f42400 	.word	0x00f42400

080062f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;
  assert_param(IS_RCC_PLLSOURCE(pll2->PLL2Source));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d00c      	beq.n	800631e <RCCEx_PLL2_Config+0x2a>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b02      	cmp	r3, #2
 800630a:	d008      	beq.n	800631e <RCCEx_PLL2_Config+0x2a>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b03      	cmp	r3, #3
 8006312:	d004      	beq.n	800631e <RCCEx_PLL2_Config+0x2a>
 8006314:	f241 0156 	movw	r1, #4182	; 0x1056
 8006318:	4869      	ldr	r0, [pc, #420]	; (80064c0 <RCCEx_PLL2_Config+0x1cc>)
 800631a:	f7fa fa2a 	bl	8000772 <assert_failed>
  assert_param(IS_RCC_PLLM_VALUE(pll2->PLL2M));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <RCCEx_PLL2_Config+0x3a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b10      	cmp	r3, #16
 800632c:	d904      	bls.n	8006338 <RCCEx_PLL2_Config+0x44>
 800632e:	f241 0157 	movw	r1, #4183	; 0x1057
 8006332:	4863      	ldr	r0, [pc, #396]	; (80064c0 <RCCEx_PLL2_Config+0x1cc>)
 8006334:	f7fa fa1d 	bl	8000772 <assert_failed>
  assert_param(IS_RCC_PLLN_VALUE(pll2->PLL2N));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	2b03      	cmp	r3, #3
 800633e:	d904      	bls.n	800634a <RCCEx_PLL2_Config+0x56>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006348:	d904      	bls.n	8006354 <RCCEx_PLL2_Config+0x60>
 800634a:	f241 0158 	movw	r1, #4184	; 0x1058
 800634e:	485c      	ldr	r0, [pc, #368]	; (80064c0 <RCCEx_PLL2_Config+0x1cc>)
 8006350:	f7fa fa0f 	bl	8000772 <assert_failed>
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <RCCEx_PLL2_Config+0x70>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	2b80      	cmp	r3, #128	; 0x80
 8006362:	d904      	bls.n	800636e <RCCEx_PLL2_Config+0x7a>
 8006364:	f241 0159 	movw	r1, #4185	; 0x1059
 8006368:	4855      	ldr	r0, [pc, #340]	; (80064c0 <RCCEx_PLL2_Config+0x1cc>)
 800636a:	f7fa fa02 	bl	8000772 <assert_failed>
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <RCCEx_PLL2_Config+0x8a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	2b80      	cmp	r3, #128	; 0x80
 800637c:	d904      	bls.n	8006388 <RCCEx_PLL2_Config+0x94>
 800637e:	f241 015a 	movw	r1, #4186	; 0x105a
 8006382:	484f      	ldr	r0, [pc, #316]	; (80064c0 <RCCEx_PLL2_Config+0x1cc>)
 8006384:	f7fa f9f5 	bl	8000772 <assert_failed>
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <RCCEx_PLL2_Config+0xa4>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	2b80      	cmp	r3, #128	; 0x80
 8006396:	d904      	bls.n	80063a2 <RCCEx_PLL2_Config+0xae>
 8006398:	f241 015b 	movw	r1, #4187	; 0x105b
 800639c:	4848      	ldr	r0, [pc, #288]	; (80064c0 <RCCEx_PLL2_Config+0x1cc>)
 800639e:	f7fa f9e8 	bl	8000772 <assert_failed>

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80063a2:	4b48      	ldr	r3, [pc, #288]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a47      	ldr	r2, [pc, #284]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 80063a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063ac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80063ae:	f7fa fb73 	bl	8000a98 <HAL_GetTick>
 80063b2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063b4:	e008      	b.n	80063c8 <RCCEx_PLL2_Config+0xd4>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80063b6:	f7fa fb6f 	bl	8000a98 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d901      	bls.n	80063c8 <RCCEx_PLL2_Config+0xd4>
    {
      return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e077      	b.n	80064b8 <RCCEx_PLL2_Config+0x1c4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063c8:	4b3e      	ldr	r3, [pc, #248]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1f0      	bne.n	80063b6 <RCCEx_PLL2_Config+0xc2>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80063d4:	4b3b      	ldr	r3, [pc, #236]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063dc:	f023 0303 	bic.w	r3, r3, #3
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6811      	ldr	r1, [r2, #0]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6852      	ldr	r2, [r2, #4]
 80063e8:	3a01      	subs	r2, #1
 80063ea:	0212      	lsls	r2, r2, #8
 80063ec:	430a      	orrs	r2, r1
 80063ee:	4935      	ldr	r1, [pc, #212]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80063f4:	4b33      	ldr	r3, [pc, #204]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 80063f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063f8:	4b33      	ldr	r3, [pc, #204]	; (80064c8 <RCCEx_PLL2_Config+0x1d4>)
 80063fa:	4013      	ands	r3, r2
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6892      	ldr	r2, [r2, #8]
 8006400:	3a01      	subs	r2, #1
 8006402:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	68d2      	ldr	r2, [r2, #12]
 800640a:	3a01      	subs	r2, #1
 800640c:	0252      	lsls	r2, r2, #9
 800640e:	b292      	uxth	r2, r2
 8006410:	4311      	orrs	r1, r2
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6912      	ldr	r2, [r2, #16]
 8006416:	3a01      	subs	r2, #1
 8006418:	0412      	lsls	r2, r2, #16
 800641a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800641e:	4311      	orrs	r1, r2
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6952      	ldr	r2, [r2, #20]
 8006424:	3a01      	subs	r2, #1
 8006426:	0612      	lsls	r2, r2, #24
 8006428:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800642c:	430a      	orrs	r2, r1
 800642e:	4925      	ldr	r1, [pc, #148]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 8006430:	4313      	orrs	r3, r2
 8006432:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006434:	4b23      	ldr	r3, [pc, #140]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	f023 020c 	bic.w	r2, r3, #12
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	4920      	ldr	r1, [pc, #128]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 8006442:	4313      	orrs	r3, r2
 8006444:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006446:	4b1f      	ldr	r3, [pc, #124]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 8006448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	491d      	ldr	r1, [pc, #116]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 8006450:	4313      	orrs	r3, r2
 8006452:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006454:	4b1b      	ldr	r3, [pc, #108]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	4a1a      	ldr	r2, [pc, #104]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 800645a:	f023 0310 	bic.w	r3, r3, #16
 800645e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006460:	4b18      	ldr	r3, [pc, #96]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 8006462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006464:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006468:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	69d2      	ldr	r2, [r2, #28]
 8006470:	00d2      	lsls	r2, r2, #3
 8006472:	4914      	ldr	r1, [pc, #80]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 8006474:	4313      	orrs	r3, r2
 8006476:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006478:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 800647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647c:	4a11      	ldr	r2, [pc, #68]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 800647e:	f043 0310 	orr.w	r3, r3, #16
 8006482:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006484:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a0e      	ldr	r2, [pc, #56]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 800648a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800648e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006490:	f7fa fb02 	bl	8000a98 <HAL_GetTick>
 8006494:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006496:	e008      	b.n	80064aa <RCCEx_PLL2_Config+0x1b6>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006498:	f7fa fafe 	bl	8000a98 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d901      	bls.n	80064aa <RCCEx_PLL2_Config+0x1b6>
    {
      return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e006      	b.n	80064b8 <RCCEx_PLL2_Config+0x1c4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064aa:	4b06      	ldr	r3, [pc, #24]	; (80064c4 <RCCEx_PLL2_Config+0x1d0>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0f0      	beq.n	8006498 <RCCEx_PLL2_Config+0x1a4>
    }
  }
  return HAL_OK;
 80064b6:	2300      	movs	r3, #0

}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	08007ae8 	.word	0x08007ae8
 80064c4:	46020c00 	.word	0x46020c00
 80064c8:	80800000 	.word	0x80800000

080064cc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  assert_param(IS_RCC_PLLSOURCE(pll3->PLL3Source));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d00c      	beq.n	80064f6 <RCCEx_PLL3_Config+0x2a>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d008      	beq.n	80064f6 <RCCEx_PLL3_Config+0x2a>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	d004      	beq.n	80064f6 <RCCEx_PLL3_Config+0x2a>
 80064ec:	f241 019f 	movw	r1, #4255	; 0x109f
 80064f0:	4869      	ldr	r0, [pc, #420]	; (8006698 <RCCEx_PLL3_Config+0x1cc>)
 80064f2:	f7fa f93e 	bl	8000772 <assert_failed>
  assert_param(IS_RCC_PLLM_VALUE(pll3->PLL3M));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <RCCEx_PLL3_Config+0x3a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b10      	cmp	r3, #16
 8006504:	d904      	bls.n	8006510 <RCCEx_PLL3_Config+0x44>
 8006506:	f44f 5185 	mov.w	r1, #4256	; 0x10a0
 800650a:	4863      	ldr	r0, [pc, #396]	; (8006698 <RCCEx_PLL3_Config+0x1cc>)
 800650c:	f7fa f931 	bl	8000772 <assert_failed>
  assert_param(IS_RCC_PLLN_VALUE(pll3->PLL3N));
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	2b03      	cmp	r3, #3
 8006516:	d904      	bls.n	8006522 <RCCEx_PLL3_Config+0x56>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006520:	d904      	bls.n	800652c <RCCEx_PLL3_Config+0x60>
 8006522:	f241 01a1 	movw	r1, #4257	; 0x10a1
 8006526:	485c      	ldr	r0, [pc, #368]	; (8006698 <RCCEx_PLL3_Config+0x1cc>)
 8006528:	f7fa f923 	bl	8000772 <assert_failed>
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <RCCEx_PLL3_Config+0x70>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	2b80      	cmp	r3, #128	; 0x80
 800653a:	d904      	bls.n	8006546 <RCCEx_PLL3_Config+0x7a>
 800653c:	f241 01a2 	movw	r1, #4258	; 0x10a2
 8006540:	4855      	ldr	r0, [pc, #340]	; (8006698 <RCCEx_PLL3_Config+0x1cc>)
 8006542:	f7fa f916 	bl	8000772 <assert_failed>
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <RCCEx_PLL3_Config+0x8a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b80      	cmp	r3, #128	; 0x80
 8006554:	d904      	bls.n	8006560 <RCCEx_PLL3_Config+0x94>
 8006556:	f241 01a3 	movw	r1, #4259	; 0x10a3
 800655a:	484f      	ldr	r0, [pc, #316]	; (8006698 <RCCEx_PLL3_Config+0x1cc>)
 800655c:	f7fa f909 	bl	8000772 <assert_failed>
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <RCCEx_PLL3_Config+0xa4>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	2b80      	cmp	r3, #128	; 0x80
 800656e:	d904      	bls.n	800657a <RCCEx_PLL3_Config+0xae>
 8006570:	f241 01a4 	movw	r1, #4260	; 0x10a4
 8006574:	4848      	ldr	r0, [pc, #288]	; (8006698 <RCCEx_PLL3_Config+0x1cc>)
 8006576:	f7fa f8fc 	bl	8000772 <assert_failed>

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800657a:	4b48      	ldr	r3, [pc, #288]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a47      	ldr	r2, [pc, #284]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 8006580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006584:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006586:	f7fa fa87 	bl	8000a98 <HAL_GetTick>
 800658a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800658c:	e008      	b.n	80065a0 <RCCEx_PLL3_Config+0xd4>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800658e:	f7fa fa83 	bl	8000a98 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d901      	bls.n	80065a0 <RCCEx_PLL3_Config+0xd4>
    {
      return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e077      	b.n	8006690 <RCCEx_PLL3_Config+0x1c4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80065a0:	4b3e      	ldr	r3, [pc, #248]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f0      	bne.n	800658e <RCCEx_PLL3_Config+0xc2>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80065ac:	4b3b      	ldr	r3, [pc, #236]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 80065ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80065b4:	f023 0303 	bic.w	r3, r3, #3
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	6811      	ldr	r1, [r2, #0]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6852      	ldr	r2, [r2, #4]
 80065c0:	3a01      	subs	r2, #1
 80065c2:	0212      	lsls	r2, r2, #8
 80065c4:	430a      	orrs	r2, r1
 80065c6:	4935      	ldr	r1, [pc, #212]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	630b      	str	r3, [r1, #48]	; 0x30
 80065cc:	4b33      	ldr	r3, [pc, #204]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 80065ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065d0:	4b33      	ldr	r3, [pc, #204]	; (80066a0 <RCCEx_PLL3_Config+0x1d4>)
 80065d2:	4013      	ands	r3, r2
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6892      	ldr	r2, [r2, #8]
 80065d8:	3a01      	subs	r2, #1
 80065da:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	68d2      	ldr	r2, [r2, #12]
 80065e2:	3a01      	subs	r2, #1
 80065e4:	0252      	lsls	r2, r2, #9
 80065e6:	b292      	uxth	r2, r2
 80065e8:	4311      	orrs	r1, r2
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6912      	ldr	r2, [r2, #16]
 80065ee:	3a01      	subs	r2, #1
 80065f0:	0412      	lsls	r2, r2, #16
 80065f2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80065f6:	4311      	orrs	r1, r2
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6952      	ldr	r2, [r2, #20]
 80065fc:	3a01      	subs	r2, #1
 80065fe:	0612      	lsls	r2, r2, #24
 8006600:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006604:	430a      	orrs	r2, r1
 8006606:	4925      	ldr	r1, [pc, #148]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 8006608:	4313      	orrs	r3, r2
 800660a:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800660c:	4b23      	ldr	r3, [pc, #140]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	f023 020c 	bic.w	r2, r3, #12
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	4920      	ldr	r1, [pc, #128]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 800661a:	4313      	orrs	r3, r2
 800661c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800661e:	4b1f      	ldr	r3, [pc, #124]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 8006620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	491d      	ldr	r1, [pc, #116]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 8006628:	4313      	orrs	r3, r2
 800662a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800662c:	4b1b      	ldr	r3, [pc, #108]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	4a1a      	ldr	r2, [pc, #104]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 8006632:	f023 0310 	bic.w	r3, r3, #16
 8006636:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006638:	4b18      	ldr	r3, [pc, #96]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 800663a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006640:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	69d2      	ldr	r2, [r2, #28]
 8006648:	00d2      	lsls	r2, r2, #3
 800664a:	4914      	ldr	r1, [pc, #80]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 800664c:	4313      	orrs	r3, r2
 800664e:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006650:	4b12      	ldr	r3, [pc, #72]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 8006652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006654:	4a11      	ldr	r2, [pc, #68]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 8006656:	f043 0310 	orr.w	r3, r3, #16
 800665a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800665c:	4b0f      	ldr	r3, [pc, #60]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a0e      	ldr	r2, [pc, #56]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 8006662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006666:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006668:	f7fa fa16 	bl	8000a98 <HAL_GetTick>
 800666c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800666e:	e008      	b.n	8006682 <RCCEx_PLL3_Config+0x1b6>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006670:	f7fa fa12 	bl	8000a98 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d901      	bls.n	8006682 <RCCEx_PLL3_Config+0x1b6>
    {
      return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e006      	b.n	8006690 <RCCEx_PLL3_Config+0x1c4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006682:	4b06      	ldr	r3, [pc, #24]	; (800669c <RCCEx_PLL3_Config+0x1d0>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0f0      	beq.n	8006670 <RCCEx_PLL3_Config+0x1a4>
    }
  }
  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	08007ae8 	.word	0x08007ae8
 800669c:	46020c00 	.word	0x46020c00
 80066a0:	80800000 	.word	0x80800000

080066a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e0c9      	b.n	800684a <HAL_UART_Init+0x1a6>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d041      	beq.n	8006742 <HAL_UART_Init+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a64      	ldr	r2, [pc, #400]	; (8006854 <HAL_UART_Init+0x1b0>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d07d      	beq.n	80067c4 <HAL_UART_Init+0x120>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a62      	ldr	r2, [pc, #392]	; (8006858 <HAL_UART_Init+0x1b4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d078      	beq.n	80067c4 <HAL_UART_Init+0x120>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a61      	ldr	r2, [pc, #388]	; (800685c <HAL_UART_Init+0x1b8>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d073      	beq.n	80067c4 <HAL_UART_Init+0x120>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a5f      	ldr	r2, [pc, #380]	; (8006860 <HAL_UART_Init+0x1bc>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d06e      	beq.n	80067c4 <HAL_UART_Init+0x120>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a5e      	ldr	r2, [pc, #376]	; (8006864 <HAL_UART_Init+0x1c0>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d069      	beq.n	80067c4 <HAL_UART_Init+0x120>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a5c      	ldr	r2, [pc, #368]	; (8006868 <HAL_UART_Init+0x1c4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d064      	beq.n	80067c4 <HAL_UART_Init+0x120>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a5b      	ldr	r2, [pc, #364]	; (800686c <HAL_UART_Init+0x1c8>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d05f      	beq.n	80067c4 <HAL_UART_Init+0x120>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a59      	ldr	r2, [pc, #356]	; (8006870 <HAL_UART_Init+0x1cc>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d05a      	beq.n	80067c4 <HAL_UART_Init+0x120>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a58      	ldr	r2, [pc, #352]	; (8006874 <HAL_UART_Init+0x1d0>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d055      	beq.n	80067c4 <HAL_UART_Init+0x120>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 8006720:	d050      	beq.n	80067c4 <HAL_UART_Init+0x120>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a54      	ldr	r2, [pc, #336]	; (8006878 <HAL_UART_Init+0x1d4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d04b      	beq.n	80067c4 <HAL_UART_Init+0x120>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a52      	ldr	r2, [pc, #328]	; (800687c <HAL_UART_Init+0x1d8>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d046      	beq.n	80067c4 <HAL_UART_Init+0x120>
 8006736:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800673a:	4851      	ldr	r0, [pc, #324]	; (8006880 <HAL_UART_Init+0x1dc>)
 800673c:	f7fa f819 	bl	8000772 <assert_failed>
 8006740:	e040      	b.n	80067c4 <HAL_UART_Init+0x120>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a43      	ldr	r2, [pc, #268]	; (8006854 <HAL_UART_Init+0x1b0>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d03b      	beq.n	80067c4 <HAL_UART_Init+0x120>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a41      	ldr	r2, [pc, #260]	; (8006858 <HAL_UART_Init+0x1b4>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d036      	beq.n	80067c4 <HAL_UART_Init+0x120>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a40      	ldr	r2, [pc, #256]	; (800685c <HAL_UART_Init+0x1b8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d031      	beq.n	80067c4 <HAL_UART_Init+0x120>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a3e      	ldr	r2, [pc, #248]	; (8006860 <HAL_UART_Init+0x1bc>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d02c      	beq.n	80067c4 <HAL_UART_Init+0x120>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a3d      	ldr	r2, [pc, #244]	; (8006864 <HAL_UART_Init+0x1c0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d027      	beq.n	80067c4 <HAL_UART_Init+0x120>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a3b      	ldr	r2, [pc, #236]	; (8006868 <HAL_UART_Init+0x1c4>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d022      	beq.n	80067c4 <HAL_UART_Init+0x120>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a3a      	ldr	r2, [pc, #232]	; (800686c <HAL_UART_Init+0x1c8>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d01d      	beq.n	80067c4 <HAL_UART_Init+0x120>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a38      	ldr	r2, [pc, #224]	; (8006870 <HAL_UART_Init+0x1cc>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d018      	beq.n	80067c4 <HAL_UART_Init+0x120>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a37      	ldr	r2, [pc, #220]	; (8006874 <HAL_UART_Init+0x1d0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d013      	beq.n	80067c4 <HAL_UART_Init+0x120>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 80067a4:	d00e      	beq.n	80067c4 <HAL_UART_Init+0x120>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a33      	ldr	r2, [pc, #204]	; (8006878 <HAL_UART_Init+0x1d4>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d009      	beq.n	80067c4 <HAL_UART_Init+0x120>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a31      	ldr	r2, [pc, #196]	; (800687c <HAL_UART_Init+0x1d8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d004      	beq.n	80067c4 <HAL_UART_Init+0x120>
 80067ba:	f240 1145 	movw	r1, #325	; 0x145
 80067be:	4830      	ldr	r0, [pc, #192]	; (8006880 <HAL_UART_Init+0x1dc>)
 80067c0:	f7f9 ffd7 	bl	8000772 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d106      	bne.n	80067dc <HAL_UART_Init+0x138>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7f9 fff2 	bl	80007c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2224      	movs	r2, #36	; 0x24
 80067e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0201 	bic.w	r2, r2, #1
 80067f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f8e3 	bl	80069c0 <UART_SetConfig>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d101      	bne.n	8006804 <HAL_UART_Init+0x160>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e022      	b.n	800684a <HAL_UART_Init+0x1a6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <HAL_UART_Init+0x16e>
  {
    UART_AdvFeatureConfig(huart);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fb5b 	bl	8006ec8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006820:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006830:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f042 0201 	orr.w	r2, r2, #1
 8006840:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fcc0 	bl	80071c8 <UART_CheckIdleState>
 8006848:	4603      	mov	r3, r0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	40013800 	.word	0x40013800
 8006858:	50013800 	.word	0x50013800
 800685c:	40004400 	.word	0x40004400
 8006860:	50004400 	.word	0x50004400
 8006864:	40004800 	.word	0x40004800
 8006868:	50004800 	.word	0x50004800
 800686c:	40004c00 	.word	0x40004c00
 8006870:	50004c00 	.word	0x50004c00
 8006874:	40005000 	.word	0x40005000
 8006878:	46002400 	.word	0x46002400
 800687c:	56002400 	.word	0x56002400
 8006880:	08007b24 	.word	0x08007b24

08006884 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08a      	sub	sp, #40	; 0x28
 8006888:	af02      	add	r7, sp, #8
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	603b      	str	r3, [r7, #0]
 8006890:	4613      	mov	r3, r2
 8006892:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689a:	2b20      	cmp	r3, #32
 800689c:	f040 808b 	bne.w	80069b6 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <HAL_UART_Transmit+0x28>
 80068a6:	88fb      	ldrh	r3, [r7, #6]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e083      	b.n	80069b8 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ba:	2b80      	cmp	r3, #128	; 0x80
 80068bc:	d107      	bne.n	80068ce <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068cc:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2221      	movs	r2, #33	; 0x21
 80068da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068de:	f7fa f8db 	bl	8000a98 <HAL_GetTick>
 80068e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	88fa      	ldrh	r2, [r7, #6]
 80068e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	88fa      	ldrh	r2, [r7, #6]
 80068f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068fc:	d108      	bne.n	8006910 <HAL_UART_Transmit+0x8c>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d104      	bne.n	8006910 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8006906:	2300      	movs	r3, #0
 8006908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	e003      	b.n	8006918 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006914:	2300      	movs	r3, #0
 8006916:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006918:	e030      	b.n	800697c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2200      	movs	r2, #0
 8006922:	2180      	movs	r1, #128	; 0x80
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 fcf9 	bl	800731c <UART_WaitOnFlagUntilTimeout>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d005      	beq.n	800693c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e03d      	b.n	80069b8 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10b      	bne.n	800695a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006950:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	3302      	adds	r3, #2
 8006956:	61bb      	str	r3, [r7, #24]
 8006958:	e007      	b.n	800696a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	781a      	ldrb	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	3301      	adds	r3, #1
 8006968:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006982:	b29b      	uxth	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1c8      	bne.n	800691a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2200      	movs	r2, #0
 8006990:	2140      	movs	r1, #64	; 0x40
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 fcc2 	bl	800731c <UART_WaitOnFlagUntilTimeout>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e006      	b.n	80069b8 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	e000      	b.n	80069b8 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80069b6:	2302      	movs	r3, #2
  }
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3720      	adds	r7, #32
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069c4:	b094      	sub	sp, #80	; 0x50
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80069d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	4b2d      	ldr	r3, [pc, #180]	; (8006a8c <UART_SetConfig+0xcc>)
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d904      	bls.n	80069e4 <UART_SetConfig+0x24>
 80069da:	f640 4152 	movw	r1, #3154	; 0xc52
 80069de:	482c      	ldr	r0, [pc, #176]	; (8006a90 <UART_SetConfig+0xd0>)
 80069e0:	f7f9 fec7 	bl	8000772 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80069e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069ec:	d00d      	beq.n	8006a0a <UART_SetConfig+0x4a>
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d009      	beq.n	8006a0a <UART_SetConfig+0x4a>
 80069f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fe:	d004      	beq.n	8006a0a <UART_SetConfig+0x4a>
 8006a00:	f640 4153 	movw	r1, #3155	; 0xc53
 8006a04:	4822      	ldr	r0, [pc, #136]	; (8006a90 <UART_SetConfig+0xd0>)
 8006a06:	f7f9 feb4 	bl	8000772 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	4b21      	ldr	r3, [pc, #132]	; (8006a94 <UART_SetConfig+0xd4>)
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d004      	beq.n	8006a1e <UART_SetConfig+0x5e>
 8006a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	4b1f      	ldr	r3, [pc, #124]	; (8006a98 <UART_SetConfig+0xd8>)
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d10e      	bne.n	8006a3c <UART_SetConfig+0x7c>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8006a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d03a      	beq.n	8006a9c <UART_SetConfig+0xdc>
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a2e:	d035      	beq.n	8006a9c <UART_SetConfig+0xdc>
 8006a30:	f640 4156 	movw	r1, #3158	; 0xc56
 8006a34:	4816      	ldr	r0, [pc, #88]	; (8006a90 <UART_SetConfig+0xd0>)
 8006a36:	f7f9 fe9c 	bl	8000772 <assert_failed>
 8006a3a:	e02f      	b.n	8006a9c <UART_SetConfig+0xdc>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a44:	d012      	beq.n	8006a6c <UART_SetConfig+0xac>
 8006a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00e      	beq.n	8006a6c <UART_SetConfig+0xac>
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a56:	d009      	beq.n	8006a6c <UART_SetConfig+0xac>
 8006a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a60:	d004      	beq.n	8006a6c <UART_SetConfig+0xac>
 8006a62:	f640 415a 	movw	r1, #3162	; 0xc5a
 8006a66:	480a      	ldr	r0, [pc, #40]	; (8006a90 <UART_SetConfig+0xd0>)
 8006a68:	f7f9 fe83 	bl	8000772 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d014      	beq.n	8006a9e <UART_SetConfig+0xde>
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a7c:	d00f      	beq.n	8006a9e <UART_SetConfig+0xde>
 8006a7e:	f640 415b 	movw	r1, #3163	; 0xc5b
 8006a82:	4803      	ldr	r0, [pc, #12]	; (8006a90 <UART_SetConfig+0xd0>)
 8006a84:	f7f9 fe75 	bl	8000772 <assert_failed>
 8006a88:	e009      	b.n	8006a9e <UART_SetConfig+0xde>
 8006a8a:	bf00      	nop
 8006a8c:	01312cff 	.word	0x01312cff
 8006a90:	08007b24 	.word	0x08007b24
 8006a94:	46002400 	.word	0x46002400
 8006a98:	56002400 	.word	0x56002400
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8006a9c:	bf00      	nop
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00e      	beq.n	8006ac4 <UART_SetConfig+0x104>
 8006aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aae:	d009      	beq.n	8006ac4 <UART_SetConfig+0x104>
 8006ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006ab8:	d004      	beq.n	8006ac4 <UART_SetConfig+0x104>
 8006aba:	f640 415e 	movw	r1, #3166	; 0xc5e
 8006abe:	488f      	ldr	r0, [pc, #572]	; (8006cfc <UART_SetConfig+0x33c>)
 8006ac0:	f7f9 fe57 	bl	8000772 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	f023 030c 	bic.w	r3, r3, #12
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d103      	bne.n	8006ad8 <UART_SetConfig+0x118>
 8006ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d104      	bne.n	8006ae2 <UART_SetConfig+0x122>
 8006ad8:	f640 415f 	movw	r1, #3167	; 0xc5f
 8006adc:	4887      	ldr	r0, [pc, #540]	; (8006cfc <UART_SetConfig+0x33c>)
 8006ade:	f7f9 fe48 	bl	8000772 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d013      	beq.n	8006b12 <UART_SetConfig+0x152>
 8006aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006af2:	d00e      	beq.n	8006b12 <UART_SetConfig+0x152>
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006afc:	d009      	beq.n	8006b12 <UART_SetConfig+0x152>
 8006afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b06:	d004      	beq.n	8006b12 <UART_SetConfig+0x152>
 8006b08:	f44f 6146 	mov.w	r1, #3168	; 0xc60
 8006b0c:	487b      	ldr	r0, [pc, #492]	; (8006cfc <UART_SetConfig+0x33c>)
 8006b0e:	f7f9 fe30 	bl	8000772 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d009      	beq.n	8006b2e <UART_SetConfig+0x16e>
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b22:	d004      	beq.n	8006b2e <UART_SetConfig+0x16e>
 8006b24:	f640 4161 	movw	r1, #3169	; 0xc61
 8006b28:	4874      	ldr	r0, [pc, #464]	; (8006cfc <UART_SetConfig+0x33c>)
 8006b2a:	f7f9 fe22 	bl	8000772 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8006b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d030      	beq.n	8006b98 <UART_SetConfig+0x1d8>
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d02c      	beq.n	8006b98 <UART_SetConfig+0x1d8>
 8006b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d028      	beq.n	8006b98 <UART_SetConfig+0x1d8>
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d024      	beq.n	8006b98 <UART_SetConfig+0x1d8>
 8006b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	d020      	beq.n	8006b98 <UART_SetConfig+0x1d8>
 8006b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5a:	2b05      	cmp	r3, #5
 8006b5c:	d01c      	beq.n	8006b98 <UART_SetConfig+0x1d8>
 8006b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b62:	2b06      	cmp	r3, #6
 8006b64:	d018      	beq.n	8006b98 <UART_SetConfig+0x1d8>
 8006b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6a:	2b07      	cmp	r3, #7
 8006b6c:	d014      	beq.n	8006b98 <UART_SetConfig+0x1d8>
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	2b08      	cmp	r3, #8
 8006b74:	d010      	beq.n	8006b98 <UART_SetConfig+0x1d8>
 8006b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	2b09      	cmp	r3, #9
 8006b7c:	d00c      	beq.n	8006b98 <UART_SetConfig+0x1d8>
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	2b0a      	cmp	r3, #10
 8006b84:	d008      	beq.n	8006b98 <UART_SetConfig+0x1d8>
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	2b0b      	cmp	r3, #11
 8006b8c:	d004      	beq.n	8006b98 <UART_SetConfig+0x1d8>
 8006b8e:	f640 4162 	movw	r1, #3170	; 0xc62
 8006b92:	485a      	ldr	r0, [pc, #360]	; (8006cfc <UART_SetConfig+0x33c>)
 8006b94:	f7f9 fded 	bl	8000772 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4952      	ldr	r1, [pc, #328]	; (8006d00 <UART_SetConfig+0x340>)
 8006bb8:	4019      	ands	r1, r3
 8006bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	68d9      	ldr	r1, [r3, #12]
 8006bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	ea40 0301 	orr.w	r3, r0, r1
 8006bda:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	4b47      	ldr	r3, [pc, #284]	; (8006d04 <UART_SetConfig+0x344>)
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d009      	beq.n	8006c00 <UART_SetConfig+0x240>
 8006bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	4b45      	ldr	r3, [pc, #276]	; (8006d08 <UART_SetConfig+0x348>)
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d004      	beq.n	8006c00 <UART_SetConfig+0x240>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	6a1a      	ldr	r2, [r3, #32]
 8006bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8006c0a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c14:	430b      	orrs	r3, r1
 8006c16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1e:	f023 000f 	bic.w	r0, r3, #15
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	ea40 0301 	orr.w	r3, r0, r1
 8006c2e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	4b35      	ldr	r3, [pc, #212]	; (8006d0c <UART_SetConfig+0x34c>)
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d102      	bne.n	8006c40 <UART_SetConfig+0x280>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c3e:	e029      	b.n	8006c94 <UART_SetConfig+0x2d4>
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	4b32      	ldr	r3, [pc, #200]	; (8006d10 <UART_SetConfig+0x350>)
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d102      	bne.n	8006c50 <UART_SetConfig+0x290>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c4e:	e021      	b.n	8006c94 <UART_SetConfig+0x2d4>
 8006c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	4b2f      	ldr	r3, [pc, #188]	; (8006d14 <UART_SetConfig+0x354>)
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d102      	bne.n	8006c60 <UART_SetConfig+0x2a0>
 8006c5a:	2304      	movs	r3, #4
 8006c5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c5e:	e019      	b.n	8006c94 <UART_SetConfig+0x2d4>
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	4b2c      	ldr	r3, [pc, #176]	; (8006d18 <UART_SetConfig+0x358>)
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d102      	bne.n	8006c70 <UART_SetConfig+0x2b0>
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c6e:	e011      	b.n	8006c94 <UART_SetConfig+0x2d4>
 8006c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	4b29      	ldr	r3, [pc, #164]	; (8006d1c <UART_SetConfig+0x35c>)
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d102      	bne.n	8006c80 <UART_SetConfig+0x2c0>
 8006c7a:	2310      	movs	r3, #16
 8006c7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c7e:	e009      	b.n	8006c94 <UART_SetConfig+0x2d4>
 8006c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	4b1f      	ldr	r3, [pc, #124]	; (8006d04 <UART_SetConfig+0x344>)
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d102      	bne.n	8006c90 <UART_SetConfig+0x2d0>
 8006c8a:	2320      	movs	r3, #32
 8006c8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c8e:	e001      	b.n	8006c94 <UART_SetConfig+0x2d4>
 8006c90:	2300      	movs	r3, #0
 8006c92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	4b1a      	ldr	r3, [pc, #104]	; (8006d04 <UART_SetConfig+0x344>)
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d005      	beq.n	8006caa <UART_SetConfig+0x2ea>
 8006c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	4b19      	ldr	r3, [pc, #100]	; (8006d08 <UART_SetConfig+0x348>)
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	f040 8087 	bne.w	8006db8 <UART_SetConfig+0x3f8>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cac:	2200      	movs	r2, #0
 8006cae:	623b      	str	r3, [r7, #32]
 8006cb0:	627a      	str	r2, [r7, #36]	; 0x24
 8006cb2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006cb6:	f7fe f923 	bl	8004f00 <HAL_RCCEx_GetPeriphCLKFreq>
 8006cba:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 80ea 	beq.w	8006e98 <UART_SetConfig+0x4d8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	4a15      	ldr	r2, [pc, #84]	; (8006d20 <UART_SetConfig+0x360>)
 8006cca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cd6:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	4413      	add	r3, r2
 8006ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d305      	bcc.n	8006cf4 <UART_SetConfig+0x334>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d917      	bls.n	8006d24 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006cfa:	e05c      	b.n	8006db6 <UART_SetConfig+0x3f6>
 8006cfc:	08007b24 	.word	0x08007b24
 8006d00:	cfff69f3 	.word	0xcfff69f3
 8006d04:	46002400 	.word	0x46002400
 8006d08:	56002400 	.word	0x56002400
 8006d0c:	40013800 	.word	0x40013800
 8006d10:	40004400 	.word	0x40004400
 8006d14:	40004800 	.word	0x40004800
 8006d18:	40004c00 	.word	0x40004c00
 8006d1c:	40005000 	.word	0x40005000
 8006d20:	08007c74 	.word	0x08007c74
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d26:	2200      	movs	r2, #0
 8006d28:	61bb      	str	r3, [r7, #24]
 8006d2a:	61fa      	str	r2, [r7, #28]
 8006d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	4a64      	ldr	r2, [pc, #400]	; (8006ec4 <UART_SetConfig+0x504>)
 8006d32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	2200      	movs	r2, #0
 8006d3a:	613b      	str	r3, [r7, #16]
 8006d3c:	617a      	str	r2, [r7, #20]
 8006d3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006d42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d46:	f7f9 fa97 	bl	8000278 <__aeabi_uldivmod>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4610      	mov	r0, r2
 8006d50:	4619      	mov	r1, r3
 8006d52:	f04f 0200 	mov.w	r2, #0
 8006d56:	f04f 0300 	mov.w	r3, #0
 8006d5a:	020b      	lsls	r3, r1, #8
 8006d5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d60:	0202      	lsls	r2, r0, #8
 8006d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d64:	6849      	ldr	r1, [r1, #4]
 8006d66:	0849      	lsrs	r1, r1, #1
 8006d68:	2000      	movs	r0, #0
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	4605      	mov	r5, r0
 8006d6e:	eb12 0804 	adds.w	r8, r2, r4
 8006d72:	eb43 0905 	adc.w	r9, r3, r5
 8006d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	60bb      	str	r3, [r7, #8]
 8006d7e:	60fa      	str	r2, [r7, #12]
 8006d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d84:	4640      	mov	r0, r8
 8006d86:	4649      	mov	r1, r9
 8006d88:	f7f9 fa76 	bl	8000278 <__aeabi_uldivmod>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4613      	mov	r3, r2
 8006d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d9a:	d308      	bcc.n	8006dae <UART_SetConfig+0x3ee>
 8006d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006da2:	d204      	bcs.n	8006dae <UART_SetConfig+0x3ee>
        {
          huart->Instance->BRR = usartdiv;
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006daa:	60da      	str	r2, [r3, #12]
 8006dac:	e003      	b.n	8006db6 <UART_SetConfig+0x3f6>
        }
        else
        {
          ret = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8006db4:	e070      	b.n	8006e98 <UART_SetConfig+0x4d8>
 8006db6:	e06f      	b.n	8006e98 <UART_SetConfig+0x4d8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc0:	d13c      	bne.n	8006e3c <UART_SetConfig+0x47c>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	603b      	str	r3, [r7, #0]
 8006dc8:	607a      	str	r2, [r7, #4]
 8006dca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dce:	f7fe f897 	bl	8004f00 <HAL_RCCEx_GetPeriphCLKFreq>
 8006dd2:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d05e      	beq.n	8006e98 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	4a39      	ldr	r2, [pc, #228]	; (8006ec4 <UART_SetConfig+0x504>)
 8006de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006de4:	461a      	mov	r2, r3
 8006de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dec:	005a      	lsls	r2, r3, #1
 8006dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	085b      	lsrs	r3, r3, #1
 8006df4:	441a      	add	r2, r3
 8006df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e02:	2b0f      	cmp	r3, #15
 8006e04:	d916      	bls.n	8006e34 <UART_SetConfig+0x474>
 8006e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e0c:	d212      	bcs.n	8006e34 <UART_SetConfig+0x474>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f023 030f 	bic.w	r3, r3, #15
 8006e16:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1a:	085b      	lsrs	r3, r3, #1
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	f003 0307 	and.w	r3, r3, #7
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006e26:	4313      	orrs	r3, r2
 8006e28:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8006e30:	60da      	str	r2, [r3, #12]
 8006e32:	e031      	b.n	8006e98 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006e3a:	e02d      	b.n	8006e98 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e3e:	2200      	movs	r2, #0
 8006e40:	469a      	mov	sl, r3
 8006e42:	4693      	mov	fp, r2
 8006e44:	4650      	mov	r0, sl
 8006e46:	4659      	mov	r1, fp
 8006e48:	f7fe f85a 	bl	8004f00 <HAL_RCCEx_GetPeriphCLKFreq>
 8006e4c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8006e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d021      	beq.n	8006e98 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	4a1a      	ldr	r2, [pc, #104]	; (8006ec4 <UART_SetConfig+0x504>)
 8006e5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e62:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	085b      	lsrs	r3, r3, #1
 8006e6c:	441a      	add	r2, r3
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7a:	2b0f      	cmp	r3, #15
 8006e7c:	d909      	bls.n	8006e92 <UART_SetConfig+0x4d2>
 8006e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e84:	d205      	bcs.n	8006e92 <UART_SetConfig+0x4d2>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60da      	str	r2, [r3, #12]
 8006e90:	e002      	b.n	8006e98 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	2200      	movs	r2, #0
 8006eac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006eb4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3750      	adds	r7, #80	; 0x50
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ec2:	bf00      	nop
 8006ec4:	08007c74 	.word	0x08007c74

08006ec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed4:	2bff      	cmp	r3, #255	; 0xff
 8006ed6:	d904      	bls.n	8006ee2 <UART_AdvFeatureConfig+0x1a>
 8006ed8:	f640 41e7 	movw	r1, #3303	; 0xce7
 8006edc:	4884      	ldr	r0, [pc, #528]	; (80070f0 <UART_AdvFeatureConfig+0x228>)
 8006ede:	f7f9 fc48 	bl	8000772 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d018      	beq.n	8006f20 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <UART_AdvFeatureConfig+0x42>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006efe:	d004      	beq.n	8006f0a <UART_AdvFeatureConfig+0x42>
 8006f00:	f640 41ec 	movw	r1, #3308	; 0xcec
 8006f04:	487a      	ldr	r0, [pc, #488]	; (80070f0 <UART_AdvFeatureConfig+0x228>)
 8006f06:	f7f9 fc34 	bl	8000772 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d018      	beq.n	8006f5e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d009      	beq.n	8006f48 <UART_AdvFeatureConfig+0x80>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f3c:	d004      	beq.n	8006f48 <UART_AdvFeatureConfig+0x80>
 8006f3e:	f640 41f3 	movw	r1, #3315	; 0xcf3
 8006f42:	486b      	ldr	r0, [pc, #428]	; (80070f0 <UART_AdvFeatureConfig+0x228>)
 8006f44:	f7f9 fc15 	bl	8000772 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f62:	f003 0304 	and.w	r3, r3, #4
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d018      	beq.n	8006f9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d009      	beq.n	8006f86 <UART_AdvFeatureConfig+0xbe>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f7a:	d004      	beq.n	8006f86 <UART_AdvFeatureConfig+0xbe>
 8006f7c:	f640 41fa 	movw	r1, #3322	; 0xcfa
 8006f80:	485b      	ldr	r0, [pc, #364]	; (80070f0 <UART_AdvFeatureConfig+0x228>)
 8006f82:	f7f9 fbf6 	bl	8000772 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa0:	f003 0308 	and.w	r3, r3, #8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d018      	beq.n	8006fda <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d009      	beq.n	8006fc4 <UART_AdvFeatureConfig+0xfc>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb8:	d004      	beq.n	8006fc4 <UART_AdvFeatureConfig+0xfc>
 8006fba:	f640 5101 	movw	r1, #3329	; 0xd01
 8006fbe:	484c      	ldr	r0, [pc, #304]	; (80070f0 <UART_AdvFeatureConfig+0x228>)
 8006fc0:	f7f9 fbd7 	bl	8000772 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	f003 0310 	and.w	r3, r3, #16
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d018      	beq.n	8007018 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d009      	beq.n	8007002 <UART_AdvFeatureConfig+0x13a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff6:	d004      	beq.n	8007002 <UART_AdvFeatureConfig+0x13a>
 8006ff8:	f640 5108 	movw	r1, #3336	; 0xd08
 8006ffc:	483c      	ldr	r0, [pc, #240]	; (80070f0 <UART_AdvFeatureConfig+0x228>)
 8006ffe:	f7f9 fbb8 	bl	8000772 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701c:	f003 0320 	and.w	r3, r3, #32
 8007020:	2b00      	cmp	r3, #0
 8007022:	d018      	beq.n	8007056 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	2b00      	cmp	r3, #0
 800702a:	d009      	beq.n	8007040 <UART_AdvFeatureConfig+0x178>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007034:	d004      	beq.n	8007040 <UART_AdvFeatureConfig+0x178>
 8007036:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 800703a:	482d      	ldr	r0, [pc, #180]	; (80070f0 <UART_AdvFeatureConfig+0x228>)
 800703c:	f7f9 fb99 	bl	8000772 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 808d 	beq.w	800717e <UART_AdvFeatureConfig+0x2b6>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a22      	ldr	r2, [pc, #136]	; (80070f4 <UART_AdvFeatureConfig+0x22c>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d031      	beq.n	80070d2 <UART_AdvFeatureConfig+0x20a>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a21      	ldr	r2, [pc, #132]	; (80070f8 <UART_AdvFeatureConfig+0x230>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d02c      	beq.n	80070d2 <UART_AdvFeatureConfig+0x20a>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a1f      	ldr	r2, [pc, #124]	; (80070fc <UART_AdvFeatureConfig+0x234>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d027      	beq.n	80070d2 <UART_AdvFeatureConfig+0x20a>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a1e      	ldr	r2, [pc, #120]	; (8007100 <UART_AdvFeatureConfig+0x238>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d022      	beq.n	80070d2 <UART_AdvFeatureConfig+0x20a>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a1c      	ldr	r2, [pc, #112]	; (8007104 <UART_AdvFeatureConfig+0x23c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d01d      	beq.n	80070d2 <UART_AdvFeatureConfig+0x20a>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a1b      	ldr	r2, [pc, #108]	; (8007108 <UART_AdvFeatureConfig+0x240>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d018      	beq.n	80070d2 <UART_AdvFeatureConfig+0x20a>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a19      	ldr	r2, [pc, #100]	; (800710c <UART_AdvFeatureConfig+0x244>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d013      	beq.n	80070d2 <UART_AdvFeatureConfig+0x20a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a18      	ldr	r2, [pc, #96]	; (8007110 <UART_AdvFeatureConfig+0x248>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d00e      	beq.n	80070d2 <UART_AdvFeatureConfig+0x20a>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a16      	ldr	r2, [pc, #88]	; (8007114 <UART_AdvFeatureConfig+0x24c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d009      	beq.n	80070d2 <UART_AdvFeatureConfig+0x20a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 80070c6:	d004      	beq.n	80070d2 <UART_AdvFeatureConfig+0x20a>
 80070c8:	f640 5118 	movw	r1, #3352	; 0xd18
 80070cc:	4808      	ldr	r0, [pc, #32]	; (80070f0 <UART_AdvFeatureConfig+0x228>)
 80070ce:	f7f9 fb50 	bl	8000772 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d01e      	beq.n	8007118 <UART_AdvFeatureConfig+0x250>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070e2:	d019      	beq.n	8007118 <UART_AdvFeatureConfig+0x250>
 80070e4:	f640 5119 	movw	r1, #3353	; 0xd19
 80070e8:	4801      	ldr	r0, [pc, #4]	; (80070f0 <UART_AdvFeatureConfig+0x228>)
 80070ea:	f7f9 fb42 	bl	8000772 <assert_failed>
 80070ee:	e013      	b.n	8007118 <UART_AdvFeatureConfig+0x250>
 80070f0:	08007b24 	.word	0x08007b24
 80070f4:	40013800 	.word	0x40013800
 80070f8:	50013800 	.word	0x50013800
 80070fc:	40004400 	.word	0x40004400
 8007100:	50004400 	.word	0x50004400
 8007104:	40004800 	.word	0x40004800
 8007108:	50004800 	.word	0x50004800
 800710c:	40004c00 	.word	0x40004c00
 8007110:	50004c00 	.word	0x50004c00
 8007114:	40005000 	.word	0x40005000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007136:	d122      	bne.n	800717e <UART_AdvFeatureConfig+0x2b6>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800713c:	2b00      	cmp	r3, #0
 800713e:	d013      	beq.n	8007168 <UART_AdvFeatureConfig+0x2a0>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007144:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007148:	d00e      	beq.n	8007168 <UART_AdvFeatureConfig+0x2a0>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800714e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007152:	d009      	beq.n	8007168 <UART_AdvFeatureConfig+0x2a0>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007158:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800715c:	d004      	beq.n	8007168 <UART_AdvFeatureConfig+0x2a0>
 800715e:	f640 511e 	movw	r1, #3358	; 0xd1e
 8007162:	4818      	ldr	r0, [pc, #96]	; (80071c4 <UART_AdvFeatureConfig+0x2fc>)
 8007164:	f7f9 fb05 	bl	8000772 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007186:	2b00      	cmp	r3, #0
 8007188:	d018      	beq.n	80071bc <UART_AdvFeatureConfig+0x2f4>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <UART_AdvFeatureConfig+0x2de>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007196:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800719a:	d004      	beq.n	80071a6 <UART_AdvFeatureConfig+0x2de>
 800719c:	f640 5126 	movw	r1, #3366	; 0xd26
 80071a0:	4808      	ldr	r0, [pc, #32]	; (80071c4 <UART_AdvFeatureConfig+0x2fc>)
 80071a2:	f7f9 fae6 	bl	8000772 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	605a      	str	r2, [r3, #4]
  }
}
 80071bc:	bf00      	nop
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	08007b24 	.word	0x08007b24

080071c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b098      	sub	sp, #96	; 0x60
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071d8:	f7f9 fc5e 	bl	8000a98 <HAL_GetTick>
 80071dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0308 	and.w	r3, r3, #8
 80071e8:	2b08      	cmp	r3, #8
 80071ea:	d12f      	bne.n	800724c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071f4:	2200      	movs	r2, #0
 80071f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f88e 	bl	800731c <UART_WaitOnFlagUntilTimeout>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d022      	beq.n	800724c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720e:	e853 3f00 	ldrex	r3, [r3]
 8007212:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800721a:	653b      	str	r3, [r7, #80]	; 0x50
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	461a      	mov	r2, r3
 8007222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007224:	647b      	str	r3, [r7, #68]	; 0x44
 8007226:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800722a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800722c:	e841 2300 	strex	r3, r2, [r1]
 8007230:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e6      	bne.n	8007206 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2220      	movs	r2, #32
 800723c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e063      	b.n	8007314 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0304 	and.w	r3, r3, #4
 8007256:	2b04      	cmp	r3, #4
 8007258:	d149      	bne.n	80072ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800725a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007262:	2200      	movs	r2, #0
 8007264:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f857 	bl	800731c <UART_WaitOnFlagUntilTimeout>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d03c      	beq.n	80072ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	623b      	str	r3, [r7, #32]
   return(result);
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007288:	64fb      	str	r3, [r7, #76]	; 0x4c
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007292:	633b      	str	r3, [r7, #48]	; 0x30
 8007294:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007296:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1e6      	bne.n	8007274 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3308      	adds	r3, #8
 80072ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f023 0301 	bic.w	r3, r3, #1
 80072bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3308      	adds	r3, #8
 80072c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072c6:	61fa      	str	r2, [r7, #28]
 80072c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	69b9      	ldr	r1, [r7, #24]
 80072cc:	69fa      	ldr	r2, [r7, #28]
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	617b      	str	r3, [r7, #20]
   return(result);
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e5      	bne.n	80072a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2220      	movs	r2, #32
 80072de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e012      	b.n	8007314 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3758      	adds	r7, #88	; 0x58
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	603b      	str	r3, [r7, #0]
 8007328:	4613      	mov	r3, r2
 800732a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800732c:	e049      	b.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007334:	d045      	beq.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007336:	f7f9 fbaf 	bl	8000a98 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	429a      	cmp	r2, r3
 8007344:	d302      	bcc.n	800734c <UART_WaitOnFlagUntilTimeout+0x30>
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e048      	b.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0304 	and.w	r3, r3, #4
 800735a:	2b00      	cmp	r3, #0
 800735c:	d031      	beq.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b08      	cmp	r3, #8
 800736a:	d110      	bne.n	800738e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2208      	movs	r2, #8
 8007372:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 f838 	bl	80073ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2208      	movs	r2, #8
 800737e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e029      	b.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800739c:	d111      	bne.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f81e 	bl	80073ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e00f      	b.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69da      	ldr	r2, [r3, #28]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	4013      	ands	r3, r2
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	bf0c      	ite	eq
 80073d2:	2301      	moveq	r3, #1
 80073d4:	2300      	movne	r3, #0
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	461a      	mov	r2, r3
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d0a6      	beq.n	800732e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b095      	sub	sp, #84	; 0x54
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fa:	e853 3f00 	ldrex	r3, [r3]
 80073fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	461a      	mov	r2, r3
 800740e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007410:	643b      	str	r3, [r7, #64]	; 0x40
 8007412:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007416:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007418:	e841 2300 	strex	r3, r2, [r1]
 800741c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e6      	bne.n	80073f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3308      	adds	r3, #8
 800742a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	61fb      	str	r3, [r7, #28]
   return(result);
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800743a:	f023 0301 	bic.w	r3, r3, #1
 800743e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3308      	adds	r3, #8
 8007446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007448:	62fa      	str	r2, [r7, #44]	; 0x2c
 800744a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800744e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007450:	e841 2300 	strex	r3, r2, [r1]
 8007454:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e3      	bne.n	8007424 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007460:	2b01      	cmp	r3, #1
 8007462:	d118      	bne.n	8007496 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	60bb      	str	r3, [r7, #8]
   return(result);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f023 0310 	bic.w	r3, r3, #16
 8007478:	647b      	str	r3, [r7, #68]	; 0x44
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007482:	61bb      	str	r3, [r7, #24]
 8007484:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	6979      	ldr	r1, [r7, #20]
 8007488:	69ba      	ldr	r2, [r7, #24]
 800748a:	e841 2300 	strex	r3, r2, [r1]
 800748e:	613b      	str	r3, [r7, #16]
   return(result);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1e6      	bne.n	8007464 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2220      	movs	r2, #32
 800749a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80074aa:	bf00      	nop
 80074ac:	3754      	adds	r7, #84	; 0x54
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
	...

080074b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a38      	ldr	r2, [pc, #224]	; (80075a8 <HAL_UARTEx_DisableFifoMode+0xf0>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d03b      	beq.n	8007542 <HAL_UARTEx_DisableFifoMode+0x8a>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a37      	ldr	r2, [pc, #220]	; (80075ac <HAL_UARTEx_DisableFifoMode+0xf4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d036      	beq.n	8007542 <HAL_UARTEx_DisableFifoMode+0x8a>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a35      	ldr	r2, [pc, #212]	; (80075b0 <HAL_UARTEx_DisableFifoMode+0xf8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d031      	beq.n	8007542 <HAL_UARTEx_DisableFifoMode+0x8a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a34      	ldr	r2, [pc, #208]	; (80075b4 <HAL_UARTEx_DisableFifoMode+0xfc>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d02c      	beq.n	8007542 <HAL_UARTEx_DisableFifoMode+0x8a>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a32      	ldr	r2, [pc, #200]	; (80075b8 <HAL_UARTEx_DisableFifoMode+0x100>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d027      	beq.n	8007542 <HAL_UARTEx_DisableFifoMode+0x8a>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a31      	ldr	r2, [pc, #196]	; (80075bc <HAL_UARTEx_DisableFifoMode+0x104>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d022      	beq.n	8007542 <HAL_UARTEx_DisableFifoMode+0x8a>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a2f      	ldr	r2, [pc, #188]	; (80075c0 <HAL_UARTEx_DisableFifoMode+0x108>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d01d      	beq.n	8007542 <HAL_UARTEx_DisableFifoMode+0x8a>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a2e      	ldr	r2, [pc, #184]	; (80075c4 <HAL_UARTEx_DisableFifoMode+0x10c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d018      	beq.n	8007542 <HAL_UARTEx_DisableFifoMode+0x8a>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a2c      	ldr	r2, [pc, #176]	; (80075c8 <HAL_UARTEx_DisableFifoMode+0x110>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d013      	beq.n	8007542 <HAL_UARTEx_DisableFifoMode+0x8a>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 8007522:	d00e      	beq.n	8007542 <HAL_UARTEx_DisableFifoMode+0x8a>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a28      	ldr	r2, [pc, #160]	; (80075cc <HAL_UARTEx_DisableFifoMode+0x114>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d009      	beq.n	8007542 <HAL_UARTEx_DisableFifoMode+0x8a>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a27      	ldr	r2, [pc, #156]	; (80075d0 <HAL_UARTEx_DisableFifoMode+0x118>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d004      	beq.n	8007542 <HAL_UARTEx_DisableFifoMode+0x8a>
 8007538:	f240 211f 	movw	r1, #543	; 0x21f
 800753c:	4825      	ldr	r0, [pc, #148]	; (80075d4 <HAL_UARTEx_DisableFifoMode+0x11c>)
 800753e:	f7f9 f918 	bl	8000772 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007548:	2b01      	cmp	r3, #1
 800754a:	d101      	bne.n	8007550 <HAL_UARTEx_DisableFifoMode+0x98>
 800754c:	2302      	movs	r3, #2
 800754e:	e027      	b.n	80075a0 <HAL_UARTEx_DisableFifoMode+0xe8>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2224      	movs	r2, #36	; 0x24
 800755c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0201 	bic.w	r2, r2, #1
 8007576:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800757e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	40013800 	.word	0x40013800
 80075ac:	50013800 	.word	0x50013800
 80075b0:	40004400 	.word	0x40004400
 80075b4:	50004400 	.word	0x50004400
 80075b8:	40004800 	.word	0x40004800
 80075bc:	50004800 	.word	0x50004800
 80075c0:	40004c00 	.word	0x40004c00
 80075c4:	50004c00 	.word	0x50004c00
 80075c8:	40005000 	.word	0x40005000
 80075cc:	46002400 	.word	0x46002400
 80075d0:	56002400 	.word	0x56002400
 80075d4:	08007b60 	.word	0x08007b60

080075d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a4a      	ldr	r2, [pc, #296]	; (8007710 <HAL_UARTEx_SetTxFifoThreshold+0x138>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d03b      	beq.n	8007664 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a48      	ldr	r2, [pc, #288]	; (8007714 <HAL_UARTEx_SetTxFifoThreshold+0x13c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d036      	beq.n	8007664 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a47      	ldr	r2, [pc, #284]	; (8007718 <HAL_UARTEx_SetTxFifoThreshold+0x140>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d031      	beq.n	8007664 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a45      	ldr	r2, [pc, #276]	; (800771c <HAL_UARTEx_SetTxFifoThreshold+0x144>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d02c      	beq.n	8007664 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a44      	ldr	r2, [pc, #272]	; (8007720 <HAL_UARTEx_SetTxFifoThreshold+0x148>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d027      	beq.n	8007664 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a42      	ldr	r2, [pc, #264]	; (8007724 <HAL_UARTEx_SetTxFifoThreshold+0x14c>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d022      	beq.n	8007664 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a41      	ldr	r2, [pc, #260]	; (8007728 <HAL_UARTEx_SetTxFifoThreshold+0x150>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d01d      	beq.n	8007664 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a3f      	ldr	r2, [pc, #252]	; (800772c <HAL_UARTEx_SetTxFifoThreshold+0x154>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d018      	beq.n	8007664 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a3e      	ldr	r2, [pc, #248]	; (8007730 <HAL_UARTEx_SetTxFifoThreshold+0x158>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d013      	beq.n	8007664 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 8007644:	d00e      	beq.n	8007664 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a3a      	ldr	r2, [pc, #232]	; (8007734 <HAL_UARTEx_SetTxFifoThreshold+0x15c>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d009      	beq.n	8007664 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a38      	ldr	r2, [pc, #224]	; (8007738 <HAL_UARTEx_SetTxFifoThreshold+0x160>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d004      	beq.n	8007664 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800765a:	f240 214d 	movw	r1, #589	; 0x24d
 800765e:	4837      	ldr	r0, [pc, #220]	; (800773c <HAL_UARTEx_SetTxFifoThreshold+0x164>)
 8007660:	f7f9 f887 	bl	8000772 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d018      	beq.n	800769c <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007670:	d014      	beq.n	800769c <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007678:	d010      	beq.n	800769c <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007680:	d00c      	beq.n	800769c <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007688:	d008      	beq.n	800769c <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8007690:	d004      	beq.n	800769c <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 8007692:	f240 214e 	movw	r1, #590	; 0x24e
 8007696:	4829      	ldr	r0, [pc, #164]	; (800773c <HAL_UARTEx_SetTxFifoThreshold+0x164>)
 8007698:	f7f9 f86b 	bl	8000772 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d101      	bne.n	80076aa <HAL_UARTEx_SetTxFifoThreshold+0xd2>
 80076a6:	2302      	movs	r3, #2
 80076a8:	e02d      	b.n	8007706 <HAL_UARTEx_SetTxFifoThreshold+0x12e>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2224      	movs	r2, #36	; 0x24
 80076b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0201 	bic.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f8de 	bl	80078a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2220      	movs	r2, #32
 80076f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	40013800 	.word	0x40013800
 8007714:	50013800 	.word	0x50013800
 8007718:	40004400 	.word	0x40004400
 800771c:	50004400 	.word	0x50004400
 8007720:	40004800 	.word	0x40004800
 8007724:	50004800 	.word	0x50004800
 8007728:	40004c00 	.word	0x40004c00
 800772c:	50004c00 	.word	0x50004c00
 8007730:	40005000 	.word	0x40005000
 8007734:	46002400 	.word	0x46002400
 8007738:	56002400 	.word	0x56002400
 800773c:	08007b60 	.word	0x08007b60

08007740 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a4a      	ldr	r2, [pc, #296]	; (8007878 <HAL_UARTEx_SetRxFifoThreshold+0x138>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d03b      	beq.n	80077cc <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a48      	ldr	r2, [pc, #288]	; (800787c <HAL_UARTEx_SetRxFifoThreshold+0x13c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d036      	beq.n	80077cc <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a47      	ldr	r2, [pc, #284]	; (8007880 <HAL_UARTEx_SetRxFifoThreshold+0x140>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d031      	beq.n	80077cc <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a45      	ldr	r2, [pc, #276]	; (8007884 <HAL_UARTEx_SetRxFifoThreshold+0x144>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d02c      	beq.n	80077cc <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a44      	ldr	r2, [pc, #272]	; (8007888 <HAL_UARTEx_SetRxFifoThreshold+0x148>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d027      	beq.n	80077cc <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a42      	ldr	r2, [pc, #264]	; (800788c <HAL_UARTEx_SetRxFifoThreshold+0x14c>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d022      	beq.n	80077cc <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a41      	ldr	r2, [pc, #260]	; (8007890 <HAL_UARTEx_SetRxFifoThreshold+0x150>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d01d      	beq.n	80077cc <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a3f      	ldr	r2, [pc, #252]	; (8007894 <HAL_UARTEx_SetRxFifoThreshold+0x154>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d018      	beq.n	80077cc <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a3e      	ldr	r2, [pc, #248]	; (8007898 <HAL_UARTEx_SetRxFifoThreshold+0x158>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d013      	beq.n	80077cc <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 80077ac:	d00e      	beq.n	80077cc <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a3a      	ldr	r2, [pc, #232]	; (800789c <HAL_UARTEx_SetRxFifoThreshold+0x15c>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d009      	beq.n	80077cc <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a38      	ldr	r2, [pc, #224]	; (80078a0 <HAL_UARTEx_SetRxFifoThreshold+0x160>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d004      	beq.n	80077cc <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 80077c2:	f240 217e 	movw	r1, #638	; 0x27e
 80077c6:	4837      	ldr	r0, [pc, #220]	; (80078a4 <HAL_UARTEx_SetRxFifoThreshold+0x164>)
 80077c8:	f7f8 ffd3 	bl	8000772 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d018      	beq.n	8007804 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077d8:	d014      	beq.n	8007804 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077e0:	d010      	beq.n	8007804 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80077e8:	d00c      	beq.n	8007804 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077f0:	d008      	beq.n	8007804 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80077f8:	d004      	beq.n	8007804 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 80077fa:	f240 217f 	movw	r1, #639	; 0x27f
 80077fe:	4829      	ldr	r0, [pc, #164]	; (80078a4 <HAL_UARTEx_SetRxFifoThreshold+0x164>)
 8007800:	f7f8 ffb7 	bl	8000772 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800780a:	2b01      	cmp	r3, #1
 800780c:	d101      	bne.n	8007812 <HAL_UARTEx_SetRxFifoThreshold+0xd2>
 800780e:	2302      	movs	r3, #2
 8007810:	e02d      	b.n	800786e <HAL_UARTEx_SetRxFifoThreshold+0x12e>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2224      	movs	r2, #36	; 0x24
 800781e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0201 	bic.w	r2, r2, #1
 8007838:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f82a 	bl	80078a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2220      	movs	r2, #32
 8007860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	40013800 	.word	0x40013800
 800787c:	50013800 	.word	0x50013800
 8007880:	40004400 	.word	0x40004400
 8007884:	50004400 	.word	0x50004400
 8007888:	40004800 	.word	0x40004800
 800788c:	50004800 	.word	0x50004800
 8007890:	40004c00 	.word	0x40004c00
 8007894:	50004c00 	.word	0x50004c00
 8007898:	40005000 	.word	0x40005000
 800789c:	46002400 	.word	0x46002400
 80078a0:	56002400 	.word	0x56002400
 80078a4:	08007b60 	.word	0x08007b60

080078a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d108      	bne.n	80078ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078c8:	e031      	b.n	800792e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078ca:	2308      	movs	r3, #8
 80078cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078ce:	2308      	movs	r3, #8
 80078d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	0e5b      	lsrs	r3, r3, #25
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	0f5b      	lsrs	r3, r3, #29
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	f003 0307 	and.w	r3, r3, #7
 80078f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	7b3a      	ldrb	r2, [r7, #12]
 80078f6:	4911      	ldr	r1, [pc, #68]	; (800793c <UARTEx_SetNbDataToProcess+0x94>)
 80078f8:	5c8a      	ldrb	r2, [r1, r2]
 80078fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078fe:	7b3a      	ldrb	r2, [r7, #12]
 8007900:	490f      	ldr	r1, [pc, #60]	; (8007940 <UARTEx_SetNbDataToProcess+0x98>)
 8007902:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007904:	fb93 f3f2 	sdiv	r3, r3, r2
 8007908:	b29a      	uxth	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007910:	7bfb      	ldrb	r3, [r7, #15]
 8007912:	7b7a      	ldrb	r2, [r7, #13]
 8007914:	4909      	ldr	r1, [pc, #36]	; (800793c <UARTEx_SetNbDataToProcess+0x94>)
 8007916:	5c8a      	ldrb	r2, [r1, r2]
 8007918:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800791c:	7b7a      	ldrb	r2, [r7, #13]
 800791e:	4908      	ldr	r1, [pc, #32]	; (8007940 <UARTEx_SetNbDataToProcess+0x98>)
 8007920:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007922:	fb93 f3f2 	sdiv	r3, r3, r2
 8007926:	b29a      	uxth	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800792e:	bf00      	nop
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	08007c8c 	.word	0x08007c8c
 8007940:	08007c94 	.word	0x08007c94

08007944 <__libc_init_array>:
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	4d0d      	ldr	r5, [pc, #52]	; (800797c <__libc_init_array+0x38>)
 8007948:	2600      	movs	r6, #0
 800794a:	4c0d      	ldr	r4, [pc, #52]	; (8007980 <__libc_init_array+0x3c>)
 800794c:	1b64      	subs	r4, r4, r5
 800794e:	10a4      	asrs	r4, r4, #2
 8007950:	42a6      	cmp	r6, r4
 8007952:	d109      	bne.n	8007968 <__libc_init_array+0x24>
 8007954:	4d0b      	ldr	r5, [pc, #44]	; (8007984 <__libc_init_array+0x40>)
 8007956:	2600      	movs	r6, #0
 8007958:	4c0b      	ldr	r4, [pc, #44]	; (8007988 <__libc_init_array+0x44>)
 800795a:	f000 f81f 	bl	800799c <_init>
 800795e:	1b64      	subs	r4, r4, r5
 8007960:	10a4      	asrs	r4, r4, #2
 8007962:	42a6      	cmp	r6, r4
 8007964:	d105      	bne.n	8007972 <__libc_init_array+0x2e>
 8007966:	bd70      	pop	{r4, r5, r6, pc}
 8007968:	f855 3b04 	ldr.w	r3, [r5], #4
 800796c:	3601      	adds	r6, #1
 800796e:	4798      	blx	r3
 8007970:	e7ee      	b.n	8007950 <__libc_init_array+0xc>
 8007972:	f855 3b04 	ldr.w	r3, [r5], #4
 8007976:	3601      	adds	r6, #1
 8007978:	4798      	blx	r3
 800797a:	e7f2      	b.n	8007962 <__libc_init_array+0x1e>
 800797c:	08007ca4 	.word	0x08007ca4
 8007980:	08007ca4 	.word	0x08007ca4
 8007984:	08007ca4 	.word	0x08007ca4
 8007988:	08007ca8 	.word	0x08007ca8

0800798c <memset>:
 800798c:	4402      	add	r2, r0
 800798e:	4603      	mov	r3, r0
 8007990:	4293      	cmp	r3, r2
 8007992:	d100      	bne.n	8007996 <memset+0xa>
 8007994:	4770      	bx	lr
 8007996:	f803 1b01 	strb.w	r1, [r3], #1
 800799a:	e7f9      	b.n	8007990 <memset+0x4>

0800799c <_init>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	bf00      	nop
 80079a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a2:	bc08      	pop	{r3}
 80079a4:	469e      	mov	lr, r3
 80079a6:	4770      	bx	lr

080079a8 <_fini>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	bf00      	nop
 80079ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ae:	bc08      	pop	{r3}
 80079b0:	469e      	mov	lr, r3
 80079b2:	4770      	bx	lr
