
test_proj_112.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081cc  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08008404  08008404  00018404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080086ec  080086ec  000186ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080086f4  080086f4  000186f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080086f8  080086f8  000186f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  080086fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  2000000c  08008705  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000c0  08008705  000200c0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011005  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000020e0  00000000  00000000  00031044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c78  00000000  00000000  00033128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000bc0  00000000  00000000  00033da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000306d6  00000000  00000000  00034960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011419  00000000  00000000  00065036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001307d5  00000000  00000000  0007644f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001a6c24  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000325c  00000000  00000000  001a6c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	080083ec 	.word	0x080083ec

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	080083ec 	.word	0x080083ec

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002ae:	4604      	mov	r4, r0
 80002b0:	460f      	mov	r7, r1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d148      	bne.n	8000348 <__udivmoddi4+0xa0>
 80002b6:	428a      	cmp	r2, r1
 80002b8:	4694      	mov	ip, r2
 80002ba:	d961      	bls.n	8000380 <__udivmoddi4+0xd8>
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	b143      	cbz	r3, 80002d4 <__udivmoddi4+0x2c>
 80002c2:	f1c3 0120 	rsb	r1, r3, #32
 80002c6:	409f      	lsls	r7, r3
 80002c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002cc:	409c      	lsls	r4, r3
 80002ce:	fa20 f101 	lsr.w	r1, r0, r1
 80002d2:	430f      	orrs	r7, r1
 80002d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d8:	fa1f fe8c 	uxth.w	lr, ip
 80002dc:	0c22      	lsrs	r2, r4, #16
 80002de:	fbb7 f6f1 	udiv	r6, r7, r1
 80002e2:	fb01 7716 	mls	r7, r1, r6, r7
 80002e6:	fb06 f00e 	mul.w	r0, r6, lr
 80002ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ee:	4290      	cmp	r0, r2
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x5c>
 80002f2:	eb1c 0202 	adds.w	r2, ip, r2
 80002f6:	f106 37ff 	add.w	r7, r6, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x5a>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f200 8137 	bhi.w	8000570 <__udivmoddi4+0x2c8>
 8000302:	463e      	mov	r6, r7
 8000304:	1a12      	subs	r2, r2, r0
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb2 f0f1 	udiv	r0, r2, r1
 800030c:	fb01 2210 	mls	r2, r1, r0, r2
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000318:	45a6      	cmp	lr, r4
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x86>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x84>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f200 811c 	bhi.w	8000564 <__udivmoddi4+0x2bc>
 800032c:	4610      	mov	r0, r2
 800032e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000332:	eba4 040e 	sub.w	r4, r4, lr
 8000336:	2600      	movs	r6, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c5 4300 	strd	r4, r3, [r5]
 8000342:	4631      	mov	r1, r6
 8000344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	428b      	cmp	r3, r1
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0xb8>
 800034c:	2d00      	cmp	r5, #0
 800034e:	f000 80fd 	beq.w	800054c <__udivmoddi4+0x2a4>
 8000352:	2600      	movs	r6, #0
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	4630      	mov	r0, r6
 800035a:	4631      	mov	r1, r6
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	fab3 f683 	clz	r6, r3
 8000364:	2e00      	cmp	r6, #0
 8000366:	d14b      	bne.n	8000400 <__udivmoddi4+0x158>
 8000368:	428b      	cmp	r3, r1
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4282      	cmp	r2, r0
 8000370:	f240 80ef 	bls.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4630      	mov	r0, r6
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e3      	beq.n	8000342 <__udivmoddi4+0x9a>
 800037a:	e9c5 4700 	strd	r4, r7, [r5]
 800037e:	e7e0      	b.n	8000342 <__udivmoddi4+0x9a>
 8000380:	b902      	cbnz	r2, 8000384 <__udivmoddi4+0xdc>
 8000382:	deff      	udf	#255	; 0xff
 8000384:	fab2 f382 	clz	r3, r2
 8000388:	2b00      	cmp	r3, #0
 800038a:	f040 809d 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038e:	1a89      	subs	r1, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b297      	uxth	r7, r2
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f2fe 	udiv	r2, r1, lr
 800039e:	fb0e 1112 	mls	r1, lr, r2, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb07 f002 	mul.w	r0, r7, r2
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4288      	cmp	r0, r1
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80cf 	beq.w	800056a <__udivmoddi4+0x2c2>
 80003cc:	4642      	mov	r2, r8
 80003ce:	1a09      	subs	r1, r1, r0
 80003d0:	b2a4      	uxth	r4, r4
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 f707 	mul.w	r7, r0, r7
 80003de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e2:	42a7      	cmp	r7, r4
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x150>
 80003e6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x14e>
 80003f0:	42a7      	cmp	r7, r4
 80003f2:	f200 80b4 	bhi.w	800055e <__udivmoddi4+0x2b6>
 80003f6:	4608      	mov	r0, r1
 80003f8:	1be4      	subs	r4, r4, r7
 80003fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fe:	e79b      	b.n	8000338 <__udivmoddi4+0x90>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa01 f406 	lsl.w	r4, r1, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	40f9      	lsrs	r1, r7
 8000410:	40b2      	lsls	r2, r6
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa20 f307 	lsr.w	r3, r0, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	431c      	orrs	r4, r3
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	0c20      	lsrs	r0, r4, #16
 800042a:	fbb1 f8f9 	udiv	r8, r1, r9
 800042e:	fb09 1118 	mls	r1, r9, r8, r1
 8000432:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000436:	fb08 f00e 	mul.w	r0, r8, lr
 800043a:	4288      	cmp	r0, r1
 800043c:	d90f      	bls.n	800045e <__udivmoddi4+0x1b6>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f108 3aff 	add.w	sl, r8, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	4288      	cmp	r0, r1
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 808d 	beq.w	8000576 <__udivmoddi4+0x2ce>
 800045c:	46d0      	mov	r8, sl
 800045e:	1a09      	subs	r1, r1, r0
 8000460:	b2a4      	uxth	r4, r4
 8000462:	fbb1 f0f9 	udiv	r0, r1, r9
 8000466:	fb09 1110 	mls	r1, r9, r0, r1
 800046a:	fb00 fe0e 	mul.w	lr, r0, lr
 800046e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000472:	458e      	cmp	lr, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1de>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d201      	bcs.n	8000484 <__udivmoddi4+0x1dc>
 8000480:	458e      	cmp	lr, r1
 8000482:	d87f      	bhi.n	8000584 <__udivmoddi4+0x2dc>
 8000484:	4620      	mov	r0, r4
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	fba0 9802 	umull	r9, r8, r0, r2
 8000492:	4541      	cmp	r1, r8
 8000494:	464c      	mov	r4, r9
 8000496:	46c6      	mov	lr, r8
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0x1f8>
 800049a:	d106      	bne.n	80004aa <__udivmoddi4+0x202>
 800049c:	454b      	cmp	r3, r9
 800049e:	d204      	bcs.n	80004aa <__udivmoddi4+0x202>
 80004a0:	3801      	subs	r0, #1
 80004a2:	ebb9 0402 	subs.w	r4, r9, r2
 80004a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	d070      	beq.n	8000590 <__udivmoddi4+0x2e8>
 80004ae:	1b1a      	subs	r2, r3, r4
 80004b0:	eb61 010e 	sbc.w	r1, r1, lr
 80004b4:	fa22 f306 	lsr.w	r3, r2, r6
 80004b8:	fa01 f707 	lsl.w	r7, r1, r7
 80004bc:	40f1      	lsrs	r1, r6
 80004be:	2600      	movs	r6, #0
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0020 	rsb	r0, r3, #32
 80004d0:	fa01 f203 	lsl.w	r2, r1, r3
 80004d4:	fa21 f600 	lsr.w	r6, r1, r0
 80004d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004dc:	fa24 f100 	lsr.w	r1, r4, r0
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	409c      	lsls	r4, r3
 80004e6:	4311      	orrs	r1, r2
 80004e8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004ec:	0c0a      	lsrs	r2, r1, #16
 80004ee:	fb0e 6610 	mls	r6, lr, r0, r6
 80004f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f6:	fb00 f607 	mul.w	r6, r0, r7
 80004fa:	4296      	cmp	r6, r2
 80004fc:	d90e      	bls.n	800051c <__udivmoddi4+0x274>
 80004fe:	eb1c 0202 	adds.w	r2, ip, r2
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	bf2c      	ite	cs
 8000508:	f04f 0901 	movcs.w	r9, #1
 800050c:	f04f 0900 	movcc.w	r9, #0
 8000510:	4296      	cmp	r6, r2
 8000512:	d902      	bls.n	800051a <__udivmoddi4+0x272>
 8000514:	f1b9 0f00 	cmp.w	r9, #0
 8000518:	d031      	beq.n	800057e <__udivmoddi4+0x2d6>
 800051a:	4640      	mov	r0, r8
 800051c:	1b92      	subs	r2, r2, r6
 800051e:	b289      	uxth	r1, r1
 8000520:	fbb2 f6fe 	udiv	r6, r2, lr
 8000524:	fb0e 2216 	mls	r2, lr, r6, r2
 8000528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800052c:	fb06 f207 	mul.w	r2, r6, r7
 8000530:	428a      	cmp	r2, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x29c>
 8000534:	eb1c 0101 	adds.w	r1, ip, r1
 8000538:	f106 38ff 	add.w	r8, r6, #4294967295
 800053c:	d201      	bcs.n	8000542 <__udivmoddi4+0x29a>
 800053e:	428a      	cmp	r2, r1
 8000540:	d823      	bhi.n	800058a <__udivmoddi4+0x2e2>
 8000542:	4646      	mov	r6, r8
 8000544:	1a89      	subs	r1, r1, r2
 8000546:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800054a:	e725      	b.n	8000398 <__udivmoddi4+0xf0>
 800054c:	462e      	mov	r6, r5
 800054e:	4628      	mov	r0, r5
 8000550:	e6f7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000552:	1a84      	subs	r4, r0, r2
 8000554:	eb61 0303 	sbc.w	r3, r1, r3
 8000558:	2001      	movs	r0, #1
 800055a:	461f      	mov	r7, r3
 800055c:	e70b      	b.n	8000376 <__udivmoddi4+0xce>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e749      	b.n	80003f8 <__udivmoddi4+0x150>
 8000564:	4464      	add	r4, ip
 8000566:	3802      	subs	r0, #2
 8000568:	e6e1      	b.n	800032e <__udivmoddi4+0x86>
 800056a:	3a02      	subs	r2, #2
 800056c:	4461      	add	r1, ip
 800056e:	e72e      	b.n	80003ce <__udivmoddi4+0x126>
 8000570:	3e02      	subs	r6, #2
 8000572:	4462      	add	r2, ip
 8000574:	e6c6      	b.n	8000304 <__udivmoddi4+0x5c>
 8000576:	f1a8 0802 	sub.w	r8, r8, #2
 800057a:	4461      	add	r1, ip
 800057c:	e76f      	b.n	800045e <__udivmoddi4+0x1b6>
 800057e:	3802      	subs	r0, #2
 8000580:	4462      	add	r2, ip
 8000582:	e7cb      	b.n	800051c <__udivmoddi4+0x274>
 8000584:	3802      	subs	r0, #2
 8000586:	4461      	add	r1, ip
 8000588:	e77d      	b.n	8000486 <__udivmoddi4+0x1de>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	e7d9      	b.n	8000544 <__udivmoddi4+0x29c>
 8000590:	462e      	mov	r6, r5
 8000592:	e6d6      	b.n	8000342 <__udivmoddi4+0x9a>

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fa78 	bl	8000a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f81a 	bl	80005d8 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005a4:	f000 f861 	bl	800066a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f8cc 	bl	8000744 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005ac:	f000 f86b 	bl	8000686 <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 80005b0:	f000 f87c 	bl	80006ac <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart1, "Hello world", strlen("Hello world"), HAL_MAX_DELAY);
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	220b      	movs	r2, #11
 80005ba:	4904      	ldr	r1, [pc, #16]	; (80005cc <main+0x34>)
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <main+0x38>)
 80005be:	f006 fb55 	bl	8006c6c <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005c2:	2180      	movs	r1, #128	; 0x80
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <main+0x3c>)
 80005c6:	f001 f92b 	bl	8001820 <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit(&huart1, "Hello world", strlen("Hello world"), HAL_MAX_DELAY);
 80005ca:	e7f3      	b.n	80005b4 <main+0x1c>
 80005cc:	08008404 	.word	0x08008404
 80005d0:	20000028 	.word	0x20000028
 80005d4:	42020400 	.word	0x42020400

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b09e      	sub	sp, #120	; 0x78
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0318 	add.w	r3, r7, #24
 80005e2:	2260      	movs	r2, #96	; 0x60
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f007 fef8 	bl	80083dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]
 80005fa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80005fc:	2000      	movs	r0, #0
 80005fe:	f001 f9ad 	bl	800195c <HAL_PWREx_ControlVoltageScaling>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000608:	f000 f908 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800060c:	2310      	movs	r3, #16
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000614:	2310      	movs	r3, #16
 8000616:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800061c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800061e:	2300      	movs	r3, #0
 8000620:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	4618      	mov	r0, r3
 8000628:	f001 faa2 	bl	8001b70 <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000632:	f000 f8f3 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	231f      	movs	r3, #31
 8000638:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064e:	463b      	mov	r3, r7
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 fbaa 	bl	8002dac <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800065e:	f000 f8dd 	bl	800081c <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3778      	adds	r7, #120	; 0x78
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800066e:	f001 fa6f 	bl	8001b50 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000672:	2002      	movs	r0, #2
 8000674:	f001 fa12 	bl	8001a9c <HAL_PWREx_ConfigSupply>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800067e:	f000 f8cd 	bl	800081c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}

08000686 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800068a:	2000      	movs	r0, #0
 800068c:	f001 f92c 	bl	80018e8 <HAL_ICACHE_ConfigAssociativityMode>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000696:	f000 f8c1 	bl	800081c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800069a:	f001 f94f 	bl	800193c <HAL_ICACHE_Enable>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80006a4:	f000 f8ba 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006b2:	4a23      	ldr	r2, [pc, #140]	; (8000740 <MX_USART1_UART_Init+0x94>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f4:	4811      	ldr	r0, [pc, #68]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006f6:	f006 f9c9 	bl	8006a8c <HAL_UART_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000700:	f000 f88c 	bl	800081c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000704:	2100      	movs	r1, #0
 8000706:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_USART1_UART_Init+0x90>)
 8000708:	f007 fc8e 	bl	8008028 <HAL_UARTEx_SetTxFifoThreshold>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000712:	f000 f883 	bl	800081c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000716:	2100      	movs	r1, #0
 8000718:	4808      	ldr	r0, [pc, #32]	; (800073c <MX_USART1_UART_Init+0x90>)
 800071a:	f007 fd39 	bl	8008190 <HAL_UARTEx_SetRxFifoThreshold>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000724:	f000 f87a 	bl	800081c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_USART1_UART_Init+0x90>)
 800072a:	f007 fbed 	bl	8007f08 <HAL_UARTEx_DisableFifoMode>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000734:	f000 f872 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000028 	.word	0x20000028
 8000740:	40013800 	.word	0x40013800

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800075a:	4b2c      	ldr	r3, [pc, #176]	; (800080c <MX_GPIO_Init+0xc8>)
 800075c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000760:	4a2a      	ldr	r2, [pc, #168]	; (800080c <MX_GPIO_Init+0xc8>)
 8000762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000766:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <MX_GPIO_Init+0xc8>)
 800076c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_GPIO_Init+0xc8>)
 800077a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800077e:	4a23      	ldr	r2, [pc, #140]	; (800080c <MX_GPIO_Init+0xc8>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_GPIO_Init+0xc8>)
 800078a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_GPIO_Init+0xc8>)
 8000798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800079c:	4a1b      	ldr	r2, [pc, #108]	; (800080c <MX_GPIO_Init+0xc8>)
 800079e:	f043 0302 	orr.w	r3, r3, #2
 80007a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_GPIO_Init+0xc8>)
 80007a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007ac:	f003 0302 	and.w	r3, r3, #2
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2180      	movs	r1, #128	; 0x80
 80007b8:	4815      	ldr	r0, [pc, #84]	; (8000810 <MX_GPIO_Init+0xcc>)
 80007ba:	f001 f801 	bl	80017c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007be:	2310      	movs	r3, #16
 80007c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_GPIO_Init+0xd0>)
 80007c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4619      	mov	r1, r3
 80007d0:	4811      	ldr	r0, [pc, #68]	; (8000818 <MX_GPIO_Init+0xd4>)
 80007d2:	f000 fbc5 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4619      	mov	r1, r3
 80007ec:	4808      	ldr	r0, [pc, #32]	; (8000810 <MX_GPIO_Init+0xcc>)
 80007ee:	f000 fbb7 	bl	8000f60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	200f      	movs	r0, #15
 80007f8:	f000 fabe 	bl	8000d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007fc:	200f      	movs	r0, #15
 80007fe:	f000 fae5 	bl	8000dcc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000802:	bf00      	nop
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	46020c00 	.word	0x46020c00
 8000810:	42020400 	.word	0x42020400
 8000814:	10110000 	.word	0x10110000
 8000818:	42021800 	.word	0x42021800

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>

08000826 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <HAL_MspInit+0x34>)
 8000844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000848:	4a09      	ldr	r2, [pc, #36]	; (8000870 <HAL_MspInit+0x34>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <HAL_MspInit+0x34>)
 8000854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000860:	2004      	movs	r0, #4
 8000862:	f000 fa69 	bl	8000d38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	46020c00 	.word	0x46020c00

08000874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b0bc      	sub	sp, #240	; 0xf0
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	22c8      	movs	r2, #200	; 0xc8
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f007 fda1 	bl	80083dc <memset>
  if(huart->Instance==USART1)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a2a      	ldr	r2, [pc, #168]	; (8000948 <HAL_UART_MspInit+0xd4>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d14d      	bne.n	8000940 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008a4:	f04f 0201 	mov.w	r2, #1
 80008a8:	f04f 0300 	mov.w	r3, #0
 80008ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008b0:	2300      	movs	r3, #0
 80008b2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 ff9b 	bl	80037f4 <HAL_RCCEx_PeriphCLKConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80008c4:	f7ff ffaa 	bl	800081c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <HAL_UART_MspInit+0xd8>)
 80008ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80008ce:	4a1f      	ldr	r2, [pc, #124]	; (800094c <HAL_UART_MspInit+0xd8>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80008d8:	4b1c      	ldr	r3, [pc, #112]	; (800094c <HAL_UART_MspInit+0xd8>)
 80008da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80008de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <HAL_UART_MspInit+0xd8>)
 80008e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008ec:	4a17      	ldr	r2, [pc, #92]	; (800094c <HAL_UART_MspInit+0xd8>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_UART_MspInit+0xd8>)
 80008f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000904:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000908:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800091e:	2307      	movs	r3, #7
 8000920:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000928:	4619      	mov	r1, r3
 800092a:	4809      	ldr	r0, [pc, #36]	; (8000950 <HAL_UART_MspInit+0xdc>)
 800092c:	f000 fb18 	bl	8000f60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	203d      	movs	r0, #61	; 0x3d
 8000936:	f000 fa1f 	bl	8000d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800093a:	203d      	movs	r0, #61	; 0x3d
 800093c:	f000 fa46 	bl	8000dcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000940:	bf00      	nop
 8000942:	37f0      	adds	r7, #240	; 0xf0
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40013800 	.word	0x40013800
 800094c:	46020c00 	.word	0x46020c00
 8000950:	42020000 	.word	0x42020000

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 f8da 	bl	8000b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80009ac:	2010      	movs	r0, #16
 80009ae:	f000 ff5f 	bl	8001870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <USART1_IRQHandler+0x10>)
 80009be:	f006 f9f3 	bl	8006da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000028 	.word	0x20000028

080009cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <SystemInit+0x68>)
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <SystemInit+0x68>)
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <SystemInit+0x6c>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <SystemInit+0x6c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <SystemInit+0x6c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <SystemInit+0x6c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <SystemInit+0x6c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <SystemInit+0x6c>)
 80009fe:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a02:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a06:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <SystemInit+0x6c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <SystemInit+0x6c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <SystemInit+0x6c>)
 8000a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <SystemInit+0x6c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <SystemInit+0x68>)
 8000a22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a26:	609a      	str	r2, [r3, #8]
  #endif
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00
 8000a38:	46020c00 	.word	0x46020c00

08000a3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a40:	f7ff ffc4 	bl	80009cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a44:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a46:	e003      	b.n	8000a50 <LoopCopyDataInit>

08000a48 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a4a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a4c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a4e:	3104      	adds	r1, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a50:	480a      	ldr	r0, [pc, #40]	; (8000a7c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a54:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a56:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a58:	d3f6      	bcc.n	8000a48 <CopyDataInit>
	ldr	r2, =_sbss
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a5c:	e002      	b.n	8000a64 <LoopFillZerobss>

08000a5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a5e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a60:	f842 3b04 	str.w	r3, [r2], #4

08000a64 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <LoopForever+0x16>)
	cmp	r2, r3
 8000a66:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a68:	d3f9      	bcc.n	8000a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f007 fc93 	bl	8008394 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a6e:	f7ff fd93 	bl	8000598 <main>

08000a72 <LoopForever>:

LoopForever:
    b LoopForever
 8000a72:	e7fe      	b.n	8000a72 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000a74:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000a78:	080086fc 	.word	0x080086fc
	ldr	r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a80:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000a84:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a88:	200000c0 	.word	0x200000c0

08000a8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC1_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_Init+0x4c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a10      	ldr	r2, [pc, #64]	; (8000adc <HAL_Init+0x4c>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f949 	bl	8000d38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000aa6:	f002 fcc1 	bl	800342c <HAL_RCC_GetSysClockFreq>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HAL_Init+0x50>)
 8000aae:	6a1b      	ldr	r3, [r3, #32]
 8000ab0:	f003 030f 	and.w	r3, r3, #15
 8000ab4:	490b      	ldr	r1, [pc, #44]	; (8000ae4 <HAL_Init+0x54>)
 8000ab6:	5ccb      	ldrb	r3, [r1, r3]
 8000ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8000abc:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_Init+0x58>)
 8000abe:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f000 f813 	bl	8000aec <HAL_InitTick>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	e002      	b.n	8000ad6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff feb4 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40022000 	.word	0x40022000
 8000ae0:	46020c00 	.word	0x46020c00
 8000ae4:	080085ec 	.word	0x080085ec
 8000ae8:	20000000 	.word	0x20000000

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_InitTick+0x60>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d101      	bne.n	8000b00 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	e021      	b.n	8000b44 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_InitTick+0x64>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_InitTick+0x60>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f970 	bl	8000dfc <HAL_SYSTICK_Config>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00e      	b.n	8000b44 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b0f      	cmp	r3, #15
 8000b2a:	d80a      	bhi.n	8000b42 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f000 f920 	bl	8000d78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b38:	4a06      	ldr	r2, [pc, #24]	; (8000b54 <HAL_InitTick+0x68>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e000      	b.n	8000b44 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000004 	.word	0x20000004

08000b58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x20>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x24>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_IncTick+0x24>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	200000bc 	.word	0x200000bc

08000b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <HAL_GetTick+0x14>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	200000bc 	.word	0x200000bc

08000b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	60d3      	str	r3, [r2, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	f003 0307 	and.w	r3, r3, #7
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	db0b      	blt.n	8000c26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	f003 021f 	and.w	r2, r3, #31
 8000c14:	4907      	ldr	r1, [pc, #28]	; (8000c34 <__NVIC_EnableIRQ+0x38>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	095b      	lsrs	r3, r3, #5
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e100 	.word	0xe000e100

08000c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db0a      	blt.n	8000c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	490c      	ldr	r1, [pc, #48]	; (8000c84 <__NVIC_SetPriority+0x4c>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	0112      	lsls	r2, r2, #4
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c60:	e00a      	b.n	8000c78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4908      	ldr	r1, [pc, #32]	; (8000c88 <__NVIC_SetPriority+0x50>)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	3b04      	subs	r3, #4
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	440b      	add	r3, r1
 8000c76:	761a      	strb	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	; 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f1c3 0307 	rsb	r3, r3, #7
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	bf28      	it	cs
 8000caa:	2304      	movcs	r3, #4
 8000cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d902      	bls.n	8000cbc <NVIC_EncodePriority+0x30>
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3b03      	subs	r3, #3
 8000cba:	e000      	b.n	8000cbe <NVIC_EncodePriority+0x32>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	401a      	ands	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	43d9      	mvns	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	4313      	orrs	r3, r2
         );
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3724      	adds	r7, #36	; 0x24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d04:	d301      	bcc.n	8000d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00f      	b.n	8000d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <SysTick_Config+0x40>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d12:	210f      	movs	r1, #15
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f7ff ff8e 	bl	8000c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <SysTick_Config+0x40>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <SysTick_Config+0x40>)
 8000d24:	2207      	movs	r2, #7
 8000d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	e000e010 	.word	0xe000e010

08000d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b07      	cmp	r3, #7
 8000d44:	d00f      	beq.n	8000d66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b06      	cmp	r3, #6
 8000d4a:	d00c      	beq.n	8000d66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d009      	beq.n	8000d66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d006      	beq.n	8000d66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d003      	beq.n	8000d66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d5e:	21bc      	movs	r1, #188	; 0xbc
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000d62:	f7ff fd60 	bl	8000826 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ff16 	bl	8000b98 <__NVIC_SetPriorityGrouping>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	08008410 	.word	0x08008410

08000d78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d903      	bls.n	8000d94 <HAL_NVIC_SetPriority+0x1c>
 8000d8c:	21d5      	movs	r1, #213	; 0xd5
 8000d8e:	480e      	ldr	r0, [pc, #56]	; (8000dc8 <HAL_NVIC_SetPriority+0x50>)
 8000d90:	f7ff fd49 	bl	8000826 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	2b0f      	cmp	r3, #15
 8000d98:	d903      	bls.n	8000da2 <HAL_NVIC_SetPriority+0x2a>
 8000d9a:	21d6      	movs	r1, #214	; 0xd6
 8000d9c:	480a      	ldr	r0, [pc, #40]	; (8000dc8 <HAL_NVIC_SetPriority+0x50>)
 8000d9e:	f7ff fd42 	bl	8000826 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000da2:	f7ff ff1d 	bl	8000be0 <__NVIC_GetPriorityGrouping>
 8000da6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	6978      	ldr	r0, [r7, #20]
 8000dae:	f7ff ff6d 	bl	8000c8c <NVIC_EncodePriority>
 8000db2:	4602      	mov	r2, r0
 8000db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff3c 	bl	8000c38 <__NVIC_SetPriority>
}
 8000dc0:	bf00      	nop
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	08008410 	.word	0x08008410

08000dcc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	da03      	bge.n	8000de6 <HAL_NVIC_EnableIRQ+0x1a>
 8000dde:	21ea      	movs	r1, #234	; 0xea
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <HAL_NVIC_EnableIRQ+0x2c>)
 8000de2:	f7ff fd20 	bl	8000826 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff06 	bl	8000bfc <__NVIC_EnableIRQ>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	08008410 	.word	0x08008410

08000dfc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff75 	bl	8000cf4 <SysTick_Config>
 8000e0a:	4603      	mov	r3, r0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8000e1c:	f7ff feb0 	bl	8000b80 <HAL_GetTick>
 8000e20:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d101      	bne.n	8000e2c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e06b      	b.n	8000f04 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d008      	beq.n	8000e4a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e05c      	b.n	8000f04 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	695a      	ldr	r2, [r3, #20]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f042 0204 	orr.w	r2, r2, #4
 8000e58:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2205      	movs	r2, #5
 8000e5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8000e62:	e020      	b.n	8000ea6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8000e64:	f7ff fe8c 	bl	8000b80 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b05      	cmp	r3, #5
 8000e70:	d919      	bls.n	8000ea6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	f043 0210 	orr.w	r2, r3, #16
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2203      	movs	r2, #3
 8000e82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e96:	2201      	movs	r2, #1
 8000e98:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e02e      	b.n	8000f04 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0d7      	beq.n	8000e64 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	695a      	ldr	r2, [r3, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 0202 	orr.w	r2, r2, #2
 8000ec2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8000ed4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d007      	beq.n	8000efa <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eee:	2201      	movs	r2, #1
 8000ef0:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e019      	b.n	8000f52 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d004      	beq.n	8000f34 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2220      	movs	r2, #32
 8000f2e:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e00e      	b.n	8000f52 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2204      	movs	r2, #4
 8000f38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	6812      	ldr	r2, [r2, #0]
 8000f46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_TypeDef  *p_gpio;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a87      	ldr	r2, [pc, #540]	; (8001190 <HAL_GPIO_Init+0x230>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d04f      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a86      	ldr	r2, [pc, #536]	; (8001194 <HAL_GPIO_Init+0x234>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d04b      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a85      	ldr	r2, [pc, #532]	; (8001198 <HAL_GPIO_Init+0x238>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d047      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a84      	ldr	r2, [pc, #528]	; (800119c <HAL_GPIO_Init+0x23c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d043      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a83      	ldr	r2, [pc, #524]	; (80011a0 <HAL_GPIO_Init+0x240>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d03f      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a82      	ldr	r2, [pc, #520]	; (80011a4 <HAL_GPIO_Init+0x244>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d03b      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a81      	ldr	r2, [pc, #516]	; (80011a8 <HAL_GPIO_Init+0x248>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d037      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a80      	ldr	r2, [pc, #512]	; (80011ac <HAL_GPIO_Init+0x24c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d033      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a7f      	ldr	r2, [pc, #508]	; (80011b0 <HAL_GPIO_Init+0x250>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d02f      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a7e      	ldr	r2, [pc, #504]	; (80011b4 <HAL_GPIO_Init+0x254>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d02b      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a7d      	ldr	r2, [pc, #500]	; (80011b8 <HAL_GPIO_Init+0x258>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d027      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a7c      	ldr	r2, [pc, #496]	; (80011bc <HAL_GPIO_Init+0x25c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d023      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a7b      	ldr	r2, [pc, #492]	; (80011c0 <HAL_GPIO_Init+0x260>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d01f      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a7a      	ldr	r2, [pc, #488]	; (80011c4 <HAL_GPIO_Init+0x264>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d01b      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a79      	ldr	r2, [pc, #484]	; (80011c8 <HAL_GPIO_Init+0x268>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d017      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a78      	ldr	r2, [pc, #480]	; (80011cc <HAL_GPIO_Init+0x26c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d013      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a77      	ldr	r2, [pc, #476]	; (80011d0 <HAL_GPIO_Init+0x270>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d00f      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a76      	ldr	r2, [pc, #472]	; (80011d4 <HAL_GPIO_Init+0x274>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d00b      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a75      	ldr	r2, [pc, #468]	; (80011d8 <HAL_GPIO_Init+0x278>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d007      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a74      	ldr	r2, [pc, #464]	; (80011dc <HAL_GPIO_Init+0x27c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0xb6>
 800100e:	21d1      	movs	r1, #209	; 0xd1
 8001010:	4873      	ldr	r0, [pc, #460]	; (80011e0 <HAL_GPIO_Init+0x280>)
 8001012:	f7ff fc08 	bl	8000826 <assert_failed>
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d005      	beq.n	800102c <HAL_GPIO_Init+0xcc>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	0c1b      	lsrs	r3, r3, #16
 8001026:	041b      	lsls	r3, r3, #16
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0xd4>
 800102c:	21d2      	movs	r1, #210	; 0xd2
 800102e:	486c      	ldr	r0, [pc, #432]	; (80011e0 <HAL_GPIO_Init+0x280>)
 8001030:	f7ff fbf9 	bl	8000826 <assert_failed>
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d035      	beq.n	80010a8 <HAL_GPIO_Init+0x148>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d031      	beq.n	80010a8 <HAL_GPIO_Init+0x148>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b11      	cmp	r3, #17
 800104a:	d02d      	beq.n	80010a8 <HAL_GPIO_Init+0x148>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d029      	beq.n	80010a8 <HAL_GPIO_Init+0x148>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b12      	cmp	r3, #18
 800105a:	d025      	beq.n	80010a8 <HAL_GPIO_Init+0x148>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	4a60      	ldr	r2, [pc, #384]	; (80011e4 <HAL_GPIO_Init+0x284>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d020      	beq.n	80010a8 <HAL_GPIO_Init+0x148>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4a5f      	ldr	r2, [pc, #380]	; (80011e8 <HAL_GPIO_Init+0x288>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d01b      	beq.n	80010a8 <HAL_GPIO_Init+0x148>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	4a5d      	ldr	r2, [pc, #372]	; (80011ec <HAL_GPIO_Init+0x28c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d016      	beq.n	80010a8 <HAL_GPIO_Init+0x148>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4a5c      	ldr	r2, [pc, #368]	; (80011f0 <HAL_GPIO_Init+0x290>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d011      	beq.n	80010a8 <HAL_GPIO_Init+0x148>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	4a5a      	ldr	r2, [pc, #360]	; (80011f4 <HAL_GPIO_Init+0x294>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00c      	beq.n	80010a8 <HAL_GPIO_Init+0x148>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	4a59      	ldr	r2, [pc, #356]	; (80011f8 <HAL_GPIO_Init+0x298>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d007      	beq.n	80010a8 <HAL_GPIO_Init+0x148>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x148>
 80010a0:	21d3      	movs	r1, #211	; 0xd3
 80010a2:	484f      	ldr	r0, [pc, #316]	; (80011e0 <HAL_GPIO_Init+0x280>)
 80010a4:	f7ff fbbf 	bl	8000826 <assert_failed>

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80010ac:	e379      	b.n	80017a2 <HAL_GPIO_Init+0x842>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	2101      	movs	r1, #1
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	4013      	ands	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 8369 	beq.w	800179c <HAL_GPIO_Init+0x83c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a42      	ldr	r2, [pc, #264]	; (80011d8 <HAL_GPIO_Init+0x278>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	f040 8096 	bne.w	8001200 <HAL_GPIO_Init+0x2a0>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80010da:	2201      	movs	r2, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69fa      	ldr	r2, [r7, #28]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0201 	and.w	r2, r3, #1
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69fa      	ldr	r2, [r7, #28]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001104:	4a3d      	ldr	r2, [pc, #244]	; (80011fc <HAL_GPIO_Init+0x29c>)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800110c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800110e:	4a3b      	ldr	r2, [pc, #236]	; (80011fc <HAL_GPIO_Init+0x29c>)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4413      	add	r3, r2
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	3208      	adds	r2, #8
 8001122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001126:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	220f      	movs	r2, #15
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	4013      	ands	r3, r2
 800113c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	220b      	movs	r2, #11
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	4313      	orrs	r3, r2
 8001150:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	08da      	lsrs	r2, r3, #3
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	3208      	adds	r2, #8
 800115a:	69f9      	ldr	r1, [r7, #28]
 800115c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	4013      	ands	r3, r2
 8001176:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2202      	movs	r2, #2
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69fa      	ldr	r2, [r7, #28]
 8001184:	4313      	orrs	r3, r2
 8001186:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e1ce      	b.n	800152e <HAL_GPIO_Init+0x5ce>
 8001190:	42020000 	.word	0x42020000
 8001194:	52020000 	.word	0x52020000
 8001198:	42020400 	.word	0x42020400
 800119c:	52020400 	.word	0x52020400
 80011a0:	42020800 	.word	0x42020800
 80011a4:	52020800 	.word	0x52020800
 80011a8:	42020c00 	.word	0x42020c00
 80011ac:	52020c00 	.word	0x52020c00
 80011b0:	42021000 	.word	0x42021000
 80011b4:	52021000 	.word	0x52021000
 80011b8:	42021400 	.word	0x42021400
 80011bc:	52021400 	.word	0x52021400
 80011c0:	42021800 	.word	0x42021800
 80011c4:	52021800 	.word	0x52021800
 80011c8:	42021c00 	.word	0x42021c00
 80011cc:	52021c00 	.word	0x52021c00
 80011d0:	42022000 	.word	0x42022000
 80011d4:	52022000 	.word	0x52022000
 80011d8:	46020000 	.word	0x46020000
 80011dc:	56020000 	.word	0x56020000
 80011e0:	0800844c 	.word	0x0800844c
 80011e4:	10110000 	.word	0x10110000
 80011e8:	10210000 	.word	0x10210000
 80011ec:	10310000 	.word	0x10310000
 80011f0:	10120000 	.word	0x10120000
 80011f4:	10220000 	.word	0x10220000
 80011f8:	10320000 	.word	0x10320000
 80011fc:	08008644 	.word	0x08008644
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d004      	beq.n	8001212 <HAL_GPIO_Init+0x2b2>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b12      	cmp	r3, #18
 800120e:	f040 811f 	bne.w	8001450 <HAL_GPIO_Init+0x4f0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a79      	ldr	r2, [pc, #484]	; (80013fc <HAL_GPIO_Init+0x49c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d050      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a78      	ldr	r2, [pc, #480]	; (8001400 <HAL_GPIO_Init+0x4a0>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d04c      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a77      	ldr	r2, [pc, #476]	; (8001404 <HAL_GPIO_Init+0x4a4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d048      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a76      	ldr	r2, [pc, #472]	; (8001408 <HAL_GPIO_Init+0x4a8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d044      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a75      	ldr	r2, [pc, #468]	; (800140c <HAL_GPIO_Init+0x4ac>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d040      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a74      	ldr	r2, [pc, #464]	; (8001410 <HAL_GPIO_Init+0x4b0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d03c      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a73      	ldr	r2, [pc, #460]	; (8001414 <HAL_GPIO_Init+0x4b4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d038      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a72      	ldr	r2, [pc, #456]	; (8001418 <HAL_GPIO_Init+0x4b8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d034      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a71      	ldr	r2, [pc, #452]	; (800141c <HAL_GPIO_Init+0x4bc>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d030      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a70      	ldr	r2, [pc, #448]	; (8001420 <HAL_GPIO_Init+0x4c0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d02c      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a6f      	ldr	r2, [pc, #444]	; (8001424 <HAL_GPIO_Init+0x4c4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d028      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a6e      	ldr	r2, [pc, #440]	; (8001428 <HAL_GPIO_Init+0x4c8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d024      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a6d      	ldr	r2, [pc, #436]	; (800142c <HAL_GPIO_Init+0x4cc>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d020      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a6c      	ldr	r2, [pc, #432]	; (8001430 <HAL_GPIO_Init+0x4d0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d01c      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a6b      	ldr	r2, [pc, #428]	; (8001434 <HAL_GPIO_Init+0x4d4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d018      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a6a      	ldr	r2, [pc, #424]	; (8001438 <HAL_GPIO_Init+0x4d8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d014      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a69      	ldr	r2, [pc, #420]	; (800143c <HAL_GPIO_Init+0x4dc>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d010      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a68      	ldr	r2, [pc, #416]	; (8001440 <HAL_GPIO_Init+0x4e0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00c      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a67      	ldr	r2, [pc, #412]	; (8001444 <HAL_GPIO_Init+0x4e4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d008      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a66      	ldr	r2, [pc, #408]	; (8001448 <HAL_GPIO_Init+0x4e8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d004      	beq.n	80012bc <HAL_GPIO_Init+0x35c>
 80012b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b6:	4865      	ldr	r0, [pc, #404]	; (800144c <HAL_GPIO_Init+0x4ec>)
 80012b8:	f7ff fab5 	bl	8000826 <assert_failed>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a4f      	ldr	r2, [pc, #316]	; (80013fc <HAL_GPIO_Init+0x49c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d050      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a4e      	ldr	r2, [pc, #312]	; (8001400 <HAL_GPIO_Init+0x4a0>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d04c      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <HAL_GPIO_Init+0x4a4>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d048      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a4c      	ldr	r2, [pc, #304]	; (8001408 <HAL_GPIO_Init+0x4a8>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d044      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a4b      	ldr	r2, [pc, #300]	; (800140c <HAL_GPIO_Init+0x4ac>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d040      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a4a      	ldr	r2, [pc, #296]	; (8001410 <HAL_GPIO_Init+0x4b0>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d03c      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a49      	ldr	r2, [pc, #292]	; (8001414 <HAL_GPIO_Init+0x4b4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d038      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a48      	ldr	r2, [pc, #288]	; (8001418 <HAL_GPIO_Init+0x4b8>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d034      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a47      	ldr	r2, [pc, #284]	; (800141c <HAL_GPIO_Init+0x4bc>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d030      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a46      	ldr	r2, [pc, #280]	; (8001420 <HAL_GPIO_Init+0x4c0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d02c      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a45      	ldr	r2, [pc, #276]	; (8001424 <HAL_GPIO_Init+0x4c4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d028      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a44      	ldr	r2, [pc, #272]	; (8001428 <HAL_GPIO_Init+0x4c8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d024      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a43      	ldr	r2, [pc, #268]	; (800142c <HAL_GPIO_Init+0x4cc>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d020      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a42      	ldr	r2, [pc, #264]	; (8001430 <HAL_GPIO_Init+0x4d0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d01c      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a41      	ldr	r2, [pc, #260]	; (8001434 <HAL_GPIO_Init+0x4d4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d018      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a40      	ldr	r2, [pc, #256]	; (8001438 <HAL_GPIO_Init+0x4d8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d014      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a3f      	ldr	r2, [pc, #252]	; (800143c <HAL_GPIO_Init+0x4dc>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d010      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a3e      	ldr	r2, [pc, #248]	; (8001440 <HAL_GPIO_Init+0x4e0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d00c      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a3d      	ldr	r2, [pc, #244]	; (8001444 <HAL_GPIO_Init+0x4e4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d008      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a3c      	ldr	r2, [pc, #240]	; (8001448 <HAL_GPIO_Init+0x4e8>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d004      	beq.n	8001366 <HAL_GPIO_Init+0x406>
 800135c:	f240 1101 	movw	r1, #257	; 0x101
 8001360:	483a      	ldr	r0, [pc, #232]	; (800144c <HAL_GPIO_Init+0x4ec>)
 8001362:	f7ff fa60 	bl	8000826 <assert_failed>
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	2b0f      	cmp	r3, #15
 800136c:	d904      	bls.n	8001378 <HAL_GPIO_Init+0x418>
 800136e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001372:	4836      	ldr	r0, [pc, #216]	; (800144c <HAL_GPIO_Init+0x4ec>)
 8001374:	f7ff fa57 	bl	8000826 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001384:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	220f      	movs	r2, #15
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	4013      	ands	r3, r2
 800139a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	f003 020f 	and.w	r2, r3, #15
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69fa      	ldr	r2, [r7, #28]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	69f9      	ldr	r1, [r7, #28]
 80013c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	4013      	ands	r3, r2
 80013da:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0203 	and.w	r2, r3, #3
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	69fa      	ldr	r2, [r7, #28]
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	e099      	b.n	800152e <HAL_GPIO_Init+0x5ce>
 80013fa:	bf00      	nop
 80013fc:	42020000 	.word	0x42020000
 8001400:	52020000 	.word	0x52020000
 8001404:	42020400 	.word	0x42020400
 8001408:	52020400 	.word	0x52020400
 800140c:	42020800 	.word	0x42020800
 8001410:	52020800 	.word	0x52020800
 8001414:	42020c00 	.word	0x42020c00
 8001418:	52020c00 	.word	0x52020c00
 800141c:	42021000 	.word	0x42021000
 8001420:	52021000 	.word	0x52021000
 8001424:	42021400 	.word	0x42021400
 8001428:	52021400 	.word	0x52021400
 800142c:	42021800 	.word	0x42021800
 8001430:	52021800 	.word	0x52021800
 8001434:	42021c00 	.word	0x42021c00
 8001438:	52021c00 	.word	0x52021c00
 800143c:	42022000 	.word	0x42022000
 8001440:	52022000 	.word	0x52022000
 8001444:	46020000 	.word	0x46020000
 8001448:	56020000 	.word	0x56020000
 800144c:	0800844c 	.word	0x0800844c
      }
      else
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a95      	ldr	r2, [pc, #596]	; (80016a8 <HAL_GPIO_Init+0x748>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d050      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a94      	ldr	r2, [pc, #592]	; (80016ac <HAL_GPIO_Init+0x74c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d04c      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a93      	ldr	r2, [pc, #588]	; (80016b0 <HAL_GPIO_Init+0x750>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d048      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a92      	ldr	r2, [pc, #584]	; (80016b4 <HAL_GPIO_Init+0x754>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d044      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a91      	ldr	r2, [pc, #580]	; (80016b8 <HAL_GPIO_Init+0x758>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d040      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a90      	ldr	r2, [pc, #576]	; (80016bc <HAL_GPIO_Init+0x75c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d03c      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a8f      	ldr	r2, [pc, #572]	; (80016c0 <HAL_GPIO_Init+0x760>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d038      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a8e      	ldr	r2, [pc, #568]	; (80016c4 <HAL_GPIO_Init+0x764>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d034      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a8d      	ldr	r2, [pc, #564]	; (80016c8 <HAL_GPIO_Init+0x768>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d030      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a8c      	ldr	r2, [pc, #560]	; (80016cc <HAL_GPIO_Init+0x76c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d02c      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a8b      	ldr	r2, [pc, #556]	; (80016d0 <HAL_GPIO_Init+0x770>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d028      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a8a      	ldr	r2, [pc, #552]	; (80016d4 <HAL_GPIO_Init+0x774>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d024      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a89      	ldr	r2, [pc, #548]	; (80016d8 <HAL_GPIO_Init+0x778>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d020      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a88      	ldr	r2, [pc, #544]	; (80016dc <HAL_GPIO_Init+0x77c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d01c      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a87      	ldr	r2, [pc, #540]	; (80016e0 <HAL_GPIO_Init+0x780>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d018      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a86      	ldr	r2, [pc, #536]	; (80016e4 <HAL_GPIO_Init+0x784>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d014      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a85      	ldr	r2, [pc, #532]	; (80016e8 <HAL_GPIO_Init+0x788>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d010      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a84      	ldr	r2, [pc, #528]	; (80016ec <HAL_GPIO_Init+0x78c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d00c      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a83      	ldr	r2, [pc, #524]	; (80016f0 <HAL_GPIO_Init+0x790>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d008      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a82      	ldr	r2, [pc, #520]	; (80016f4 <HAL_GPIO_Init+0x794>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d004      	beq.n	80014fa <HAL_GPIO_Init+0x59a>
 80014f0:	f240 1113 	movw	r1, #275	; 0x113
 80014f4:	4880      	ldr	r0, [pc, #512]	; (80016f8 <HAL_GPIO_Init+0x798>)
 80014f6:	f7ff f996 	bl	8000826 <assert_failed>

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	4013      	ands	r3, r2
 8001510:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0203 	and.w	r2, r3, #3
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	4313      	orrs	r3, r2
 8001526:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d00b      	beq.n	800154e <HAL_GPIO_Init+0x5ee>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d007      	beq.n	800154e <HAL_GPIO_Init+0x5ee>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001542:	2b11      	cmp	r3, #17
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x5ee>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b12      	cmp	r3, #18
 800154c:	d145      	bne.n	80015da <HAL_GPIO_Init+0x67a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d010      	beq.n	8001578 <HAL_GPIO_Init+0x618>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d00c      	beq.n	8001578 <HAL_GPIO_Init+0x618>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d008      	beq.n	8001578 <HAL_GPIO_Init+0x618>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b03      	cmp	r3, #3
 800156c:	d004      	beq.n	8001578 <HAL_GPIO_Init+0x618>
 800156e:	f240 1121 	movw	r1, #289	; 0x121
 8001572:	4861      	ldr	r0, [pc, #388]	; (80016f8 <HAL_GPIO_Init+0x798>)
 8001574:	f7ff f957 	bl	8000826 <assert_failed>

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	4013      	ands	r3, r2
 800158e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80015ae:	2201      	movs	r2, #1
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69fa      	ldr	r2, [r7, #28]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	091b      	lsrs	r3, r3, #4
 80015c4:	f003 0201 	and.w	r2, r3, #1
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d028      	beq.n	8001634 <HAL_GPIO_Init+0x6d4>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00c      	beq.n	8001604 <HAL_GPIO_Init+0x6a4>
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d008      	beq.n	8001604 <HAL_GPIO_Init+0x6a4>
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d004      	beq.n	8001604 <HAL_GPIO_Init+0x6a4>
 80015fa:	f240 1133 	movw	r1, #307	; 0x133
 80015fe:	483e      	ldr	r0, [pc, #248]	; (80016f8 <HAL_GPIO_Init+0x798>)
 8001600:	f7ff f911 	bl	8000826 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	4013      	ands	r3, r2
 800161a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	4313      	orrs	r3, r2
 800162c:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80ad 	beq.w	800179c <HAL_GPIO_Init+0x83c>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001642:	4a2e      	ldr	r2, [pc, #184]	; (80016fc <HAL_GPIO_Init+0x79c>)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3318      	adds	r3, #24
 800164a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	220f      	movs	r2, #15
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	69fa      	ldr	r2, [r7, #28]
 8001662:	4013      	ands	r3, r2
 8001664:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	0a9a      	lsrs	r2, r3, #10
 800166a:	4b25      	ldr	r3, [pc, #148]	; (8001700 <HAL_GPIO_Init+0x7a0>)
 800166c:	4013      	ands	r3, r2
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	f002 0203 	and.w	r2, r2, #3
 8001674:	00d2      	lsls	r2, r2, #3
 8001676:	4093      	lsls	r3, r2
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	4313      	orrs	r3, r2
 800167c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800167e:	491f      	ldr	r1, [pc, #124]	; (80016fc <HAL_GPIO_Init+0x79c>)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3318      	adds	r3, #24
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_GPIO_Init+0x79c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	43db      	mvns	r3, r3
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	4013      	ands	r3, r2
 800169a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a4:	e02e      	b.n	8001704 <HAL_GPIO_Init+0x7a4>
 80016a6:	bf00      	nop
 80016a8:	42020000 	.word	0x42020000
 80016ac:	52020000 	.word	0x52020000
 80016b0:	42020400 	.word	0x42020400
 80016b4:	52020400 	.word	0x52020400
 80016b8:	42020800 	.word	0x42020800
 80016bc:	52020800 	.word	0x52020800
 80016c0:	42020c00 	.word	0x42020c00
 80016c4:	52020c00 	.word	0x52020c00
 80016c8:	42021000 	.word	0x42021000
 80016cc:	52021000 	.word	0x52021000
 80016d0:	42021400 	.word	0x42021400
 80016d4:	52021400 	.word	0x52021400
 80016d8:	42021800 	.word	0x42021800
 80016dc:	52021800 	.word	0x52021800
 80016e0:	42021c00 	.word	0x42021c00
 80016e4:	52021c00 	.word	0x52021c00
 80016e8:	42022000 	.word	0x42022000
 80016ec:	52022000 	.word	0x52022000
 80016f0:	46020000 	.word	0x46020000
 80016f4:	56020000 	.word	0x56020000
 80016f8:	0800844c 	.word	0x0800844c
 80016fc:	46022000 	.word	0x46022000
 8001700:	002f7f7f 	.word	0x002f7f7f
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x7b0>
        {
          tmp |= iocurrent;
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001710:	4a2a      	ldr	r2, [pc, #168]	; (80017bc <HAL_GPIO_Init+0x85c>)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001716:	4b29      	ldr	r3, [pc, #164]	; (80017bc <HAL_GPIO_Init+0x85c>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	43db      	mvns	r3, r3
 8001720:	69fa      	ldr	r2, [r7, #28]
 8001722:	4013      	ands	r3, r2
 8001724:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x7da>
        {
          tmp |= iocurrent;
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800173a:	4a20      	ldr	r2, [pc, #128]	; (80017bc <HAL_GPIO_Init+0x85c>)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <HAL_GPIO_Init+0x85c>)
 8001742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001746:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	43db      	mvns	r3, r3
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	4013      	ands	r3, r2
 8001750:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x806>
        {
          tmp |= iocurrent;
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4313      	orrs	r3, r2
 8001764:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001766:	4a15      	ldr	r2, [pc, #84]	; (80017bc <HAL_GPIO_Init+0x85c>)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <HAL_GPIO_Init+0x85c>)
 8001770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001774:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	43db      	mvns	r3, r3
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	4013      	ands	r3, r2
 800177e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x834>
        {
          tmp |= iocurrent;
 800178c:	69fa      	ldr	r2, [r7, #28]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4313      	orrs	r3, r2
 8001792:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001794:	4a09      	ldr	r2, [pc, #36]	; (80017bc <HAL_GPIO_Init+0x85c>)
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3301      	adds	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa22 f303 	lsr.w	r3, r2, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f47f ac7e 	bne.w	80010ae <HAL_GPIO_Init+0x14e>
  }
}
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
 80017b6:	3720      	adds	r7, #32
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	46022000 	.word	0x46022000

080017c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
 80017cc:	4613      	mov	r3, r2
 80017ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d004      	beq.n	80017e0 <HAL_GPIO_WritePin+0x20>
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	0c1b      	lsrs	r3, r3, #16
 80017da:	041b      	lsls	r3, r3, #16
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d004      	beq.n	80017ea <HAL_GPIO_WritePin+0x2a>
 80017e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017e4:	480d      	ldr	r0, [pc, #52]	; (800181c <HAL_GPIO_WritePin+0x5c>)
 80017e6:	f7ff f81e 	bl	8000826 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80017ea:	787b      	ldrb	r3, [r7, #1]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d007      	beq.n	8001800 <HAL_GPIO_WritePin+0x40>
 80017f0:	787b      	ldrb	r3, [r7, #1]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d004      	beq.n	8001800 <HAL_GPIO_WritePin+0x40>
 80017f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017fa:	4808      	ldr	r0, [pc, #32]	; (800181c <HAL_GPIO_WritePin+0x5c>)
 80017fc:	f7ff f813 	bl	8000826 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001800:	787b      	ldrb	r3, [r7, #1]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800180c:	e002      	b.n	8001814 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	0800844c 	.word	0x0800844c

08001820 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800182c:	887b      	ldrh	r3, [r7, #2]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d004      	beq.n	800183c <HAL_GPIO_TogglePin+0x1c>
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	2b00      	cmp	r3, #0
 800183a:	d004      	beq.n	8001846 <HAL_GPIO_TogglePin+0x26>
 800183c:	f240 2135 	movw	r1, #565	; 0x235
 8001840:	480a      	ldr	r0, [pc, #40]	; (800186c <HAL_GPIO_TogglePin+0x4c>)
 8001842:	f7fe fff0 	bl	8000826 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800184c:	887a      	ldrh	r2, [r7, #2]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4013      	ands	r3, r2
 8001852:	041a      	lsls	r2, r3, #16
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43d9      	mvns	r1, r3
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	400b      	ands	r3, r1
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	619a      	str	r2, [r3, #24]
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	0800844c 	.word	0x0800844c

08001870 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	4013      	ands	r3, r2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001886:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f814 	bl	80018bc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80018a0:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 f812 	bl	80018d2 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	46022000 	.word	0x46022000

080018bc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <HAL_ICACHE_ConfigAssociativityMode+0x20>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d003      	beq.n	8001908 <HAL_ICACHE_ConfigAssociativityMode+0x20>
 8001900:	21a9      	movs	r1, #169	; 0xa9
 8001902:	480c      	ldr	r0, [pc, #48]	; (8001934 <HAL_ICACHE_ConfigAssociativityMode+0x4c>)
 8001904:	f7fe ff8f 	bl	8000826 <assert_failed>

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_ICACHE_ConfigAssociativityMode+0x50>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d002      	beq.n	800191a <HAL_ICACHE_ConfigAssociativityMode+0x32>
  {
    status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e007      	b.n	800192a <HAL_ICACHE_ConfigAssociativityMode+0x42>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <HAL_ICACHE_ConfigAssociativityMode+0x50>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 0204 	bic.w	r2, r3, #4
 8001922:	4905      	ldr	r1, [pc, #20]	; (8001938 <HAL_ICACHE_ConfigAssociativityMode+0x50>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
  }

  return status;
 800192a:	7bfb      	ldrb	r3, [r7, #15]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	08008488 	.word	0x08008488
 8001938:	40030400 	.word	0x40030400

0800193c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_ICACHE_Enable+0x1c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_ICACHE_Enable+0x1c>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40030400 	.word	0x40030400

0800195c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t timeout;
  uint32_t vos_old;

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800196a:	d00f      	beq.n	800198c <HAL_PWREx_ControlVoltageScaling+0x30>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001972:	d00b      	beq.n	800198c <HAL_PWREx_ControlVoltageScaling+0x30>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197a:	d007      	beq.n	800198c <HAL_PWREx_ControlVoltageScaling+0x30>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d004      	beq.n	800198c <HAL_PWREx_ControlVoltageScaling+0x30>
 8001982:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8001986:	483a      	ldr	r0, [pc, #232]	; (8001a70 <HAL_PWREx_ControlVoltageScaling+0x114>)
 8001988:	f7fe ff4d 	bl	8000826 <assert_failed>

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800198c:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <HAL_PWREx_ControlVoltageScaling+0x118>)
 800198e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001990:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001994:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	d10b      	bne.n	80019b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a4:	d905      	bls.n	80019b2 <HAL_PWREx_ControlVoltageScaling+0x56>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80019a6:	4b33      	ldr	r3, [pc, #204]	; (8001a74 <HAL_PWREx_ControlVoltageScaling+0x118>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	4a32      	ldr	r2, [pc, #200]	; (8001a74 <HAL_PWREx_ControlVoltageScaling+0x118>)
 80019ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e057      	b.n	8001a66 <HAL_PWREx_ControlVoltageScaling+0x10a>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019bc:	d90a      	bls.n	80019d4 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80019be:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <HAL_PWREx_ControlVoltageScaling+0x118>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	4a2a      	ldr	r2, [pc, #168]	; (8001a74 <HAL_PWREx_ControlVoltageScaling+0x118>)
 80019cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d0:	60d3      	str	r3, [r2, #12]
 80019d2:	e007      	b.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x88>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <HAL_PWREx_ControlVoltageScaling+0x118>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80019dc:	4925      	ldr	r1, [pc, #148]	; (8001a74 <HAL_PWREx_ControlVoltageScaling+0x118>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a24      	ldr	r2, [pc, #144]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0x120>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	099b      	lsrs	r3, r3, #6
 80019f0:	2232      	movs	r2, #50	; 0x32
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	4a21      	ldr	r2, [pc, #132]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0x120>)
 80019f8:	fba2 2303 	umull	r2, r3, r2, r3
 80019fc:	099b      	lsrs	r3, r3, #6
 80019fe:	3301      	adds	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001a02:	e002      	b.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0xae>
  {
    timeout--;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <HAL_PWREx_ControlVoltageScaling+0x118>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0xc0>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f3      	bne.n	8001a04 <HAL_PWREx_ControlVoltageScaling+0xa8>
  }

  /* Check time out */
  if (timeout != 0U)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d01b      	beq.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0xfe>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0x120>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	099b      	lsrs	r3, r3, #6
 8001a2e:	2232      	movs	r2, #50	; 0x32
 8001a30:	fb02 f303 	mul.w	r3, r2, r3
 8001a34:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0x120>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	099b      	lsrs	r3, r3, #6
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001a40:	e002      	b.n	8001a48 <HAL_PWREx_ControlVoltageScaling+0xec>
    {
      timeout--;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_PWREx_ControlVoltageScaling+0x118>)
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0xfe>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f3      	bne.n	8001a42 <HAL_PWREx_ControlVoltageScaling+0xe6>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_PWREx_ControlVoltageScaling+0x108>
  {
    return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e000      	b.n	8001a66 <HAL_PWREx_ControlVoltageScaling+0x10a>
  }

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	080084c4 	.word	0x080084c4
 8001a74:	46020800 	.word	0x46020800
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	10624dd3 	.word	0x10624dd3

08001a80 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	46020800 	.word	0x46020800

08001a9c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t timeout;

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d007      	beq.n	8001aba <HAL_PWREx_ConfigSupply+0x1e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d004      	beq.n	8001aba <HAL_PWREx_ConfigSupply+0x1e>
 8001ab0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001ab4:	4822      	ldr	r0, [pc, #136]	; (8001b40 <HAL_PWREx_ConfigSupply+0xa4>)
 8001ab6:	f7fe feb6 	bl	8000826 <assert_failed>

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001aba:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <HAL_PWREx_ConfigSupply+0xa8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a22      	ldr	r2, [pc, #136]	; (8001b48 <HAL_PWREx_ConfigSupply+0xac>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	2232      	movs	r2, #50	; 0x32
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	4a1e      	ldr	r2, [pc, #120]	; (8001b48 <HAL_PWREx_ConfigSupply+0xac>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	099b      	lsrs	r3, r3, #6
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d113      	bne.n	8001b06 <HAL_PWREx_ConfigSupply+0x6a>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001ade:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <HAL_PWREx_ConfigSupply+0xb0>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	4a1a      	ldr	r2, [pc, #104]	; (8001b4c <HAL_PWREx_ConfigSupply+0xb0>)
 8001ae4:	f023 0302 	bic.w	r3, r3, #2
 8001ae8:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001aea:	e002      	b.n	8001af2 <HAL_PWREx_ConfigSupply+0x56>
    {
      timeout--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <HAL_PWREx_ConfigSupply+0xb0>)
 8001af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d116      	bne.n	8001b2c <HAL_PWREx_ConfigSupply+0x90>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1f3      	bne.n	8001aec <HAL_PWREx_ConfigSupply+0x50>
 8001b04:	e012      	b.n	8001b2c <HAL_PWREx_ConfigSupply+0x90>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <HAL_PWREx_ConfigSupply+0xb0>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	4a10      	ldr	r2, [pc, #64]	; (8001b4c <HAL_PWREx_ConfigSupply+0xb0>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001b12:	e002      	b.n	8001b1a <HAL_PWREx_ConfigSupply+0x7e>
    {
      timeout--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_PWREx_ConfigSupply+0xb0>)
 8001b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <HAL_PWREx_ConfigSupply+0x90>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f3      	bne.n	8001b14 <HAL_PWREx_ConfigSupply+0x78>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_PWREx_ConfigSupply+0x9a>
  {
    return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e000      	b.n	8001b38 <HAL_PWREx_ConfigSupply+0x9c>
  }

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	080084c4 	.word	0x080084c4
 8001b44:	20000000 	.word	0x20000000
 8001b48:	10624dd3 	.word	0x10624dd3
 8001b4c:	46020800 	.word	0x46020800

08001b50 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b5e:	6113      	str	r3, [r2, #16]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	46020800 	.word	0x46020800

08001b70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08e      	sub	sp, #56	; 0x38
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f001 b908 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00a      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x38>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x38>
 8001b9e:	f240 212f 	movw	r1, #559	; 0x22f
 8001ba2:	4894      	ldr	r0, [pc, #592]	; (8001df4 <HAL_RCC_OscConfig+0x284>)
 8001ba4:	f7fe fe3f 	bl	8000826 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba8:	4b93      	ldr	r3, [pc, #588]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bb2:	4b91      	ldr	r3, [pc, #580]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 81d6 	beq.w	8001f76 <HAL_RCC_OscConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d008      	beq.n	8001be4 <HAL_RCC_OscConfig+0x74>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d004      	beq.n	8001be4 <HAL_RCC_OscConfig+0x74>
 8001bda:	f44f 710e 	mov.w	r1, #568	; 0x238
 8001bde:	4885      	ldr	r0, [pc, #532]	; (8001df4 <HAL_RCC_OscConfig+0x284>)
 8001be0:	f7fe fe21 	bl	8000826 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	2bff      	cmp	r3, #255	; 0xff
 8001bea:	d904      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x86>
 8001bec:	f240 2139 	movw	r1, #569	; 0x239
 8001bf0:	4880      	ldr	r0, [pc, #512]	; (8001df4 <HAL_RCC_OscConfig+0x284>)
 8001bf2:	f7fe fe18 	bl	8000826 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d04f      	beq.n	8001c9e <HAL_RCC_OscConfig+0x12e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c06:	d04a      	beq.n	8001c9e <HAL_RCC_OscConfig+0x12e>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c10:	d045      	beq.n	8001c9e <HAL_RCC_OscConfig+0x12e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001c1a:	d040      	beq.n	8001c9e <HAL_RCC_OscConfig+0x12e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c24:	d03b      	beq.n	8001c9e <HAL_RCC_OscConfig+0x12e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c2e:	d036      	beq.n	8001c9e <HAL_RCC_OscConfig+0x12e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8001c38:	d031      	beq.n	8001c9e <HAL_RCC_OscConfig+0x12e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	f1b3 4fe0 	cmp.w	r3, #1879048192	; 0x70000000
 8001c42:	d02c      	beq.n	8001c9e <HAL_RCC_OscConfig+0x12e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c4c:	d027      	beq.n	8001c9e <HAL_RCC_OscConfig+0x12e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	f1b3 4f10 	cmp.w	r3, #2415919104	; 0x90000000
 8001c56:	d022      	beq.n	8001c9e <HAL_RCC_OscConfig+0x12e>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8001c60:	d01d      	beq.n	8001c9e <HAL_RCC_OscConfig+0x12e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	f1b3 4f30 	cmp.w	r3, #2952790016	; 0xb0000000
 8001c6a:	d018      	beq.n	8001c9e <HAL_RCC_OscConfig+0x12e>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001c74:	d013      	beq.n	8001c9e <HAL_RCC_OscConfig+0x12e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	f1b3 4f50 	cmp.w	r3, #3489660928	; 0xd0000000
 8001c7e:	d00e      	beq.n	8001c9e <HAL_RCC_OscConfig+0x12e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001c88:	d009      	beq.n	8001c9e <HAL_RCC_OscConfig+0x12e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 8001c92:	d004      	beq.n	8001c9e <HAL_RCC_OscConfig+0x12e>
 8001c94:	f240 213a 	movw	r1, #570	; 0x23a
 8001c98:	4856      	ldr	r0, [pc, #344]	; (8001df4 <HAL_RCC_OscConfig+0x284>)
 8001c9a:	f7fe fdc4 	bl	8000826 <assert_failed>

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d007      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x144>
 8001ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	f040 80e3 	bne.w	8001e72 <HAL_RCC_OscConfig+0x302>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	f040 80df 	bne.w	8001e72 <HAL_RCC_OscConfig+0x302>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f001 b86c 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc6:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d004      	beq.n	8001cdc <HAL_RCC_OscConfig+0x16c>
 8001cd2:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001cda:	e005      	b.n	8001ce8 <HAL_RCC_OscConfig+0x178>
 8001cdc:	4b46      	ldr	r3, [pc, #280]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001cde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ce2:	041b      	lsls	r3, r3, #16
 8001ce4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d255      	bcs.n	8001d98 <HAL_RCC_OscConfig+0x228>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10a      	bne.n	8001d08 <HAL_RCC_OscConfig+0x198>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 fcf6 	bl	80036e8 <RCC_SetFlashLatencyFromMSIRange>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <HAL_RCC_OscConfig+0x198>
            {
              return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f001 b849 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001d08:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4a3a      	ldr	r2, [pc, #232]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001d0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d12:	6093      	str	r3, [r2, #8]
 8001d14:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	4935      	ldr	r1, [pc, #212]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001d2e:	d309      	bcc.n	8001d44 <HAL_RCC_OscConfig+0x1d4>
 8001d30:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f023 021f 	bic.w	r2, r3, #31
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	492e      	ldr	r1, [pc, #184]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60cb      	str	r3, [r1, #12]
 8001d42:	e083      	b.n	8001e4c <HAL_RCC_OscConfig+0x2dc>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	da0a      	bge.n	8001d62 <HAL_RCC_OscConfig+0x1f2>
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	015b      	lsls	r3, r3, #5
 8001d5a:	4927      	ldr	r1, [pc, #156]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	60cb      	str	r3, [r1, #12]
 8001d60:	e074      	b.n	8001e4c <HAL_RCC_OscConfig+0x2dc>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d6a:	d30a      	bcc.n	8001d82 <HAL_RCC_OscConfig+0x212>
 8001d6c:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	029b      	lsls	r3, r3, #10
 8001d7a:	491f      	ldr	r1, [pc, #124]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60cb      	str	r3, [r1, #12]
 8001d80:	e064      	b.n	8001e4c <HAL_RCC_OscConfig+0x2dc>
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	03db      	lsls	r3, r3, #15
 8001d90:	4919      	ldr	r1, [pc, #100]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	60cb      	str	r3, [r1, #12]
 8001d96:	e059      	b.n	8001e4c <HAL_RCC_OscConfig+0x2dc>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	4a16      	ldr	r2, [pc, #88]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001d9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001da2:	6093      	str	r3, [r2, #8]
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	4911      	ldr	r1, [pc, #68]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001dbe:	d309      	bcc.n	8001dd4 <HAL_RCC_OscConfig+0x264>
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f023 021f 	bic.w	r2, r3, #31
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	490a      	ldr	r1, [pc, #40]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60cb      	str	r3, [r1, #12]
 8001dd2:	e02d      	b.n	8001e30 <HAL_RCC_OscConfig+0x2c0>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	da0f      	bge.n	8001dfc <HAL_RCC_OscConfig+0x28c>
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	015b      	lsls	r3, r3, #5
 8001dea:	4903      	ldr	r1, [pc, #12]	; (8001df8 <HAL_RCC_OscConfig+0x288>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60cb      	str	r3, [r1, #12]
 8001df0:	e01e      	b.n	8001e30 <HAL_RCC_OscConfig+0x2c0>
 8001df2:	bf00      	nop
 8001df4:	08008500 	.word	0x08008500
 8001df8:	46020c00 	.word	0x46020c00
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e04:	d30a      	bcc.n	8001e1c <HAL_RCC_OscConfig+0x2ac>
 8001e06:	4b92      	ldr	r3, [pc, #584]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	029b      	lsls	r3, r3, #10
 8001e14:	498e      	ldr	r1, [pc, #568]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60cb      	str	r3, [r1, #12]
 8001e1a:	e009      	b.n	8001e30 <HAL_RCC_OscConfig+0x2c0>
 8001e1c:	4b8c      	ldr	r3, [pc, #560]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	03db      	lsls	r3, r3, #15
 8001e2a:	4989      	ldr	r1, [pc, #548]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <HAL_RCC_OscConfig+0x2dc>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f001 fc54 	bl	80036e8 <RCC_SetFlashLatencyFromMSIRange>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <HAL_RCC_OscConfig+0x2dc>
            {
              return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f000 bfa7 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001e4c:	f001 fbf6 	bl	800363c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e50:	4b80      	ldr	r3, [pc, #512]	; (8002054 <HAL_RCC_OscConfig+0x4e4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fe49 	bl	8000aec <HAL_InitTick>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8001e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 8085 	beq.w	8001f74 <HAL_RCC_OscConfig+0x404>
        {
          return status;
 8001e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e6e:	f000 bf94 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d061      	beq.n	8001f3e <HAL_RCC_OscConfig+0x3ce>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001e7a:	4b75      	ldr	r3, [pc, #468]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a74      	ldr	r2, [pc, #464]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001e86:	f7fe fe7b 	bl	8000b80 <HAL_GetTick>
 8001e8a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001e8c:	e009      	b.n	8001ea2 <HAL_RCC_OscConfig+0x332>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e8e:	f7fe fe77 	bl	8000b80 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d902      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x332>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	f000 bf7c 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001ea2:	4b6b      	ldr	r3, [pc, #428]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0ef      	beq.n	8001e8e <HAL_RCC_OscConfig+0x31e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001eae:	4b68      	ldr	r3, [pc, #416]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	4a67      	ldr	r2, [pc, #412]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001eb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eb8:	6093      	str	r3, [r2, #8]
 8001eba:	4b65      	ldr	r3, [pc, #404]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	4962      	ldr	r1, [pc, #392]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001ed4:	d309      	bcc.n	8001eea <HAL_RCC_OscConfig+0x37a>
 8001ed6:	4b5e      	ldr	r3, [pc, #376]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f023 021f 	bic.w	r2, r3, #31
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	495b      	ldr	r1, [pc, #364]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	60cb      	str	r3, [r1, #12]
 8001ee8:	e045      	b.n	8001f76 <HAL_RCC_OscConfig+0x406>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	da0a      	bge.n	8001f08 <HAL_RCC_OscConfig+0x398>
 8001ef2:	4b57      	ldr	r3, [pc, #348]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	015b      	lsls	r3, r3, #5
 8001f00:	4953      	ldr	r1, [pc, #332]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60cb      	str	r3, [r1, #12]
 8001f06:	e036      	b.n	8001f76 <HAL_RCC_OscConfig+0x406>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f10:	d30a      	bcc.n	8001f28 <HAL_RCC_OscConfig+0x3b8>
 8001f12:	4b4f      	ldr	r3, [pc, #316]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	029b      	lsls	r3, r3, #10
 8001f20:	494b      	ldr	r1, [pc, #300]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60cb      	str	r3, [r1, #12]
 8001f26:	e026      	b.n	8001f76 <HAL_RCC_OscConfig+0x406>
 8001f28:	4b49      	ldr	r3, [pc, #292]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	03db      	lsls	r3, r3, #15
 8001f36:	4946      	ldr	r1, [pc, #280]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60cb      	str	r3, [r1, #12]
 8001f3c:	e01b      	b.n	8001f76 <HAL_RCC_OscConfig+0x406>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001f3e:	4b44      	ldr	r3, [pc, #272]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a43      	ldr	r2, [pc, #268]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001f4a:	f7fe fe19 	bl	8000b80 <HAL_GetTick>
 8001f4e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001f50:	e009      	b.n	8001f66 <HAL_RCC_OscConfig+0x3f6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f52:	f7fe fe15 	bl	8000b80 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d902      	bls.n	8001f66 <HAL_RCC_OscConfig+0x3f6>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	f000 bf1a 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001f66:	4b3a      	ldr	r3, [pc, #232]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ef      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3e2>
 8001f72:	e000      	b.n	8001f76 <HAL_RCC_OscConfig+0x406>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 80ab 	beq.w	80020da <HAL_RCC_OscConfig+0x56a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x444>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f94:	d00e      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x444>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f9e:	d009      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x444>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001fa8:	d004      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x444>
 8001faa:	f240 21a9 	movw	r1, #681	; 0x2a9
 8001fae:	482a      	ldr	r0, [pc, #168]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001fb0:	f7fe fc39 	bl	8000826 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d005      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x456>
 8001fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbc:	2b0c      	cmp	r3, #12
 8001fbe:	d10a      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x466>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x466>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 8085 	bne.w	80020da <HAL_RCC_OscConfig+0x56a>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f000 bee2 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x47e>
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1a      	ldr	r2, [pc, #104]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	e048      	b.n	8002080 <HAL_RCC_OscConfig+0x510>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff6:	d112      	bne.n	800201e <HAL_RCC_OscConfig+0x4ae>
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8001ffe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a11      	ldr	r2, [pc, #68]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 800200a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8002016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	e030      	b.n	8002080 <HAL_RCC_OscConfig+0x510>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002026:	d119      	bne.n	800205c <HAL_RCC_OscConfig+0x4ec>
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a08      	ldr	r2, [pc, #32]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 800202e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a05      	ldr	r2, [pc, #20]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 800203a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a02      	ldr	r2, [pc, #8]	; (8002050 <HAL_RCC_OscConfig+0x4e0>)
 8002046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e018      	b.n	8002080 <HAL_RCC_OscConfig+0x510>
 800204e:	bf00      	nop
 8002050:	46020c00 	.word	0x46020c00
 8002054:	20000004 	.word	0x20000004
 8002058:	08008500 	.word	0x08008500
 800205c:	4ba2      	ldr	r3, [pc, #648]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4aa1      	ldr	r2, [pc, #644]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	4b9f      	ldr	r3, [pc, #636]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a9e      	ldr	r2, [pc, #632]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 800206e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b9c      	ldr	r3, [pc, #624]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a9b      	ldr	r2, [pc, #620]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 800207a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800207e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d014      	beq.n	80020b2 <HAL_RCC_OscConfig+0x542>
      {
        tickstart = HAL_GetTick();
 8002088:	f7fe fd7a 	bl	8000b80 <HAL_GetTick>
 800208c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800208e:	e009      	b.n	80020a4 <HAL_RCC_OscConfig+0x534>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7fe fd76 	bl	8000b80 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	; 0x64
 800209c:	d902      	bls.n	80020a4 <HAL_RCC_OscConfig+0x534>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	f000 be7b 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a4:	4b90      	ldr	r3, [pc, #576]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0ef      	beq.n	8002090 <HAL_RCC_OscConfig+0x520>
 80020b0:	e013      	b.n	80020da <HAL_RCC_OscConfig+0x56a>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80020b2:	f7fe fd65 	bl	8000b80 <HAL_GetTick>
 80020b6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020b8:	e009      	b.n	80020ce <HAL_RCC_OscConfig+0x55e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ba:	f7fe fd61 	bl	8000b80 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b64      	cmp	r3, #100	; 0x64
 80020c6:	d902      	bls.n	80020ce <HAL_RCC_OscConfig+0x55e>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	f000 be66 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ce:	4b86      	ldr	r3, [pc, #536]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1ef      	bne.n	80020ba <HAL_RCC_OscConfig+0x54a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d074      	beq.n	80021d0 <HAL_RCC_OscConfig+0x660>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <HAL_RCC_OscConfig+0x592>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f6:	d004      	beq.n	8002102 <HAL_RCC_OscConfig+0x592>
 80020f8:	f240 21da 	movw	r1, #730	; 0x2da
 80020fc:	487b      	ldr	r0, [pc, #492]	; (80022ec <HAL_RCC_OscConfig+0x77c>)
 80020fe:	f7fe fb92 	bl	8000826 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b1f      	cmp	r3, #31
 8002108:	d904      	bls.n	8002114 <HAL_RCC_OscConfig+0x5a4>
 800210a:	f240 21db 	movw	r1, #731	; 0x2db
 800210e:	4877      	ldr	r0, [pc, #476]	; (80022ec <HAL_RCC_OscConfig+0x77c>)
 8002110:	f7fe fb89 	bl	8000826 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002116:	2b04      	cmp	r3, #4
 8002118:	d005      	beq.n	8002126 <HAL_RCC_OscConfig+0x5b6>
 800211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211c:	2b0c      	cmp	r3, #12
 800211e:	d114      	bne.n	800214a <HAL_RCC_OscConfig+0x5da>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002122:	2b02      	cmp	r3, #2
 8002124:	d111      	bne.n	800214a <HAL_RCC_OscConfig+0x5da>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <HAL_RCC_OscConfig+0x5c4>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	f000 be33 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002134:	4b6c      	ldr	r3, [pc, #432]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	041b      	lsls	r3, r3, #16
 8002142:	4969      	ldr	r1, [pc, #420]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002144:	4313      	orrs	r3, r2
 8002146:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002148:	e042      	b.n	80021d0 <HAL_RCC_OscConfig+0x660>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d024      	beq.n	800219c <HAL_RCC_OscConfig+0x62c>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002152:	4b65      	ldr	r3, [pc, #404]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a64      	ldr	r2, [pc, #400]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800215e:	f7fe fd0f 	bl	8000b80 <HAL_GetTick>
 8002162:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002164:	e009      	b.n	800217a <HAL_RCC_OscConfig+0x60a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002166:	f7fe fd0b 	bl	8000b80 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d902      	bls.n	800217a <HAL_RCC_OscConfig+0x60a>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	f000 be10 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800217a:	4b5b      	ldr	r3, [pc, #364]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0ef      	beq.n	8002166 <HAL_RCC_OscConfig+0x5f6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002186:	4b58      	ldr	r3, [pc, #352]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	041b      	lsls	r3, r3, #16
 8002194:	4954      	ldr	r1, [pc, #336]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002196:	4313      	orrs	r3, r2
 8002198:	610b      	str	r3, [r1, #16]
 800219a:	e019      	b.n	80021d0 <HAL_RCC_OscConfig+0x660>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800219c:	4b52      	ldr	r3, [pc, #328]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a51      	ldr	r2, [pc, #324]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 80021a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021a6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80021a8:	f7fe fcea 	bl	8000b80 <HAL_GetTick>
 80021ac:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ae:	e009      	b.n	80021c4 <HAL_RCC_OscConfig+0x654>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b0:	f7fe fce6 	bl	8000b80 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d902      	bls.n	80021c4 <HAL_RCC_OscConfig+0x654>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	f000 bdeb 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021c4:	4b48      	ldr	r3, [pc, #288]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1ef      	bne.n	80021b0 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80ee 	beq.w	80023ba <HAL_RCC_OscConfig+0x84a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_RCC_OscConfig+0x68a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021ee:	d004      	beq.n	80021fa <HAL_RCC_OscConfig+0x68a>
 80021f0:	f240 3119 	movw	r1, #793	; 0x319
 80021f4:	483d      	ldr	r0, [pc, #244]	; (80022ec <HAL_RCC_OscConfig+0x77c>)
 80021f6:	f7fe fb16 	bl	8000826 <assert_failed>

    FlagStatus  pwrclkchanged = RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002200:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	d111      	bne.n	8002232 <HAL_RCC_OscConfig+0x6c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002214:	4a34      	ldr	r2, [pc, #208]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002216:	f043 0304 	orr.w	r3, r3, #4
 800221a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800221e:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800222c:	2301      	movs	r3, #1
 800222e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002232:	4b2f      	ldr	r3, [pc, #188]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d119      	bne.n	8002272 <HAL_RCC_OscConfig+0x702>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800223e:	4b2c      	ldr	r3, [pc, #176]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002242:	4a2b      	ldr	r2, [pc, #172]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224a:	f7fe fc99 	bl	8000b80 <HAL_GetTick>
 800224e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002250:	e009      	b.n	8002266 <HAL_RCC_OscConfig+0x6f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002252:	f7fe fc95 	bl	8000b80 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d902      	bls.n	8002266 <HAL_RCC_OscConfig+0x6f6>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	f000 bd9a 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002266:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0ef      	beq.n	8002252 <HAL_RCC_OscConfig+0x6e2>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d076      	beq.n	8002368 <HAL_RCC_OscConfig+0x7f8>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800227a:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 800227c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002280:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_RCC_OscConfig+0x72e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002292:	d004      	beq.n	800229e <HAL_RCC_OscConfig+0x72e>
 8002294:	f240 313b 	movw	r1, #827	; 0x33b
 8002298:	4814      	ldr	r0, [pc, #80]	; (80022ec <HAL_RCC_OscConfig+0x77c>)
 800229a:	f7fe fac4 	bl	8000826 <assert_failed>

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d03f      	beq.n	800232c <HAL_RCC_OscConfig+0x7bc>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <HAL_RCC_OscConfig+0x756>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <HAL_RCC_OscConfig+0x756>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f000 bd6a 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d022      	beq.n	8002316 <HAL_RCC_OscConfig+0x7a6>
        {
          __HAL_RCC_LSI_DISABLE();
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 80022d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022d6:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <HAL_RCC_OscConfig+0x778>)
 80022d8:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80022dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80022e0:	f7fe fc4e 	bl	8000b80 <HAL_GetTick>
 80022e4:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80022e6:	e00f      	b.n	8002308 <HAL_RCC_OscConfig+0x798>
 80022e8:	46020c00 	.word	0x46020c00
 80022ec:	08008500 	.word	0x08008500
 80022f0:	46020800 	.word	0x46020800
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f4:	f7fe fc44 	bl	8000b80 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b05      	cmp	r3, #5
 8002300:	d902      	bls.n	8002308 <HAL_RCC_OscConfig+0x798>
            {
              return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	f000 bd49 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002308:	4baa      	ldr	r3, [pc, #680]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 800230a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800230e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ee      	bne.n	80022f4 <HAL_RCC_OscConfig+0x784>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002316:	4ba7      	ldr	r3, [pc, #668]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 8002318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800231c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	49a3      	ldr	r1, [pc, #652]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800232c:	4ba1      	ldr	r3, [pc, #644]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 800232e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002332:	4aa0      	ldr	r2, [pc, #640]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 8002334:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002338:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800233c:	f7fe fc20 	bl	8000b80 <HAL_GetTick>
 8002340:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002342:	e009      	b.n	8002358 <HAL_RCC_OscConfig+0x7e8>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002344:	f7fe fc1c 	bl	8000b80 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b05      	cmp	r3, #5
 8002350:	d902      	bls.n	8002358 <HAL_RCC_OscConfig+0x7e8>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	f000 bd21 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002358:	4b96      	ldr	r3, [pc, #600]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 800235a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800235e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0ee      	beq.n	8002344 <HAL_RCC_OscConfig+0x7d4>
 8002366:	e01c      	b.n	80023a2 <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002368:	4b92      	ldr	r3, [pc, #584]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 800236a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800236e:	4a91      	ldr	r2, [pc, #580]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 8002370:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002374:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002378:	f7fe fc02 	bl	8000b80 <HAL_GetTick>
 800237c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800237e:	e009      	b.n	8002394 <HAL_RCC_OscConfig+0x824>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002380:	f7fe fbfe 	bl	8000b80 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b05      	cmp	r3, #5
 800238c:	d902      	bls.n	8002394 <HAL_RCC_OscConfig+0x824>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	f000 bd03 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002394:	4b87      	ldr	r3, [pc, #540]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 8002396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800239a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1ee      	bne.n	8002380 <HAL_RCC_OscConfig+0x810>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_OscConfig+0x84a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023aa:	4b82      	ldr	r3, [pc, #520]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 80023ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b0:	4a80      	ldr	r2, [pc, #512]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 80023b2:	f023 0304 	bic.w	r3, r3, #4
 80023b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8131 	beq.w	800262a <HAL_RCC_OscConfig+0xaba>
  {
    FlagStatus pwrclkchanged = RESET;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d014      	beq.n	8002400 <HAL_RCC_OscConfig+0x890>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b81      	cmp	r3, #129	; 0x81
 80023dc:	d010      	beq.n	8002400 <HAL_RCC_OscConfig+0x890>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d00c      	beq.n	8002400 <HAL_RCC_OscConfig+0x890>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b05      	cmp	r3, #5
 80023ec:	d008      	beq.n	8002400 <HAL_RCC_OscConfig+0x890>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b85      	cmp	r3, #133	; 0x85
 80023f4:	d004      	beq.n	8002400 <HAL_RCC_OscConfig+0x890>
 80023f6:	f240 3186 	movw	r1, #902	; 0x386
 80023fa:	486f      	ldr	r0, [pc, #444]	; (80025b8 <HAL_RCC_OscConfig+0xa48>)
 80023fc:	f7fe fa13 	bl	8000826 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002400:	4b6c      	ldr	r3, [pc, #432]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 8002402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	d111      	bne.n	8002432 <HAL_RCC_OscConfig+0x8c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	4b69      	ldr	r3, [pc, #420]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 8002410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002414:	4a67      	ldr	r2, [pc, #412]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800241e:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 8002420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800242c:	2301      	movs	r3, #1
 800242e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002432:	4b62      	ldr	r3, [pc, #392]	; (80025bc <HAL_RCC_OscConfig+0xa4c>)
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d119      	bne.n	8002472 <HAL_RCC_OscConfig+0x902>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800243e:	4b5f      	ldr	r3, [pc, #380]	; (80025bc <HAL_RCC_OscConfig+0xa4c>)
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	4a5e      	ldr	r2, [pc, #376]	; (80025bc <HAL_RCC_OscConfig+0xa4c>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244a:	f7fe fb99 	bl	8000b80 <HAL_GetTick>
 800244e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002450:	e009      	b.n	8002466 <HAL_RCC_OscConfig+0x8f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002452:	f7fe fb95 	bl	8000b80 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d902      	bls.n	8002466 <HAL_RCC_OscConfig+0x8f6>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	f000 bc9a 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002466:	4b55      	ldr	r3, [pc, #340]	; (80025bc <HAL_RCC_OscConfig+0xa4c>)
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0ef      	beq.n	8002452 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d01f      	beq.n	80024be <HAL_RCC_OscConfig+0x94e>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	d010      	beq.n	80024ac <HAL_RCC_OscConfig+0x93c>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800248a:	4b4a      	ldr	r3, [pc, #296]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 800248c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002490:	4a48      	ldr	r2, [pc, #288]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800249a:	4b46      	ldr	r3, [pc, #280]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 800249c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024a0:	4a44      	ldr	r2, [pc, #272]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024aa:	e018      	b.n	80024de <HAL_RCC_OscConfig+0x96e>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80024ac:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 80024ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024b2:	4a40      	ldr	r2, [pc, #256]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024bc:	e00f      	b.n	80024de <HAL_RCC_OscConfig+0x96e>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 80024c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024c4:	4a3b      	ldr	r2, [pc, #236]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80024ce:	4b39      	ldr	r3, [pc, #228]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 80024d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024d4:	4a37      	ldr	r2, [pc, #220]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 80024d6:	f023 0304 	bic.w	r3, r3, #4
 80024da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d056      	beq.n	8002594 <HAL_RCC_OscConfig+0xa24>
    {
      tickstart = HAL_GetTick();
 80024e6:	f7fe fb4b 	bl	8000b80 <HAL_GetTick>
 80024ea:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ec:	e00b      	b.n	8002506 <HAL_RCC_OscConfig+0x996>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ee:	f7fe fb47 	bl	8000b80 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d902      	bls.n	8002506 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	f000 bc4a 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002506:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 8002508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0ec      	beq.n	80024ee <HAL_RCC_OscConfig+0x97e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01c      	beq.n	800255a <HAL_RCC_OscConfig+0x9ea>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 8002522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002526:	4a23      	ldr	r2, [pc, #140]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 8002528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800252c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002530:	e00b      	b.n	800254a <HAL_RCC_OscConfig+0x9da>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7fe fb25 	bl	8000b80 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d902      	bls.n	800254a <HAL_RCC_OscConfig+0x9da>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	f000 bc28 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800254a:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 800254c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ec      	beq.n	8002532 <HAL_RCC_OscConfig+0x9c2>
 8002558:	e05b      	b.n	8002612 <HAL_RCC_OscConfig+0xaa2>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800255a:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 800255c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 8002562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002566:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800256a:	e00b      	b.n	8002584 <HAL_RCC_OscConfig+0xa14>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256c:	f7fe fb08 	bl	8000b80 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	; 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d902      	bls.n	8002584 <HAL_RCC_OscConfig+0xa14>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	f000 bc0b 	b.w	8002d9a <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_RCC_OscConfig+0xa44>)
 8002586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800258a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1ec      	bne.n	800256c <HAL_RCC_OscConfig+0x9fc>
 8002592:	e03e      	b.n	8002612 <HAL_RCC_OscConfig+0xaa2>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002594:	f7fe faf4 	bl	8000b80 <HAL_GetTick>
 8002598:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800259a:	e011      	b.n	80025c0 <HAL_RCC_OscConfig+0xa50>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259c:	f7fe faf0 	bl	8000b80 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d908      	bls.n	80025c0 <HAL_RCC_OscConfig+0xa50>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e3f3      	b.n	8002d9a <HAL_RCC_OscConfig+0x122a>
 80025b2:	bf00      	nop
 80025b4:	46020c00 	.word	0x46020c00
 80025b8:	08008500 	.word	0x08008500
 80025bc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c0:	4b62      	ldr	r3, [pc, #392]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 80025c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1e6      	bne.n	800259c <HAL_RCC_OscConfig+0xa2c>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80025ce:	4b5f      	ldr	r3, [pc, #380]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 80025d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01a      	beq.n	8002612 <HAL_RCC_OscConfig+0xaa2>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80025dc:	4b5b      	ldr	r3, [pc, #364]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 80025de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025e2:	4a5a      	ldr	r2, [pc, #360]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 80025e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_OscConfig+0xa94>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7fe fac7 	bl	8000b80 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0xa94>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e3ca      	b.n	8002d9a <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002604:	4b51      	ldr	r3, [pc, #324]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 8002606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800260a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1ed      	bne.n	80025ee <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002612:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002616:	2b01      	cmp	r3, #1
 8002618:	d107      	bne.n	800262a <HAL_RCC_OscConfig+0xaba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261a:	4b4c      	ldr	r3, [pc, #304]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 800261c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002620:	4a4a      	ldr	r2, [pc, #296]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 8002622:	f023 0304 	bic.w	r3, r3, #4
 8002626:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b00      	cmp	r3, #0
 8002634:	d044      	beq.n	80026c0 <HAL_RCC_OscConfig+0xb50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <HAL_RCC_OscConfig+0xae2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002646:	d004      	beq.n	8002652 <HAL_RCC_OscConfig+0xae2>
 8002648:	f44f 6181 	mov.w	r1, #1032	; 0x408
 800264c:	4840      	ldr	r0, [pc, #256]	; (8002750 <HAL_RCC_OscConfig+0xbe0>)
 800264e:	f7fe f8ea 	bl	8000826 <assert_failed>

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d019      	beq.n	800268e <HAL_RCC_OscConfig+0xb1e>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800265a:	4b3c      	ldr	r3, [pc, #240]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a3b      	ldr	r2, [pc, #236]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 8002660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002664:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002666:	f7fe fa8b 	bl	8000b80 <HAL_GetTick>
 800266a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0xb10>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800266e:	f7fe fa87 	bl	8000b80 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0xb10>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e38c      	b.n	8002d9a <HAL_RCC_OscConfig+0x122a>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002680:	4b32      	ldr	r3, [pc, #200]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0xafe>
 800268c:	e018      	b.n	80026c0 <HAL_RCC_OscConfig+0xb50>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800268e:	4b2f      	ldr	r3, [pc, #188]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a2e      	ldr	r2, [pc, #184]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 8002694:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002698:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800269a:	f7fe fa71 	bl	8000b80 <HAL_GetTick>
 800269e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0xb44>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026a2:	f7fe fa6d 	bl	8000b80 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0xb44>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e372      	b.n	8002d9a <HAL_RCC_OscConfig+0x122a>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80026b4:	4b25      	ldr	r3, [pc, #148]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0xb32>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d049      	beq.n	8002760 <HAL_RCC_OscConfig+0xbf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d009      	beq.n	80026e8 <HAL_RCC_OscConfig+0xb78>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026dc:	d004      	beq.n	80026e8 <HAL_RCC_OscConfig+0xb78>
 80026de:	f240 4131 	movw	r1, #1073	; 0x431
 80026e2:	481b      	ldr	r0, [pc, #108]	; (8002750 <HAL_RCC_OscConfig+0xbe0>)
 80026e4:	f7fe f89f 	bl	8000826 <assert_failed>

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d019      	beq.n	8002724 <HAL_RCC_OscConfig+0xbb4>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80026f0:	4b16      	ldr	r3, [pc, #88]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a15      	ldr	r2, [pc, #84]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 80026f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80026fc:	f7fe fa40 	bl	8000b80 <HAL_GetTick>
 8002700:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0xba6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002704:	f7fe fa3c 	bl	8000b80 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0xba6>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e341      	b.n	8002d9a <HAL_RCC_OscConfig+0x122a>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0xb94>
 8002722:	e01d      	b.n	8002760 <HAL_RCC_OscConfig+0xbf0>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a08      	ldr	r2, [pc, #32]	; (800274c <HAL_RCC_OscConfig+0xbdc>)
 800272a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800272e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002730:	f7fe fa26 	bl	8000b80 <HAL_GetTick>
 8002734:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002736:	e00d      	b.n	8002754 <HAL_RCC_OscConfig+0xbe4>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002738:	f7fe fa22 	bl	8000b80 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d906      	bls.n	8002754 <HAL_RCC_OscConfig+0xbe4>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e327      	b.n	8002d9a <HAL_RCC_OscConfig+0x122a>
 800274a:	bf00      	nop
 800274c:	46020c00 	.word	0x46020c00
 8002750:	08008500 	.word	0x08008500
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002754:	4b77      	ldr	r3, [pc, #476]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1eb      	bne.n	8002738 <HAL_RCC_OscConfig+0xbc8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80ed 	beq.w	8002948 <HAL_RCC_OscConfig+0xdd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_RCC_OscConfig+0xc18>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277a:	2b10      	cmp	r3, #16
 800277c:	d004      	beq.n	8002788 <HAL_RCC_OscConfig+0xc18>
 800277e:	f240 4159 	movw	r1, #1113	; 0x459
 8002782:	486d      	ldr	r0, [pc, #436]	; (8002938 <HAL_RCC_OscConfig+0xdc8>)
 8002784:	f7fe f84f 	bl	8000826 <assert_failed>
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	2b00      	cmp	r3, #0
 800278e:	d04f      	beq.n	8002830 <HAL_RCC_OscConfig+0xcc0>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002798:	d04a      	beq.n	8002830 <HAL_RCC_OscConfig+0xcc0>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027a2:	d045      	beq.n	8002830 <HAL_RCC_OscConfig+0xcc0>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027ac:	d040      	beq.n	8002830 <HAL_RCC_OscConfig+0xcc0>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027b6:	d03b      	beq.n	8002830 <HAL_RCC_OscConfig+0xcc0>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80027c0:	d036      	beq.n	8002830 <HAL_RCC_OscConfig+0xcc0>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80027ca:	d031      	beq.n	8002830 <HAL_RCC_OscConfig+0xcc0>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80027d4:	d02c      	beq.n	8002830 <HAL_RCC_OscConfig+0xcc0>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027de:	d027      	beq.n	8002830 <HAL_RCC_OscConfig+0xcc0>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80027e8:	d022      	beq.n	8002830 <HAL_RCC_OscConfig+0xcc0>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80027f2:	d01d      	beq.n	8002830 <HAL_RCC_OscConfig+0xcc0>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 80027fc:	d018      	beq.n	8002830 <HAL_RCC_OscConfig+0xcc0>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002806:	d013      	beq.n	8002830 <HAL_RCC_OscConfig+0xcc0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8002810:	d00e      	beq.n	8002830 <HAL_RCC_OscConfig+0xcc0>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800281a:	d009      	beq.n	8002830 <HAL_RCC_OscConfig+0xcc0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8002824:	d004      	beq.n	8002830 <HAL_RCC_OscConfig+0xcc0>
 8002826:	f240 415a 	movw	r1, #1114	; 0x45a
 800282a:	4843      	ldr	r0, [pc, #268]	; (8002938 <HAL_RCC_OscConfig+0xdc8>)
 800282c:	f7fd fffb 	bl	8000826 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	2bff      	cmp	r3, #255	; 0xff
 8002836:	d904      	bls.n	8002842 <HAL_RCC_OscConfig+0xcd2>
 8002838:	f240 415b 	movw	r1, #1115	; 0x45b
 800283c:	483e      	ldr	r0, [pc, #248]	; (8002938 <HAL_RCC_OscConfig+0xdc8>)
 800283e:	f7fd fff2 	bl	8000826 <assert_failed>

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002846:	2b00      	cmp	r3, #0
 8002848:	d060      	beq.n	800290c <HAL_RCC_OscConfig+0xd9c>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800284a:	4b3a      	ldr	r3, [pc, #232]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	4a39      	ldr	r2, [pc, #228]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 8002850:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002854:	6093      	str	r3, [r2, #8]
 8002856:	4b37      	ldr	r3, [pc, #220]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	4934      	ldr	r1, [pc, #208]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 8002864:	4313      	orrs	r3, r2
 8002866:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002870:	d309      	bcc.n	8002886 <HAL_RCC_OscConfig+0xd16>
 8002872:	4b30      	ldr	r3, [pc, #192]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f023 021f 	bic.w	r2, r3, #31
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	492d      	ldr	r1, [pc, #180]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 8002880:	4313      	orrs	r3, r2
 8002882:	60cb      	str	r3, [r1, #12]
 8002884:	e028      	b.n	80028d8 <HAL_RCC_OscConfig+0xd68>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2b00      	cmp	r3, #0
 800288c:	da0a      	bge.n	80028a4 <HAL_RCC_OscConfig+0xd34>
 800288e:	4b29      	ldr	r3, [pc, #164]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	015b      	lsls	r3, r3, #5
 800289c:	4925      	ldr	r1, [pc, #148]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	60cb      	str	r3, [r1, #12]
 80028a2:	e019      	b.n	80028d8 <HAL_RCC_OscConfig+0xd68>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ac:	d30a      	bcc.n	80028c4 <HAL_RCC_OscConfig+0xd54>
 80028ae:	4b21      	ldr	r3, [pc, #132]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	029b      	lsls	r3, r3, #10
 80028bc:	491d      	ldr	r1, [pc, #116]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	60cb      	str	r3, [r1, #12]
 80028c2:	e009      	b.n	80028d8 <HAL_RCC_OscConfig+0xd68>
 80028c4:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	03db      	lsls	r3, r3, #15
 80028d2:	4918      	ldr	r1, [pc, #96]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80028d8:	4b16      	ldr	r3, [pc, #88]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a15      	ldr	r2, [pc, #84]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 80028de:	f043 0310 	orr.w	r3, r3, #16
 80028e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80028e4:	f7fe f94c 	bl	8000b80 <HAL_GetTick>
 80028e8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0xd8e>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80028ec:	f7fe f948 	bl	8000b80 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xd8e>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e24d      	b.n	8002d9a <HAL_RCC_OscConfig+0x122a>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80028fe:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0xd7c>
 800290a:	e01d      	b.n	8002948 <HAL_RCC_OscConfig+0xdd8>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a08      	ldr	r2, [pc, #32]	; (8002934 <HAL_RCC_OscConfig+0xdc4>)
 8002912:	f023 0310 	bic.w	r3, r3, #16
 8002916:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002918:	f7fe f932 	bl	8000b80 <HAL_GetTick>
 800291c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800291e:	e00d      	b.n	800293c <HAL_RCC_OscConfig+0xdcc>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002920:	f7fe f92e 	bl	8000b80 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d906      	bls.n	800293c <HAL_RCC_OscConfig+0xdcc>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e233      	b.n	8002d9a <HAL_RCC_OscConfig+0x122a>
 8002932:	bf00      	nop
 8002934:	46020c00 	.word	0x46020c00
 8002938:	08008500 	.word	0x08008500
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800293c:	4b60      	ldr	r3, [pc, #384]	; (8002ac0 <HAL_RCC_OscConfig+0xf50>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1eb      	bne.n	8002920 <HAL_RCC_OscConfig+0xdb0>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00c      	beq.n	800296a <HAL_RCC_OscConfig+0xdfa>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	2b01      	cmp	r3, #1
 8002956:	d008      	beq.n	800296a <HAL_RCC_OscConfig+0xdfa>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	2b02      	cmp	r3, #2
 800295e:	d004      	beq.n	800296a <HAL_RCC_OscConfig+0xdfa>
 8002960:	f44f 6191 	mov.w	r1, #1160	; 0x488
 8002964:	4857      	ldr	r0, [pc, #348]	; (8002ac4 <HAL_RCC_OscConfig+0xf54>)
 8002966:	f7fd ff5e 	bl	8000826 <assert_failed>

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 8212 	beq.w	8002d98 <HAL_RCC_OscConfig+0x1228>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002974:	2300      	movs	r3, #0
 8002976:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800297a:	4b51      	ldr	r3, [pc, #324]	; (8002ac0 <HAL_RCC_OscConfig+0xf50>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b0c      	cmp	r3, #12
 8002984:	f000 818b 	beq.w	8002c9e <HAL_RCC_OscConfig+0x112e>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298c:	2b02      	cmp	r3, #2
 800298e:	f040 8164 	bne.w	8002c5a <HAL_RCC_OscConfig+0x10ea>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLMBOOST_VALUE(pRCC_OscInitStruct->PLL.PLLMBOOST));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	2b00      	cmp	r3, #0
 8002998:	d02c      	beq.n	80029f4 <HAL_RCC_OscConfig+0xe84>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a2:	d027      	beq.n	80029f4 <HAL_RCC_OscConfig+0xe84>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ac:	d022      	beq.n	80029f4 <HAL_RCC_OscConfig+0xe84>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029b6:	d01d      	beq.n	80029f4 <HAL_RCC_OscConfig+0xe84>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029c0:	d018      	beq.n	80029f4 <HAL_RCC_OscConfig+0xe84>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80029ca:	d013      	beq.n	80029f4 <HAL_RCC_OscConfig+0xe84>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80029d4:	d00e      	beq.n	80029f4 <HAL_RCC_OscConfig+0xe84>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80029de:	d009      	beq.n	80029f4 <HAL_RCC_OscConfig+0xe84>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029e8:	d004      	beq.n	80029f4 <HAL_RCC_OscConfig+0xe84>
 80029ea:	f240 4194 	movw	r1, #1172	; 0x494
 80029ee:	4835      	ldr	r0, [pc, #212]	; (8002ac4 <HAL_RCC_OscConfig+0xf54>)
 80029f0:	f7fd ff19 	bl	8000826 <assert_failed>
        assert_param(IS_RCC_PLLSOURCE(pRCC_OscInitStruct->PLL.PLLSource));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d00c      	beq.n	8002a16 <HAL_RCC_OscConfig+0xea6>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d008      	beq.n	8002a16 <HAL_RCC_OscConfig+0xea6>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d004      	beq.n	8002a16 <HAL_RCC_OscConfig+0xea6>
 8002a0c:	f240 4195 	movw	r1, #1173	; 0x495
 8002a10:	482c      	ldr	r0, [pc, #176]	; (8002ac4 <HAL_RCC_OscConfig+0xf54>)
 8002a12:	f7fd ff08 	bl	8000826 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(pRCC_OscInitStruct->PLL.PLLM));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_RCC_OscConfig+0xeb6>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d904      	bls.n	8002a30 <HAL_RCC_OscConfig+0xec0>
 8002a26:	f240 4196 	movw	r1, #1174	; 0x496
 8002a2a:	4826      	ldr	r0, [pc, #152]	; (8002ac4 <HAL_RCC_OscConfig+0xf54>)
 8002a2c:	f7fd fefb 	bl	8000826 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(pRCC_OscInitStruct->PLL.PLLN));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d904      	bls.n	8002a42 <HAL_RCC_OscConfig+0xed2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a40:	d904      	bls.n	8002a4c <HAL_RCC_OscConfig+0xedc>
 8002a42:	f240 4197 	movw	r1, #1175	; 0x497
 8002a46:	481f      	ldr	r0, [pc, #124]	; (8002ac4 <HAL_RCC_OscConfig+0xf54>)
 8002a48:	f7fd feed 	bl	8000826 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_RCC_OscConfig+0xeec>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a58:	2b80      	cmp	r3, #128	; 0x80
 8002a5a:	d904      	bls.n	8002a66 <HAL_RCC_OscConfig+0xef6>
 8002a5c:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8002a60:	4818      	ldr	r0, [pc, #96]	; (8002ac4 <HAL_RCC_OscConfig+0xf54>)
 8002a62:	f7fd fee0 	bl	8000826 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCC_OscConfig+0xf06>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a72:	2b80      	cmp	r3, #128	; 0x80
 8002a74:	d904      	bls.n	8002a80 <HAL_RCC_OscConfig+0xf10>
 8002a76:	f240 4199 	movw	r1, #1177	; 0x499
 8002a7a:	4812      	ldr	r0, [pc, #72]	; (8002ac4 <HAL_RCC_OscConfig+0xf54>)
 8002a7c:	f7fd fed3 	bl	8000826 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_RCC_OscConfig+0xf20>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8c:	2b80      	cmp	r3, #128	; 0x80
 8002a8e:	d904      	bls.n	8002a9a <HAL_RCC_OscConfig+0xf2a>
 8002a90:	f240 419a 	movw	r1, #1178	; 0x49a
 8002a94:	480b      	ldr	r0, [pc, #44]	; (8002ac4 <HAL_RCC_OscConfig+0xf54>)
 8002a96:	f7fd fec6 	bl	8000826 <assert_failed>

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_OscConfig+0xf50>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a08      	ldr	r2, [pc, #32]	; (8002ac0 <HAL_RCC_OscConfig+0xf50>)
 8002aa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aa4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002aa6:	f7fe f86b 	bl	8000b80 <HAL_GetTick>
 8002aaa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002aac:	e00c      	b.n	8002ac8 <HAL_RCC_OscConfig+0xf58>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aae:	f7fe f867 	bl	8000b80 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d905      	bls.n	8002ac8 <HAL_RCC_OscConfig+0xf58>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e16c      	b.n	8002d9a <HAL_RCC_OscConfig+0x122a>
 8002ac0:	46020c00 	.word	0x46020c00
 8002ac4:	08008500 	.word	0x08008500
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ac8:	4b98      	ldr	r3, [pc, #608]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ec      	bne.n	8002aae <HAL_RCC_OscConfig+0xf3e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad4:	4b95      	ldr	r3, [pc, #596]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d111      	bne.n	8002b06 <HAL_RCC_OscConfig+0xf96>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002ae2:	4b92      	ldr	r3, [pc, #584]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae8:	4a90      	ldr	r2, [pc, #576]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002aea:	f043 0304 	orr.w	r3, r3, #4
 8002aee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002af2:	4b8e      	ldr	r3, [pc, #568]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002b06:	4b8a      	ldr	r3, [pc, #552]	; (8002d30 <HAL_RCC_OscConfig+0x11c0>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b12:	d102      	bne.n	8002b1a <HAL_RCC_OscConfig+0xfaa>
        {
          pwrboosten = SET;
 8002b14:	2301      	movs	r3, #1
 8002b16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002b1a:	4b85      	ldr	r3, [pc, #532]	; (8002d30 <HAL_RCC_OscConfig+0x11c0>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	4a84      	ldr	r2, [pc, #528]	; (8002d30 <HAL_RCC_OscConfig+0x11c0>)
 8002b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b24:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002b26:	4b81      	ldr	r3, [pc, #516]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b2e:	f023 0303 	bic.w	r3, r3, #3
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b3a:	3a01      	subs	r2, #1
 8002b3c:	0212      	lsls	r2, r2, #8
 8002b3e:	4311      	orrs	r1, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b44:	430a      	orrs	r2, r1
 8002b46:	4979      	ldr	r1, [pc, #484]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	628b      	str	r3, [r1, #40]	; 0x28
 8002b4c:	4b77      	ldr	r3, [pc, #476]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b50:	4b78      	ldr	r3, [pc, #480]	; (8002d34 <HAL_RCC_OscConfig+0x11c4>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b58:	3a01      	subs	r2, #1
 8002b5a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b62:	3a01      	subs	r2, #1
 8002b64:	0252      	lsls	r2, r2, #9
 8002b66:	b292      	uxth	r2, r2
 8002b68:	4311      	orrs	r1, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b6e:	3a01      	subs	r2, #1
 8002b70:	0412      	lsls	r2, r2, #16
 8002b72:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002b76:	4311      	orrs	r1, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002b7c:	3a01      	subs	r2, #1
 8002b7e:	0612      	lsls	r2, r2, #24
 8002b80:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002b84:	430a      	orrs	r2, r1
 8002b86:	4969      	ldr	r1, [pc, #420]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLN,
                             pRCC_OscInitStruct->PLL.PLLP,
                             pRCC_OscInitStruct->PLL.PLLQ,
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b94:	d304      	bcc.n	8002ba0 <HAL_RCC_OscConfig+0x1030>
 8002b96:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8002b9a:	4867      	ldr	r0, [pc, #412]	; (8002d38 <HAL_RCC_OscConfig+0x11c8>)
 8002b9c:	f7fd fe43 	bl	8000826 <assert_failed>

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002ba0:	4b62      	ldr	r3, [pc, #392]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	4a61      	ldr	r2, [pc, #388]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002ba6:	f023 0310 	bic.w	r3, r3, #16
 8002baa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb0:	4a5e      	ldr	r2, [pc, #376]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002bb6:	4b5d      	ldr	r3, [pc, #372]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	4a5c      	ldr	r2, [pc, #368]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002bbc:	f043 0310 	orr.w	r3, r3, #16
 8002bc0:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <HAL_RCC_OscConfig+0x106c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	d004      	beq.n	8002bdc <HAL_RCC_OscConfig+0x106c>
 8002bd2:	f240 41cc 	movw	r1, #1228	; 0x4cc
 8002bd6:	4858      	ldr	r0, [pc, #352]	; (8002d38 <HAL_RCC_OscConfig+0x11c8>)
 8002bd8:	f7fd fe25 	bl	8000826 <assert_failed>

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002bdc:	4b53      	ldr	r3, [pc, #332]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	f023 020c 	bic.w	r2, r3, #12
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	4950      	ldr	r1, [pc, #320]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8002bee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d105      	bne.n	8002c02 <HAL_RCC_OscConfig+0x1092>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002bf6:	4b4e      	ldr	r3, [pc, #312]	; (8002d30 <HAL_RCC_OscConfig+0x11c0>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	4a4d      	ldr	r2, [pc, #308]	; (8002d30 <HAL_RCC_OscConfig+0x11c0>)
 8002bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c00:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002c02:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_OscConfig+0x10aa>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002c0a:	4b48      	ldr	r3, [pc, #288]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c10:	4a46      	ldr	r2, [pc, #280]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002c12:	f023 0304 	bic.w	r3, r3, #4
 8002c16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c1a:	4b44      	ldr	r3, [pc, #272]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	4a43      	ldr	r2, [pc, #268]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c24:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002c26:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a40      	ldr	r2, [pc, #256]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002c2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c30:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c32:	f7fd ffa5 	bl	8000b80 <HAL_GetTick>
 8002c36:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x10dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7fd ffa1 	bl	8000b80 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x10dc>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e0a6      	b.n	8002d9a <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002c4c:	4b37      	ldr	r3, [pc, #220]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x10ca>
 8002c58:	e09e      	b.n	8002d98 <HAL_RCC_OscConfig+0x1228>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002c5a:	4b34      	ldr	r3, [pc, #208]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a33      	ldr	r2, [pc, #204]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002c60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c64:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c66:	f7fd ff8b 	bl	8000b80 <HAL_GetTick>
 8002c6a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x1110>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6e:	f7fd ff87 	bl	8000b80 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x1110>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e08c      	b.n	8002d9a <HAL_RCC_OscConfig+0x122a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002c80:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0x10fe>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002c8c:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	4a26      	ldr	r2, [pc, #152]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002c92:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002c96:	f023 0303 	bic.w	r3, r3, #3
 8002c9a:	6293      	str	r3, [r2, #40]	; 0x28
 8002c9c:	e07c      	b.n	8002d98 <HAL_RCC_OscConfig+0x1228>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002c9e:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_RCC_OscConfig+0x11bc>)
 8002ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca8:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d039      	beq.n	8002d26 <HAL_RCC_OscConfig+0x11b6>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f003 0203 	and.w	r2, r3, #3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d132      	bne.n	8002d26 <HAL_RCC_OscConfig+0x11b6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d129      	bne.n	8002d26 <HAL_RCC_OscConfig+0x11b6>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d122      	bne.n	8002d26 <HAL_RCC_OscConfig+0x11b6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cea:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d11a      	bne.n	8002d26 <HAL_RCC_OscConfig+0x11b6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	0a5b      	lsrs	r3, r3, #9
 8002cf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d111      	bne.n	8002d26 <HAL_RCC_OscConfig+0x11b6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d108      	bne.n	8002d26 <HAL_RCC_OscConfig+0x11b6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	0e1b      	lsrs	r3, r3, #24
 8002d18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d20:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCC_OscConfig+0x11cc>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e037      	b.n	8002d9a <HAL_RCC_OscConfig+0x122a>
 8002d2a:	bf00      	nop
 8002d2c:	46020c00 	.word	0x46020c00
 8002d30:	46020800 	.word	0x46020800
 8002d34:	80800000 	.word	0x80800000
 8002d38:	08008500 	.word	0x08008500
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002d3c:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <HAL_RCC_OscConfig+0x1234>)
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	08db      	lsrs	r3, r3, #3
 8002d42:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d024      	beq.n	8002d98 <HAL_RCC_OscConfig+0x1228>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d56:	d304      	bcc.n	8002d62 <HAL_RCC_OscConfig+0x11f2>
 8002d58:	f240 511c 	movw	r1, #1308	; 0x51c
 8002d5c:	4812      	ldr	r0, [pc, #72]	; (8002da8 <HAL_RCC_OscConfig+0x1238>)
 8002d5e:	f7fd fd62 	bl	8000826 <assert_failed>

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002d62:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <HAL_RCC_OscConfig+0x1234>)
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	4a0f      	ldr	r2, [pc, #60]	; (8002da4 <HAL_RCC_OscConfig+0x1234>)
 8002d68:	f023 0310 	bic.w	r3, r3, #16
 8002d6c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fd ff07 	bl	8000b80 <HAL_GetTick>
 8002d72:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002d74:	bf00      	nop
 8002d76:	f7fd ff03 	bl	8000b80 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d0f9      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1206>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d86:	4a07      	ldr	r2, [pc, #28]	; (8002da4 <HAL_RCC_OscConfig+0x1234>)
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_RCC_OscConfig+0x1234>)
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <HAL_RCC_OscConfig+0x1234>)
 8002d92:	f043 0310 	orr.w	r3, r3, #16
 8002d96:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3738      	adds	r7, #56	; 0x38
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	46020c00 	.word	0x46020c00
 8002da8:	08008500 	.word	0x08008500

08002dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e326      	b.n	800340e <HAL_RCC_ClockConfig+0x662>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x24>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b1f      	cmp	r3, #31
 8002dce:	d904      	bls.n	8002dda <HAL_RCC_ClockConfig+0x2e>
 8002dd0:	f240 5164 	movw	r1, #1380	; 0x564
 8002dd4:	4827      	ldr	r0, [pc, #156]	; (8002e74 <HAL_RCC_ClockConfig+0xc8>)
 8002dd6:	f7fd fd26 	bl	8000826 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d031      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x98>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d02e      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x98>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d02b      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x98>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d028      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x98>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d025      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x98>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	d022      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x98>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b06      	cmp	r3, #6
 8002e02:	d01f      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x98>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	2b07      	cmp	r3, #7
 8002e08:	d01c      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x98>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d019      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x98>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2b09      	cmp	r3, #9
 8002e14:	d016      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x98>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b0a      	cmp	r3, #10
 8002e1a:	d013      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x98>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b0b      	cmp	r3, #11
 8002e20:	d010      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x98>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b0c      	cmp	r3, #12
 8002e26:	d00d      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x98>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b0d      	cmp	r3, #13
 8002e2c:	d00a      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x98>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b0e      	cmp	r3, #14
 8002e32:	d007      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x98>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b0f      	cmp	r3, #15
 8002e38:	d004      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x98>
 8002e3a:	f240 5165 	movw	r1, #1381	; 0x565
 8002e3e:	480d      	ldr	r0, [pc, #52]	; (8002e74 <HAL_RCC_ClockConfig+0xc8>)
 8002e40:	f7fd fcf1 	bl	8000826 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <HAL_RCC_ClockConfig+0xcc>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d914      	bls.n	8002e7c <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_RCC_ClockConfig+0xcc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 020f 	bic.w	r2, r3, #15
 8002e5a:	4907      	ldr	r1, [pc, #28]	; (8002e78 <HAL_RCC_ClockConfig+0xcc>)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_RCC_ClockConfig+0xcc>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e2cc      	b.n	800340e <HAL_RCC_ClockConfig+0x662>
 8002e74:	08008500 	.word	0x08008500
 8002e78:	40022000 	.word	0x40022000
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d029      	beq.n	8002edc <HAL_RCC_ClockConfig+0x130>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	4b8b      	ldr	r3, [pc, #556]	; (80030bc <HAL_RCC_ClockConfig+0x310>)
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d921      	bls.n	8002edc <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d014      	beq.n	8002eca <HAL_RCC_ClockConfig+0x11e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d010      	beq.n	8002eca <HAL_RCC_ClockConfig+0x11e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	2b50      	cmp	r3, #80	; 0x50
 8002eae:	d00c      	beq.n	8002eca <HAL_RCC_ClockConfig+0x11e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	2b60      	cmp	r3, #96	; 0x60
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x11e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	2b70      	cmp	r3, #112	; 0x70
 8002ebe:	d004      	beq.n	8002eca <HAL_RCC_ClockConfig+0x11e>
 8002ec0:	f240 517f 	movw	r1, #1407	; 0x57f
 8002ec4:	487e      	ldr	r0, [pc, #504]	; (80030c0 <HAL_RCC_ClockConfig+0x314>)
 8002ec6:	f7fd fcae 	bl	8000826 <assert_failed>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002eca:	4b7c      	ldr	r3, [pc, #496]	; (80030bc <HAL_RCC_ClockConfig+0x310>)
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	4979      	ldr	r1, [pc, #484]	; (80030bc <HAL_RCC_ClockConfig+0x310>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d02b      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x194>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	4b73      	ldr	r3, [pc, #460]	; (80030bc <HAL_RCC_ClockConfig+0x310>)
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d922      	bls.n	8002f40 <HAL_RCC_ClockConfig+0x194>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d014      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x180>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b40      	cmp	r3, #64	; 0x40
 8002f08:	d010      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x180>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b50      	cmp	r3, #80	; 0x50
 8002f10:	d00c      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x180>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	2b60      	cmp	r3, #96	; 0x60
 8002f18:	d008      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x180>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b70      	cmp	r3, #112	; 0x70
 8002f20:	d004      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x180>
 8002f22:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 8002f26:	4866      	ldr	r0, [pc, #408]	; (80030c0 <HAL_RCC_ClockConfig+0x314>)
 8002f28:	f7fd fc7d 	bl	8000826 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002f2c:	4b63      	ldr	r3, [pc, #396]	; (80030bc <HAL_RCC_ClockConfig+0x310>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	4960      	ldr	r1, [pc, #384]	; (80030bc <HAL_RCC_ClockConfig+0x310>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d029      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x1f4>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	4b5a      	ldr	r3, [pc, #360]	; (80030bc <HAL_RCC_ClockConfig+0x310>)
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d921      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0x1f4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d014      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x1e2>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2b40      	cmp	r3, #64	; 0x40
 8002f6a:	d010      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x1e2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2b50      	cmp	r3, #80	; 0x50
 8002f72:	d00c      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x1e2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	2b60      	cmp	r3, #96	; 0x60
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x1e2>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b70      	cmp	r3, #112	; 0x70
 8002f82:	d004      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x1e2>
 8002f84:	f240 5192 	movw	r1, #1426	; 0x592
 8002f88:	484d      	ldr	r0, [pc, #308]	; (80030c0 <HAL_RCC_ClockConfig+0x314>)
 8002f8a:	f7fd fc4c 	bl	8000826 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002f8e:	4b4b      	ldr	r3, [pc, #300]	; (80030bc <HAL_RCC_ClockConfig+0x310>)
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	4948      	ldr	r1, [pc, #288]	; (80030bc <HAL_RCC_ClockConfig+0x310>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d039      	beq.n	8003020 <HAL_RCC_ClockConfig+0x274>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	4b42      	ldr	r3, [pc, #264]	; (80030bc <HAL_RCC_ClockConfig+0x310>)
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d931      	bls.n	8003020 <HAL_RCC_ClockConfig+0x274>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d024      	beq.n	800300e <HAL_RCC_ClockConfig+0x262>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d020      	beq.n	800300e <HAL_RCC_ClockConfig+0x262>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b09      	cmp	r3, #9
 8002fd2:	d01c      	beq.n	800300e <HAL_RCC_ClockConfig+0x262>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b0a      	cmp	r3, #10
 8002fda:	d018      	beq.n	800300e <HAL_RCC_ClockConfig+0x262>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b0b      	cmp	r3, #11
 8002fe2:	d014      	beq.n	800300e <HAL_RCC_ClockConfig+0x262>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b0c      	cmp	r3, #12
 8002fea:	d010      	beq.n	800300e <HAL_RCC_ClockConfig+0x262>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b0d      	cmp	r3, #13
 8002ff2:	d00c      	beq.n	800300e <HAL_RCC_ClockConfig+0x262>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b0e      	cmp	r3, #14
 8002ffa:	d008      	beq.n	800300e <HAL_RCC_ClockConfig+0x262>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b0f      	cmp	r3, #15
 8003002:	d004      	beq.n	800300e <HAL_RCC_ClockConfig+0x262>
 8003004:	f240 519c 	movw	r1, #1436	; 0x59c
 8003008:	482d      	ldr	r0, [pc, #180]	; (80030c0 <HAL_RCC_ClockConfig+0x314>)
 800300a:	f7fd fc0c 	bl	8000826 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800300e:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <HAL_RCC_ClockConfig+0x310>)
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f023 020f 	bic.w	r2, r3, #15
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4928      	ldr	r1, [pc, #160]	; (80030bc <HAL_RCC_ClockConfig+0x310>)
 800301c:	4313      	orrs	r3, r2
 800301e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80e8 	beq.w	80031fe <HAL_RCC_ClockConfig+0x452>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d010      	beq.n	8003058 <HAL_RCC_ClockConfig+0x2ac>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d00c      	beq.n	8003058 <HAL_RCC_ClockConfig+0x2ac>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d008      	beq.n	8003058 <HAL_RCC_ClockConfig+0x2ac>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b03      	cmp	r3, #3
 800304c:	d004      	beq.n	8003058 <HAL_RCC_ClockConfig+0x2ac>
 800304e:	f240 51a4 	movw	r1, #1444	; 0x5a4
 8003052:	481b      	ldr	r0, [pc, #108]	; (80030c0 <HAL_RCC_ClockConfig+0x314>)
 8003054:	f7fd fbe7 	bl	8000826 <assert_failed>
    FlagStatus  pwrclkchanged = RESET;
 8003058:	2300      	movs	r3, #0
 800305a:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b03      	cmp	r3, #3
 8003062:	d14a      	bne.n	80030fa <HAL_RCC_ClockConfig+0x34e>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003064:	4b15      	ldr	r3, [pc, #84]	; (80030bc <HAL_RCC_ClockConfig+0x310>)
 8003066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d110      	bne.n	8003094 <HAL_RCC_ClockConfig+0x2e8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003072:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_RCC_ClockConfig+0x310>)
 8003074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003078:	4a10      	ldr	r2, [pc, #64]	; (80030bc <HAL_RCC_ClockConfig+0x310>)
 800307a:	f043 0304 	orr.w	r3, r3, #4
 800307e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <HAL_RCC_ClockConfig+0x310>)
 8003084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003090:	2301      	movs	r3, #1
 8003092:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003094:	f7fd fd74 	bl	8000b80 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800309a:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <HAL_RCC_ClockConfig+0x318>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d016      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x328>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80030a6:	e00f      	b.n	80030c8 <HAL_RCC_ClockConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80030a8:	f7fd fd6a 	bl	8000b80 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d908      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e1a9      	b.n	800340e <HAL_RCC_ClockConfig+0x662>
 80030ba:	bf00      	nop
 80030bc:	46020c00 	.word	0x46020c00
 80030c0:	08008500 	.word	0x08008500
 80030c4:	46020800 	.word	0x46020800
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80030c8:	4b79      	ldr	r3, [pc, #484]	; (80032b0 <HAL_RCC_ClockConfig+0x504>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0e9      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x2fc>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0x33e>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80030da:	4b76      	ldr	r3, [pc, #472]	; (80032b4 <HAL_RCC_ClockConfig+0x508>)
 80030dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e0:	4a74      	ldr	r2, [pc, #464]	; (80032b4 <HAL_RCC_ClockConfig+0x508>)
 80030e2:	f023 0304 	bic.w	r3, r3, #4
 80030e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80030ea:	4b72      	ldr	r3, [pc, #456]	; (80032b4 <HAL_RCC_ClockConfig+0x508>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d121      	bne.n	800313a <HAL_RCC_ClockConfig+0x38e>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e189      	b.n	800340e <HAL_RCC_ClockConfig+0x662>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0x366>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003102:	4b6c      	ldr	r3, [pc, #432]	; (80032b4 <HAL_RCC_ClockConfig+0x508>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d115      	bne.n	800313a <HAL_RCC_ClockConfig+0x38e>
        {
          return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e17d      	b.n	800340e <HAL_RCC_ClockConfig+0x662>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0x37e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800311a:	4b66      	ldr	r3, [pc, #408]	; (80032b4 <HAL_RCC_ClockConfig+0x508>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_RCC_ClockConfig+0x38e>
        {
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e171      	b.n	800340e <HAL_RCC_ClockConfig+0x662>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800312a:	4b62      	ldr	r3, [pc, #392]	; (80032b4 <HAL_RCC_ClockConfig+0x508>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_ClockConfig+0x38e>
        {
          return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e169      	b.n	800340e <HAL_RCC_ClockConfig+0x662>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800313a:	4b5e      	ldr	r3, [pc, #376]	; (80032b4 <HAL_RCC_ClockConfig+0x508>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	495b      	ldr	r1, [pc, #364]	; (80032b4 <HAL_RCC_ClockConfig+0x508>)
 8003148:	4313      	orrs	r3, r2
 800314a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800314c:	f7fd fd18 	bl	8000b80 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d112      	bne.n	8003180 <HAL_RCC_ClockConfig+0x3d4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800315a:	e00a      	b.n	8003172 <HAL_RCC_ClockConfig+0x3c6>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800315c:	f7fd fd10 	bl	8000b80 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f241 3288 	movw	r2, #5000	; 0x1388
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_ClockConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e14d      	b.n	800340e <HAL_RCC_ClockConfig+0x662>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003172:	4b50      	ldr	r3, [pc, #320]	; (80032b4 <HAL_RCC_ClockConfig+0x508>)
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b0c      	cmp	r3, #12
 800317c:	d1ee      	bne.n	800315c <HAL_RCC_ClockConfig+0x3b0>
 800317e:	e03e      	b.n	80031fe <HAL_RCC_ClockConfig+0x452>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b02      	cmp	r3, #2
 8003186:	d112      	bne.n	80031ae <HAL_RCC_ClockConfig+0x402>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003188:	e00a      	b.n	80031a0 <HAL_RCC_ClockConfig+0x3f4>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800318a:	f7fd fcf9 	bl	8000b80 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f241 3288 	movw	r2, #5000	; 0x1388
 8003198:	4293      	cmp	r3, r2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_ClockConfig+0x3f4>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e136      	b.n	800340e <HAL_RCC_ClockConfig+0x662>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031a0:	4b44      	ldr	r3, [pc, #272]	; (80032b4 <HAL_RCC_ClockConfig+0x508>)
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	f003 030c 	and.w	r3, r3, #12
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d1ee      	bne.n	800318a <HAL_RCC_ClockConfig+0x3de>
 80031ac:	e027      	b.n	80031fe <HAL_RCC_ClockConfig+0x452>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d11d      	bne.n	80031f2 <HAL_RCC_ClockConfig+0x446>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_ClockConfig+0x422>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b8:	f7fd fce2 	bl	8000b80 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_ClockConfig+0x422>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e11f      	b.n	800340e <HAL_RCC_ClockConfig+0x662>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80031ce:	4b39      	ldr	r3, [pc, #228]	; (80032b4 <HAL_RCC_ClockConfig+0x508>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ee      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x40c>
 80031da:	e010      	b.n	80031fe <HAL_RCC_ClockConfig+0x452>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031dc:	f7fd fcd0 	bl	8000b80 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_ClockConfig+0x446>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e10d      	b.n	800340e <HAL_RCC_ClockConfig+0x662>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031f2:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <HAL_RCC_ClockConfig+0x508>)
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d1ee      	bne.n	80031dc <HAL_RCC_ClockConfig+0x430>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d039      	beq.n	800327e <HAL_RCC_ClockConfig+0x4d2>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	4b29      	ldr	r3, [pc, #164]	; (80032b4 <HAL_RCC_ClockConfig+0x508>)
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	429a      	cmp	r2, r3
 8003218:	d231      	bcs.n	800327e <HAL_RCC_ClockConfig+0x4d2>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d024      	beq.n	800326c <HAL_RCC_ClockConfig+0x4c0>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b08      	cmp	r3, #8
 8003228:	d020      	beq.n	800326c <HAL_RCC_ClockConfig+0x4c0>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b09      	cmp	r3, #9
 8003230:	d01c      	beq.n	800326c <HAL_RCC_ClockConfig+0x4c0>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b0a      	cmp	r3, #10
 8003238:	d018      	beq.n	800326c <HAL_RCC_ClockConfig+0x4c0>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b0b      	cmp	r3, #11
 8003240:	d014      	beq.n	800326c <HAL_RCC_ClockConfig+0x4c0>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b0c      	cmp	r3, #12
 8003248:	d010      	beq.n	800326c <HAL_RCC_ClockConfig+0x4c0>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b0d      	cmp	r3, #13
 8003250:	d00c      	beq.n	800326c <HAL_RCC_ClockConfig+0x4c0>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b0e      	cmp	r3, #14
 8003258:	d008      	beq.n	800326c <HAL_RCC_ClockConfig+0x4c0>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	d004      	beq.n	800326c <HAL_RCC_ClockConfig+0x4c0>
 8003262:	f240 611f 	movw	r1, #1567	; 0x61f
 8003266:	4814      	ldr	r0, [pc, #80]	; (80032b8 <HAL_RCC_ClockConfig+0x50c>)
 8003268:	f7fd fadd 	bl	8000826 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800326c:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <HAL_RCC_ClockConfig+0x508>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f023 020f 	bic.w	r2, r3, #15
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	490e      	ldr	r1, [pc, #56]	; (80032b4 <HAL_RCC_ClockConfig+0x508>)
 800327a:	4313      	orrs	r3, r2
 800327c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800327e:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <HAL_RCC_ClockConfig+0x510>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d219      	bcs.n	80032c0 <HAL_RCC_ClockConfig+0x514>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <HAL_RCC_ClockConfig+0x510>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f023 020f 	bic.w	r2, r3, #15
 8003294:	4909      	ldr	r1, [pc, #36]	; (80032bc <HAL_RCC_ClockConfig+0x510>)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	4313      	orrs	r3, r2
 800329a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800329c:	4b07      	ldr	r3, [pc, #28]	; (80032bc <HAL_RCC_ClockConfig+0x510>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d00a      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x514>
    {
      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e0af      	b.n	800340e <HAL_RCC_ClockConfig+0x662>
 80032ae:	bf00      	nop
 80032b0:	46020800 	.word	0x46020800
 80032b4:	46020c00 	.word	0x46020c00
 80032b8:	08008500 	.word	0x08008500
 80032bc:	40022000 	.word	0x40022000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d029      	beq.n	8003320 <HAL_RCC_ClockConfig+0x574>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	4b51      	ldr	r3, [pc, #324]	; (8003418 <HAL_RCC_ClockConfig+0x66c>)
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032d8:	429a      	cmp	r2, r3
 80032da:	d221      	bcs.n	8003320 <HAL_RCC_ClockConfig+0x574>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d014      	beq.n	800330e <HAL_RCC_ClockConfig+0x562>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	2b40      	cmp	r3, #64	; 0x40
 80032ea:	d010      	beq.n	800330e <HAL_RCC_ClockConfig+0x562>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2b50      	cmp	r3, #80	; 0x50
 80032f2:	d00c      	beq.n	800330e <HAL_RCC_ClockConfig+0x562>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b60      	cmp	r3, #96	; 0x60
 80032fa:	d008      	beq.n	800330e <HAL_RCC_ClockConfig+0x562>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b70      	cmp	r3, #112	; 0x70
 8003302:	d004      	beq.n	800330e <HAL_RCC_ClockConfig+0x562>
 8003304:	f240 6137 	movw	r1, #1591	; 0x637
 8003308:	4844      	ldr	r0, [pc, #272]	; (800341c <HAL_RCC_ClockConfig+0x670>)
 800330a:	f7fd fa8c 	bl	8000826 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800330e:	4b42      	ldr	r3, [pc, #264]	; (8003418 <HAL_RCC_ClockConfig+0x66c>)
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	493f      	ldr	r1, [pc, #252]	; (8003418 <HAL_RCC_ClockConfig+0x66c>)
 800331c:	4313      	orrs	r3, r2
 800331e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	d02b      	beq.n	8003384 <HAL_RCC_ClockConfig+0x5d8>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	4b39      	ldr	r3, [pc, #228]	; (8003418 <HAL_RCC_ClockConfig+0x66c>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800333a:	429a      	cmp	r2, r3
 800333c:	d222      	bcs.n	8003384 <HAL_RCC_ClockConfig+0x5d8>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d014      	beq.n	8003370 <HAL_RCC_ClockConfig+0x5c4>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	2b40      	cmp	r3, #64	; 0x40
 800334c:	d010      	beq.n	8003370 <HAL_RCC_ClockConfig+0x5c4>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b50      	cmp	r3, #80	; 0x50
 8003354:	d00c      	beq.n	8003370 <HAL_RCC_ClockConfig+0x5c4>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b60      	cmp	r3, #96	; 0x60
 800335c:	d008      	beq.n	8003370 <HAL_RCC_ClockConfig+0x5c4>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b70      	cmp	r3, #112	; 0x70
 8003364:	d004      	beq.n	8003370 <HAL_RCC_ClockConfig+0x5c4>
 8003366:	f240 6141 	movw	r1, #1601	; 0x641
 800336a:	482c      	ldr	r0, [pc, #176]	; (800341c <HAL_RCC_ClockConfig+0x670>)
 800336c:	f7fd fa5b 	bl	8000826 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003370:	4b29      	ldr	r3, [pc, #164]	; (8003418 <HAL_RCC_ClockConfig+0x66c>)
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	4926      	ldr	r1, [pc, #152]	; (8003418 <HAL_RCC_ClockConfig+0x66c>)
 8003380:	4313      	orrs	r3, r2
 8003382:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	d029      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x638>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	4b20      	ldr	r3, [pc, #128]	; (8003418 <HAL_RCC_ClockConfig+0x66c>)
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800339c:	429a      	cmp	r2, r3
 800339e:	d221      	bcs.n	80033e4 <HAL_RCC_ClockConfig+0x638>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d014      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x626>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d010      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x626>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	2b50      	cmp	r3, #80	; 0x50
 80033b6:	d00c      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x626>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	2b60      	cmp	r3, #96	; 0x60
 80033be:	d008      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x626>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	2b70      	cmp	r3, #112	; 0x70
 80033c6:	d004      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x626>
 80033c8:	f240 614b 	movw	r1, #1611	; 0x64b
 80033cc:	4813      	ldr	r0, [pc, #76]	; (800341c <HAL_RCC_ClockConfig+0x670>)
 80033ce:	f7fd fa2a 	bl	8000826 <assert_failed>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80033d2:	4b11      	ldr	r3, [pc, #68]	; (8003418 <HAL_RCC_ClockConfig+0x66c>)
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	490e      	ldr	r1, [pc, #56]	; (8003418 <HAL_RCC_ClockConfig+0x66c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80033e4:	f000 f822 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_ClockConfig+0x66c>)
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	490b      	ldr	r1, [pc, #44]	; (8003420 <HAL_RCC_ClockConfig+0x674>)
 80033f4:	5ccb      	ldrb	r3, [r1, r3]
 80033f6:	fa22 f303 	lsr.w	r3, r2, r3
 80033fa:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <HAL_RCC_ClockConfig+0x678>)
 80033fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <HAL_RCC_ClockConfig+0x67c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd fb72 	bl	8000aec <HAL_InitTick>
 8003408:	4603      	mov	r3, r0
 800340a:	73fb      	strb	r3, [r7, #15]

  return status;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	46020c00 	.word	0x46020c00
 800341c:	08008500 	.word	0x08008500
 8003420:	080085ec 	.word	0x080085ec
 8003424:	20000000 	.word	0x20000000
 8003428:	20000004 	.word	0x20000004

0800342c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800342c:	b480      	push	{r7}
 800342e:	b08b      	sub	sp, #44	; 0x2c
 8003430:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800343a:	4b7b      	ldr	r3, [pc, #492]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003444:	4b78      	ldr	r3, [pc, #480]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x34>
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2b0c      	cmp	r3, #12
 8003458:	d121      	bne.n	800349e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d11e      	bne.n	800349e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003460:	4b71      	ldr	r3, [pc, #452]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d107      	bne.n	800347c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800346c:	4b6e      	ldr	r3, [pc, #440]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800346e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003472:	0b1b      	lsrs	r3, r3, #12
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
 800347a:	e005      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800347c:	4b6a      	ldr	r3, [pc, #424]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	0f1b      	lsrs	r3, r3, #28
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003488:	4a68      	ldr	r2, [pc, #416]	; (800362c <HAL_RCC_GetSysClockFreq+0x200>)
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003490:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d110      	bne.n	80034ba <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800349c:	e00d      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800349e:	4b62      	ldr	r3, [pc, #392]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d102      	bne.n	80034b0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034aa:	4b61      	ldr	r3, [pc, #388]	; (8003630 <HAL_RCC_GetSysClockFreq+0x204>)
 80034ac:	623b      	str	r3, [r7, #32]
 80034ae:	e004      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d101      	bne.n	80034ba <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034b6:	4b5e      	ldr	r3, [pc, #376]	; (8003630 <HAL_RCC_GetSysClockFreq+0x204>)
 80034b8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	2b0c      	cmp	r3, #12
 80034be:	f040 80ac 	bne.w	800361a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80034c2:	4b59      	ldr	r3, [pc, #356]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80034cc:	4b56      	ldr	r3, [pc, #344]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	0a1b      	lsrs	r3, r3, #8
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	3301      	adds	r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80034da:	4b53      	ldr	r3, [pc, #332]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	091b      	lsrs	r3, r3, #4
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80034e6:	4b50      	ldr	r3, [pc, #320]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	08db      	lsrs	r3, r3, #3
 80034ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	fb02 f303 	mul.w	r3, r2, r3
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fe:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8086 	beq.w	8003616 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2b02      	cmp	r3, #2
 800350e:	d003      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0xec>
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d022      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0x130>
 8003516:	e043      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003522:	eddf 6a44 	vldr	s13, [pc, #272]	; 8003634 <HAL_RCC_GetSysClockFreq+0x208>
 8003526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800352a:	4b3f      	ldr	r3, [pc, #252]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800352c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003532:	ee07 3a90 	vmov	s15, r3
 8003536:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800353a:	ed97 6a01 	vldr	s12, [r7, #4]
 800353e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003638 <HAL_RCC_GetSysClockFreq+0x20c>
 8003542:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003546:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800354a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800354e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003556:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800355a:	e046      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	ee07 3a90 	vmov	s15, r3
 8003562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003566:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003634 <HAL_RCC_GetSysClockFreq+0x208>
 800356a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800356e:	4b2e      	ldr	r3, [pc, #184]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800357e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003582:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003638 <HAL_RCC_GetSysClockFreq+0x20c>
 8003586:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800358a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800358e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003592:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800359e:	e024      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	ee07 3a90 	vmov	s15, r3
 80035b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035b8:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80035ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c0:	ee07 3a90 	vmov	s15, r3
 80035c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80035c8:	ed97 6a01 	vldr	s12, [r7, #4]
 80035cc:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8003638 <HAL_RCC_GetSysClockFreq+0x20c>
 80035d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80035d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e4:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80035e8:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80035ea:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80035ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ee:	0e1b      	lsrs	r3, r3, #24
 80035f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035f4:	3301      	adds	r3, #1
 80035f6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003602:	edd7 6a07 	vldr	s13, [r7, #28]
 8003606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800360a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800360e:	ee17 3a90 	vmov	r3, s15
 8003612:	623b      	str	r3, [r7, #32]
 8003614:	e001      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800361a:	6a3b      	ldr	r3, [r7, #32]
}
 800361c:	4618      	mov	r0, r3
 800361e:	372c      	adds	r7, #44	; 0x2c
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	46020c00 	.word	0x46020c00
 800362c:	08008604 	.word	0x08008604
 8003630:	00f42400 	.word	0x00f42400
 8003634:	4b742400 	.word	0x4b742400
 8003638:	46000000 	.word	0x46000000

0800363c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003640:	f7ff fef4 	bl	800342c <HAL_RCC_GetSysClockFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b07      	ldr	r3, [pc, #28]	; (8003664 <HAL_RCC_GetHCLKFreq+0x28>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	4906      	ldr	r1, [pc, #24]	; (8003668 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003650:	5ccb      	ldrb	r3, [r1, r3]
 8003652:	fa22 f303 	lsr.w	r3, r2, r3
 8003656:	4a05      	ldr	r2, [pc, #20]	; (800366c <HAL_RCC_GetHCLKFreq+0x30>)
 8003658:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800365a:	4b04      	ldr	r3, [pc, #16]	; (800366c <HAL_RCC_GetHCLKFreq+0x30>)
 800365c:	681b      	ldr	r3, [r3, #0]
}
 800365e:	4618      	mov	r0, r3
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	46020c00 	.word	0x46020c00
 8003668:	080085ec 	.word	0x080085ec
 800366c:	20000000 	.word	0x20000000

08003670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003674:	f7ff ffe2 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	4903      	ldr	r1, [pc, #12]	; (8003694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003686:	5ccb      	ldrb	r3, [r1, r3]
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}
 8003690:	46020c00 	.word	0x46020c00
 8003694:	080085fc 	.word	0x080085fc

08003698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800369c:	f7ff ffce 	bl	800363c <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	0a1b      	lsrs	r3, r3, #8
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4903      	ldr	r1, [pc, #12]	; (80036bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	46020c00 	.word	0x46020c00
 80036bc:	080085fc 	.word	0x080085fc

080036c0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80036c4:	f7ff ffba 	bl	800363c <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetPCLK3Freq+0x20>)
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4903      	ldr	r1, [pc, #12]	; (80036e4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	46020c00 	.word	0x46020c00
 80036e4:	080085fc 	.word	0x080085fc

080036e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036f0:	4b3e      	ldr	r3, [pc, #248]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036fe:	f7fe f9bf 	bl	8001a80 <HAL_PWREx_GetVoltageRange>
 8003702:	6178      	str	r0, [r7, #20]
 8003704:	e019      	b.n	800373a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	4b39      	ldr	r3, [pc, #228]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800370c:	4a37      	ldr	r2, [pc, #220]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800370e:	f043 0304 	orr.w	r3, r3, #4
 8003712:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003716:	4b35      	ldr	r3, [pc, #212]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003724:	f7fe f9ac 	bl	8001a80 <HAL_PWREx_GetVoltageRange>
 8003728:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800372a:	4b30      	ldr	r3, [pc, #192]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800372c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003730:	4a2e      	ldr	r2, [pc, #184]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003732:	f023 0304 	bic.w	r3, r3, #4
 8003736:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003740:	d003      	beq.n	800374a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003748:	d109      	bne.n	800375e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003750:	d202      	bcs.n	8003758 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003752:	2301      	movs	r3, #1
 8003754:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003756:	e033      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800375c:	e030      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003764:	d208      	bcs.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376c:	d102      	bne.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800376e:	2303      	movs	r3, #3
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	e025      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e035      	b.n	80037e4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800377e:	d90f      	bls.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800378c:	d902      	bls.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	e015      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003794:	2301      	movs	r3, #1
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	e012      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	e00f      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037a6:	d109      	bne.n	80037bc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ae:	d102      	bne.n	80037b6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80037b0:	2301      	movs	r3, #1
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	e004      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80037b6:	2302      	movs	r3, #2
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	e001      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80037bc:	2301      	movs	r3, #1
 80037be:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 020f 	bic.w	r2, r3, #15
 80037c8:	4909      	ldr	r1, [pc, #36]	; (80037f0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80037d0:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d001      	beq.n	80037e2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	46020c00 	.word	0x46020c00
 80037f0:	40022000 	.word	0x40022000

080037f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80037f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f8:	b0be      	sub	sp, #248	; 0xf8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003800:	2300      	movs	r3, #0
 8003802:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003806:	2300      	movs	r3, #0
 8003808:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));
 800380c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	f022 4460 	bic.w	r4, r2, #3758096384	; 0xe0000000
 8003818:	2500      	movs	r5, #0
 800381a:	ea54 0305 	orrs.w	r3, r4, r5
 800381e:	d009      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003828:	f002 4860 	and.w	r8, r2, #3758096384	; 0xe0000000
 800382c:	4699      	mov	r9, r3
 800382e:	ea58 0309 	orrs.w	r3, r8, r9
 8003832:	d004      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003834:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8003838:	48bc      	ldr	r0, [pc, #752]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800383a:	f7fc fff4 	bl	8000826 <assert_failed>

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800383e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	f002 0a01 	and.w	sl, r2, #1
 800384a:	f04f 0b00 	mov.w	fp, #0
 800384e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003852:	d024      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));
 8003854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385a:	2b00      	cmp	r3, #0
 800385c:	d013      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x92>
 800385e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003864:	2b01      	cmp	r3, #1
 8003866:	d00e      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8003868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800386c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800386e:	2b02      	cmp	r3, #2
 8003870:	d009      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8003872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003878:	2b03      	cmp	r3, #3
 800387a:	d004      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x92>
 800387c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8003880:	48aa      	ldr	r0, [pc, #680]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003882:	f7fc ffd0 	bl	8000826 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003886:	4baa      	ldr	r3, [pc, #680]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800388c:	f023 0103 	bic.w	r1, r3, #3
 8003890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003896:	4aa6      	ldr	r2, [pc, #664]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003898:	430b      	orrs	r3, r1
 800389a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a6:	f002 0302 	and.w	r3, r2, #2
 80038aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038ae:	2300      	movs	r3, #0
 80038b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80038b4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038b8:	460b      	mov	r3, r1
 80038ba:	4313      	orrs	r3, r2
 80038bc:	d024      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));
 80038be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d013      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80038c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d00e      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80038d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d009      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80038dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e2:	2b0c      	cmp	r3, #12
 80038e4:	d004      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80038e6:	f240 11c3 	movw	r1, #451	; 0x1c3
 80038ea:	4890      	ldr	r0, [pc, #576]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038ec:	f7fc ff9b 	bl	8000826 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80038f0:	4b8f      	ldr	r3, [pc, #572]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038f6:	f023 010c 	bic.w	r1, r3, #12
 80038fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003900:	4a8b      	ldr	r2, [pc, #556]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003902:	430b      	orrs	r3, r1
 8003904:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	f002 0304 	and.w	r3, r2, #4
 8003914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003918:	2300      	movs	r3, #0
 800391a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800391e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003922:	460b      	mov	r3, r1
 8003924:	4313      	orrs	r3, r2
 8003926:	d024      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));
 8003928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	2b00      	cmp	r3, #0
 8003930:	d013      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003938:	2b10      	cmp	r3, #16
 800393a:	d00e      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800393c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	2b20      	cmp	r3, #32
 8003944:	d009      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394c:	2b30      	cmp	r3, #48	; 0x30
 800394e:	d004      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003950:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8003954:	4875      	ldr	r0, [pc, #468]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003956:	f7fc ff66 	bl	8000826 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800395a:	4b75      	ldr	r3, [pc, #468]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800395c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003960:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	4a71      	ldr	r2, [pc, #452]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800396c:	430b      	orrs	r3, r1
 800396e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	f002 0308 	and.w	r3, r2, #8
 800397e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003982:	2300      	movs	r3, #0
 8003984:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003988:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800398c:	460b      	mov	r3, r1
 800398e:	4313      	orrs	r3, r2
 8003990:	d024      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));
 8003992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	2b00      	cmp	r3, #0
 800399a:	d013      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800399c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d00e      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80039a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ac:	2b80      	cmp	r3, #128	; 0x80
 80039ae:	d009      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80039b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b6:	2bc0      	cmp	r3, #192	; 0xc0
 80039b8:	d004      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80039ba:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80039be:	485b      	ldr	r0, [pc, #364]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039c0:	f7fc ff31 	bl	8000826 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80039c4:	4b5a      	ldr	r3, [pc, #360]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d4:	4a56      	ldr	r2, [pc, #344]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039d6:	430b      	orrs	r3, r1
 80039d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	f002 0310 	and.w	r3, r2, #16
 80039e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039ec:	2300      	movs	r3, #0
 80039ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4313      	orrs	r3, r2
 80039fa:	d027      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));
 80039fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d016      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a10:	d010      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a1c:	d00a      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a28:	d004      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003a2a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003a2e:	483f      	ldr	r0, [pc, #252]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a30:	f7fc fef9 	bl	8000826 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003a34:	4b3e      	ldr	r3, [pc, #248]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a44:	4a3a      	ldr	r2, [pc, #232]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a46:	430b      	orrs	r3, r1
 8003a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f002 0320 	and.w	r3, r2, #32
 8003a58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003a62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003a66:	460b      	mov	r3, r1
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	d029      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));
 8003a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d018      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d013      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d00e      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d009      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d004      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003a9e:	f240 11f7 	movw	r1, #503	; 0x1f7
 8003aa2:	4822      	ldr	r0, [pc, #136]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aa4:	f7fc febf 	bl	8000826 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003aa8:	4b21      	ldr	r3, [pc, #132]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aae:	f023 0107 	bic.w	r1, r3, #7
 8003ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab8:	4a1d      	ldr	r2, [pc, #116]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aba:	430b      	orrs	r3, r1
 8003abc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ad6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4313      	orrs	r3, r2
 8003ade:	d02d      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));
 8003ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af4:	d010      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b00:	d00a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b0c:	d004      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003b0e:	f240 2101 	movw	r1, #513	; 0x201
 8003b12:	4806      	ldr	r0, [pc, #24]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b14:	f7fc fe87 	bl	8000826 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b1e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b28:	e004      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x340>
 8003b2a:	bf00      	nop
 8003b2c:	08008538 	.word	0x08008538
 8003b30:	46020c00 	.word	0x46020c00
 8003b34:	4aab      	ldr	r2, [pc, #684]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b36:	430b      	orrs	r3, r1
 8003b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b44:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b52:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b56:	460b      	mov	r3, r1
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	d027      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));
 8003b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b70:	d010      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7c:	d00a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b88:	d004      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003b8a:	f240 210b 	movw	r1, #523	; 0x20b
 8003b8e:	4896      	ldr	r0, [pc, #600]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b90:	f7fc fe49 	bl	8000826 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003b94:	4b93      	ldr	r3, [pc, #588]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba4:	4a8f      	ldr	r2, [pc, #572]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ba6:	430b      	orrs	r3, r1
 8003ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb4:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003bc2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	d024      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));
 8003bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d013      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d00e      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	2b80      	cmp	r3, #128	; 0x80
 8003be8:	d009      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf0:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf2:	d004      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003bf4:	f240 2115 	movw	r1, #533	; 0x215
 8003bf8:	487b      	ldr	r0, [pc, #492]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003bfa:	f7fc fe14 	bl	8000826 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003bfe:	4b79      	ldr	r3, [pc, #484]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003c00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c04:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	4a75      	ldr	r2, [pc, #468]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003c10:	430b      	orrs	r3, r1
 8003c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003c22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c26:	2300      	movs	r3, #0
 8003c28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c2c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003c30:	460b      	mov	r3, r1
 8003c32:	4313      	orrs	r3, r2
 8003c34:	d027      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x492>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));
 8003c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d016      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c4a:	d010      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c62:	d004      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003c64:	f240 211f 	movw	r1, #543	; 0x21f
 8003c68:	485f      	ldr	r0, [pc, #380]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c6a:	f7fc fddc 	bl	8000826 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003c6e:	4b5d      	ldr	r3, [pc, #372]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c74:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8003c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7e:	4a59      	ldr	r2, [pc, #356]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003c80:	430b      	orrs	r3, r1
 8003c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8e:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c96:	2300      	movs	r3, #0
 8003c98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c9c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	d027      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x502>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003caa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d016      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8003cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cba:	d010      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8003cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc6:	d00a      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8003cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cd2:	d004      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8003cd4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003cd8:	4843      	ldr	r0, [pc, #268]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003cda:	f7fc fda4 	bl	8000826 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003cde:	4b41      	ldr	r3, [pc, #260]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ce4:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cee:	4a3d      	ldr	r2, [pc, #244]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003d02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d06:	2300      	movs	r3, #0
 8003d08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003d0c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003d10:	460b      	mov	r3, r1
 8003d12:	4313      	orrs	r3, r2
 8003d14:	d027      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
 8003d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d016      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8003d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d2a:	d010      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8003d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8003d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d42:	d004      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8003d44:	f240 2147 	movw	r1, #583	; 0x247
 8003d48:	4827      	ldr	r0, [pc, #156]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003d4a:	f7fc fd6c 	bl	8000826 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003d4e:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d54:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d5e:	4a21      	ldr	r2, [pc, #132]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d60:	430b      	orrs	r3, r1
 8003d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003d72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d76:	2300      	movs	r3, #0
 8003d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d7c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003d80:	460b      	mov	r3, r1
 8003d82:	4313      	orrs	r3, r2
 8003d84:	d032      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
 8003d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d019      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8003d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d9e:	d012      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8003da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dac:	d00b      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8003dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dba:	d004      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8003dbc:	f240 214e 	movw	r1, #590	; 0x24e
 8003dc0:	4809      	ldr	r0, [pc, #36]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003dc2:	f7fc fd30 	bl	8000826 <assert_failed>
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003dc6:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003dc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003dcc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd8:	4a02      	ldr	r2, [pc, #8]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003de0:	e004      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8003de2:	bf00      	nop
 8003de4:	46020c00 	.word	0x46020c00
 8003de8:	08008538 	.word	0x08008538
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df4:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003df8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003dfe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003e02:	460b      	mov	r3, r1
 8003e04:	4313      	orrs	r3, r2
 8003e06:	d06f      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));
 8003e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01c      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8003e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d016      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8003e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e28:	2b40      	cmp	r3, #64	; 0x40
 8003e2a:	d010      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8003e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e34:	2b60      	cmp	r3, #96	; 0x60
 8003e36:	d00a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8003e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	d004      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8003e44:	f240 2156 	movw	r1, #598	; 0x256
 8003e48:	48ab      	ldr	r0, [pc, #684]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 8003e4a:	f7fc fcec 	bl	8000826 <assert_failed>

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e56:	2b80      	cmp	r3, #128	; 0x80
 8003e58:	d02d      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003e5a:	2b80      	cmp	r3, #128	; 0x80
 8003e5c:	d827      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8003e5e:	2b60      	cmp	r3, #96	; 0x60
 8003e60:	d02b      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8003e62:	2b60      	cmp	r3, #96	; 0x60
 8003e64:	d823      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8003e66:	2b40      	cmp	r3, #64	; 0x40
 8003e68:	d006      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003e6a:	2b40      	cmp	r3, #64	; 0x40
 8003e6c:	d81f      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x692>
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	d011      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8003e76:	e01a      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e78:	4ba0      	ldr	r3, [pc, #640]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	4a9f      	ldr	r2, [pc, #636]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e82:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003e84:	e01a      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x6c8>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f002 fc25 	bl	80066dc <RCCEx_PLL2_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003e98:	e010      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x6c8>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9e:	332c      	adds	r3, #44	; 0x2c
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f002 fd07 	bl	80068b4 <RCCEx_PLL3_Config>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003eac:	e006      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x6c8>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8003eb4:	e002      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x6c8>
        break;
 8003eb6:	bf00      	nop
 8003eb8:	e000      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x6c8>
        break;
 8003eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ebc:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10d      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003ec4:	4b8d      	ldr	r3, [pc, #564]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003ec6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003eca:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	4a89      	ldr	r2, [pc, #548]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003ede:	e003      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee0:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003ee4:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003ef4:	673b      	str	r3, [r7, #112]	; 0x70
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	677b      	str	r3, [r7, #116]	; 0x74
 8003efa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003efe:	460b      	mov	r3, r1
 8003f00:	4313      	orrs	r3, r2
 8003f02:	d07a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x806>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));
 8003f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d020      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8003f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f1c:	d019      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8003f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f2a:	d012      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8003f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f38:	d00b      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8003f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f46:	d004      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8003f48:	f240 218a 	movw	r1, #650	; 0x28a
 8003f4c:	486a      	ldr	r0, [pc, #424]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 8003f4e:	f7fc fc6a 	bl	8000826 <assert_failed>

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5e:	d033      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8003f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f64:	d82c      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8003f66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f6a:	d02f      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8003f6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f70:	d826      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8003f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f76:	d008      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x796>
 8003f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f7c:	d820      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 8003f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f86:	d011      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8003f88:	e01a      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f8a:	4b5c      	ldr	r3, [pc, #368]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	4a5b      	ldr	r2, [pc, #364]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f94:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003f96:	e01a      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x7da>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f002 fb9c 	bl	80066dc <RCCEx_PLL2_Config>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003faa:	e010      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x7da>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb0:	332c      	adds	r3, #44	; 0x2c
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f002 fc7e 	bl	80068b4 <RCCEx_PLL3_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003fbe:	e006      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x7da>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8003fc6:	e002      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x7da>
        break;
 8003fc8:	bf00      	nop
 8003fca:	e000      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x7da>
        break;
 8003fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fce:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10d      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003fd6:	4b49      	ldr	r3, [pc, #292]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003fd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003fdc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe8:	4a44      	ldr	r2, [pc, #272]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8003fea:	430b      	orrs	r3, r1
 8003fec:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003ff0:	e003      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x806>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff2:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003ff6:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004002:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004006:	66bb      	str	r3, [r7, #104]	; 0x68
 8004008:	2300      	movs	r3, #0
 800400a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800400c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004010:	460b      	mov	r3, r1
 8004012:	4313      	orrs	r3, r2
 8004014:	d078      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));
 8004016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d027      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x87e>
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004026:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800402a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402e:	d020      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x87e>
 8004030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004034:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403c:	d019      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x87e>
 800403e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004042:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004046:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800404a:	d012      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x87e>
 800404c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004050:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004058:	d00b      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x87e>
 800405a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800405e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004062:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004066:	d004      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x87e>
 8004068:	f240 21bd 	movw	r1, #701	; 0x2bd
 800406c:	4822      	ldr	r0, [pc, #136]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 800406e:	f7fc fbda 	bl	8000826 <assert_failed>

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004076:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800407a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800407e:	d028      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8004080:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004084:	d821      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8004086:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800408a:	d022      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 800408c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004090:	d81b      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8004092:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004096:	d01c      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8004098:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800409c:	d815      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 800409e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a2:	d008      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 80040a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a8:	d80f      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d011      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 80040ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b2:	d00e      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 80040b4:	e009      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x8d6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ba:	3308      	adds	r3, #8
 80040bc:	4618      	mov	r0, r3
 80040be:	f002 fb0d 	bl	80066dc <RCCEx_PLL2_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 80040c8:	e004      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 80040d0:	e000      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
        break;
 80040d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d4:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d111      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x90c>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80040dc:	4b07      	ldr	r3, [pc, #28]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x908>)
 80040de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040e2:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80040e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040ee:	4a03      	ldr	r2, [pc, #12]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x908>)
 80040f0:	430b      	orrs	r3, r1
 80040f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040f6:	e007      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x914>
 80040f8:	08008538 	.word	0x08008538
 80040fc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8004104:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004114:	663b      	str	r3, [r7, #96]	; 0x60
 8004116:	2300      	movs	r3, #0
 8004118:	667b      	str	r3, [r7, #100]	; 0x64
 800411a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800411e:	460b      	mov	r3, r1
 8004120:	4313      	orrs	r3, r2
 8004122:	d061      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));
 8004124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01c      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004138:	2b01      	cmp	r3, #1
 800413a:	d016      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x976>
 800413c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004144:	2b02      	cmp	r3, #2
 8004146:	d010      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004150:	2b03      	cmp	r3, #3
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415c:	2b04      	cmp	r3, #4
 800415e:	d004      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004160:	f240 21e1 	movw	r1, #737	; 0x2e1
 8004164:	48bb      	ldr	r0, [pc, #748]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc60>)
 8004166:	f7fc fb5e 	bl	8000826 <assert_failed>

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800416a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	2b04      	cmp	r3, #4
 8004174:	d81d      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004176:	a201      	add	r2, pc, #4	; (adr r2, 800417c <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	080041bb 	.word	0x080041bb
 8004180:	08004191 	.word	0x08004191
 8004184:	0800419f 	.word	0x0800419f
 8004188:	080041bb 	.word	0x080041bb
 800418c:	080041bb 	.word	0x080041bb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004190:	4bb1      	ldr	r3, [pc, #708]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	4ab0      	ldr	r2, [pc, #704]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8004196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800419c:	e00e      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x9c8>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800419e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a2:	332c      	adds	r3, #44	; 0x2c
 80041a4:	4618      	mov	r0, r3
 80041a6:	f002 fb85 	bl	80068b4 <RCCEx_PLL3_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 80041b0:	e004      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x9c8>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 80041b8:	e000      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x9c8>
        break;
 80041ba:	bf00      	nop
    }
    if (ret == HAL_OK)
 80041bc:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10d      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80041c4:	4ba4      	ldr	r3, [pc, #656]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 80041c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80041ca:	f023 0107 	bic.w	r1, r3, #7
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	4aa0      	ldr	r2, [pc, #640]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 80041d8:	430b      	orrs	r3, r1
 80041da:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80041de:	e003      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e0:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80041e4:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80041e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80041f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80041f6:	2300      	movs	r3, #0
 80041f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80041fe:	460b      	mov	r3, r1
 8004200:	4313      	orrs	r3, r2
 8004202:	d071      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
 8004204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d020      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421c:	d019      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800421e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004226:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800422a:	d012      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800422c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004234:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004238:	d00b      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800423a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800423e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004242:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004246:	d004      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004248:	f240 3107 	movw	r1, #775	; 0x307
 800424c:	4881      	ldr	r0, [pc, #516]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc60>)
 800424e:	f7fc faea 	bl	8000826 <assert_failed>
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800425a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800425e:	d028      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xabe>
 8004260:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004264:	d821      	bhi.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004266:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800426a:	d024      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xac2>
 800426c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004270:	d81b      	bhi.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004276:	d00e      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004278:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800427c:	d815      	bhi.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d01b      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xac6>
 8004282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004286:	d110      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004288:	4b73      	ldr	r3, [pc, #460]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	4a72      	ldr	r2, [pc, #456]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 800428e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004292:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004294:	e012      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429a:	332c      	adds	r3, #44	; 0x2c
 800429c:	4618      	mov	r0, r3
 800429e:	f002 fb09 	bl	80068b4 <RCCEx_PLL3_Config>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 80042a8:	e008      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 80042b0:	e004      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xac8>
        break;
 80042b2:	bf00      	nop
 80042b4:	e002      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xac8>
        break;
 80042b6:	bf00      	nop
 80042b8:	e000      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xac8>
        break;
 80042ba:	bf00      	nop
    }
    if (ret == HAL_OK)
 80042bc:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10d      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80042c4:	4b64      	ldr	r3, [pc, #400]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 80042c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042ca:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80042ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d6:	4a60      	ldr	r2, [pc, #384]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 80042d8:	430b      	orrs	r3, r1
 80042da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042de:	e003      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e0:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80042e4:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80042f4:	653b      	str	r3, [r7, #80]	; 0x50
 80042f6:	2300      	movs	r3, #0
 80042f8:	657b      	str	r3, [r7, #84]	; 0x54
 80042fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80042fe:	460b      	mov	r3, r1
 8004300:	4313      	orrs	r3, r2
 8004302:	f000 80db 	beq.w	80044bc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004306:	2300      	movs	r3, #0
 8004308:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
 800430c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004310:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d019      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8004318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004324:	d012      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800432e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004332:	d00b      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8004334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004338:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800433c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004340:	d004      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8004342:	f240 312d 	movw	r1, #813	; 0x32d
 8004346:	4843      	ldr	r0, [pc, #268]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc60>)
 8004348:	f7fc fa6d 	bl	8000826 <assert_failed>
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800434c:	4b42      	ldr	r3, [pc, #264]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 800434e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	d113      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800435a:	4b3f      	ldr	r3, [pc, #252]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 800435c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004360:	4a3d      	ldr	r2, [pc, #244]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8004362:	f043 0304 	orr.w	r3, r3, #4
 8004366:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800436a:	4b3b      	ldr	r3, [pc, #236]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 800436c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004378:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
      pwrclkchanged = SET;
 800437c:	2301      	movs	r3, #1
 800437e:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004382:	4b36      	ldr	r3, [pc, #216]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0xc68>)
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	4a35      	ldr	r2, [pc, #212]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0xc68>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800438e:	f7fc fbf7 	bl	8000b80 <HAL_GetTick>
 8004392:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004396:	e00b      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004398:	f7fc fbf2 	bl	8000b80 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d903      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
      {
        ret = HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 80043ae:	e005      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80043b0:	4b2a      	ldr	r3, [pc, #168]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0xc68>)
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0ed      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xba4>
      }
    }

    if (ret == HAL_OK)
 80043bc:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d16b      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043c4:	4b24      	ldr	r3, [pc, #144]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 80043c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80043d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d023      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 80043da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d01b      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043ea:	4b1b      	ldr	r3, [pc, #108]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 80043ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043f8:	4b17      	ldr	r3, [pc, #92]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 80043fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043fe:	4a16      	ldr	r2, [pc, #88]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004408:	4b13      	ldr	r3, [pc, #76]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 800440a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800440e:	4a12      	ldr	r2, [pc, #72]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8004410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004414:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004418:	4a0f      	ldr	r2, [pc, #60]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 800441a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01f      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442e:	f7fc fba7 	bl	8000b80 <HAL_GetTick>
 8004432:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004436:	e013      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004438:	f7fc fba2 	bl	8000b80 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004442:	1ad2      	subs	r2, r2, r3
 8004444:	f241 3388 	movw	r3, #5000	; 0x1388
 8004448:	429a      	cmp	r2, r3
 800444a:	d909      	bls.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
          {
            ret = HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
            break;
 8004452:	e00c      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8004454:	08008538 	.word	0x08008538
 8004458:	46020c00 	.word	0x46020c00
 800445c:	46020800 	.word	0x46020800
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004460:	4b77      	ldr	r3, [pc, #476]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8004462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0e4      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xc44>
          }
        }
      }

      if (ret == HAL_OK)
 800446e:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10d      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004476:	4b72      	ldr	r3, [pc, #456]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8004478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800447c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004484:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004488:	4a6d      	ldr	r2, [pc, #436]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 800448a:	430b      	orrs	r3, r1
 800448c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004490:	e008      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004492:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8004496:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 800449a:	e003      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449c:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80044a0:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044a4:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d107      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ac:	4b64      	ldr	r3, [pc, #400]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80044ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b2:	4a63      	ldr	r2, [pc, #396]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80044b4:	f023 0304 	bic.w	r3, r3, #4
 80044b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80044bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80044c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80044ca:	2300      	movs	r3, #0
 80044cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80044d2:	460b      	mov	r3, r1
 80044d4:	4313      	orrs	r3, r2
 80044d6:	d062      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));
 80044d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d019      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80044e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044f0:	d012      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80044f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044fe:	d00b      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004504:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004508:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800450c:	d004      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800450e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8004512:	484c      	ldr	r0, [pc, #304]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8004514:	f7fc f987 	bl	8000826 <assert_failed>

    switch (pPeriphClkInit->IclkClockSelection)
 8004518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004520:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004524:	d022      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8004526:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800452a:	d81b      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 800452c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004530:	d011      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xd62>
 8004532:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004536:	d815      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8004538:	2b00      	cmp	r3, #0
 800453a:	d019      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800453c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004540:	d110      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004546:	3308      	adds	r3, #8
 8004548:	4618      	mov	r0, r3
 800454a:	f002 f8c7 	bl	80066dc <RCCEx_PLL2_Config>
 800454e:	4603      	mov	r3, r0
 8004550:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8004554:	e00d      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004556:	4b3a      	ldr	r3, [pc, #232]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	4a39      	ldr	r2, [pc, #228]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 800455c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004560:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004562:	e006      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 800456a:	e002      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
        break;
 800456c:	bf00      	nop
 800456e:	e000      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
        break;
 8004570:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004572:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10d      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800457a:	4b31      	ldr	r3, [pc, #196]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 800457c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004580:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004588:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800458c:	4a2c      	ldr	r2, [pc, #176]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 800458e:	430b      	orrs	r3, r1
 8004590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004594:	e003      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004596:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800459a:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800459e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a6:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80045aa:	643b      	str	r3, [r7, #64]	; 0x40
 80045ac:	2300      	movs	r3, #0
 80045ae:	647b      	str	r3, [r7, #68]	; 0x44
 80045b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80045b4:	460b      	mov	r3, r1
 80045b6:	4313      	orrs	r3, r2
 80045b8:	d04a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d012      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80045c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d2:	d00b      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80045d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e0:	d004      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80045e2:	f240 31a5 	movw	r1, #933	; 0x3a5
 80045e6:	4817      	ldr	r0, [pc, #92]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 80045e8:	f7fc f91d 	bl	8000826 <assert_failed>

    switch (pPeriphClkInit->RngClockSelection)
 80045ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f8:	d00b      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
 80045fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fe:	d804      	bhi.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xe16>
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xe22>
 8004604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004608:	d007      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xe26>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8004610:	e004      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xe28>
        break;
 8004612:	bf00      	nop
 8004614:	e002      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xe28>
        break;
 8004616:	bf00      	nop
 8004618:	e000      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xe28>
        break;
 800461a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800461c:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d111      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004624:	4b06      	ldr	r3, [pc, #24]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8004626:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800462a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800462e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004632:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004636:	4a02      	ldr	r2, [pc, #8]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8004638:	430b      	orrs	r3, r1
 800463a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800463e:	e007      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004640:	46020c00 	.word	0x46020c00
 8004644:	08008538 	.word	0x08008538
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800464c:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800465c:	63bb      	str	r3, [r7, #56]	; 0x38
 800465e:	2300      	movs	r3, #0
 8004660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004662:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004666:	460b      	mov	r3, r1
 8004668:	4313      	orrs	r3, r2
 800466a:	d01e      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));
 800466c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004670:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00b      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 8004678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800467c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004684:	d004      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 8004686:	f240 31c6 	movw	r1, #966	; 0x3c6
 800468a:	48aa      	ldr	r0, [pc, #680]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 800468c:	f7fc f8cb 	bl	8000826 <assert_failed>

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8004690:	4ba9      	ldr	r3, [pc, #676]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8004692:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004696:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046a2:	4aa5      	ldr	r2, [pc, #660]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 80046a4:	430b      	orrs	r3, r1
 80046a6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80046aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80046b6:	633b      	str	r3, [r7, #48]	; 0x30
 80046b8:	2300      	movs	r3, #0
 80046ba:	637b      	str	r3, [r7, #52]	; 0x34
 80046bc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80046c0:	460b      	mov	r3, r1
 80046c2:	4313      	orrs	r3, r2
 80046c4:	d02b      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xf2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));
 80046c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xef6>
 80046d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046de:	d004      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xef6>
 80046e0:	f240 31cf 	movw	r1, #975	; 0x3cf
 80046e4:	4893      	ldr	r0, [pc, #588]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 80046e6:	f7fc f89e 	bl	8000826 <assert_failed>

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80046ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046f6:	d105      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xf10>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80046f8:	4b8f      	ldr	r3, [pc, #572]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	4a8e      	ldr	r2, [pc, #568]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 80046fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004702:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004704:	4b8c      	ldr	r3, [pc, #560]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8004706:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800470a:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800470e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004712:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004716:	4a88      	ldr	r2, [pc, #544]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8004718:	430b      	orrs	r3, r1
 800471a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28
 800472c:	2300      	movs	r3, #0
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004730:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004734:	460b      	mov	r3, r1
 8004736:	4313      	orrs	r3, r2
 8004738:	d02c      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));
 800473a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d019      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xf86>
 8004746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800474e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004752:	d012      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xf86>
 8004754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004758:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800475c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004760:	d00b      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xf86>
 8004762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004766:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800476a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800476e:	d004      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xf86>
 8004770:	f240 31df 	movw	r1, #991	; 0x3df
 8004774:	486f      	ldr	r0, [pc, #444]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 8004776:	f7fc f856 	bl	8000826 <assert_failed>

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800477a:	4b6f      	ldr	r3, [pc, #444]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 800477c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004780:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004788:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800478c:	496a      	ldr	r1, [pc, #424]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80047a0:	623b      	str	r3, [r7, #32]
 80047a2:	2300      	movs	r3, #0
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
 80047a6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047aa:	460b      	mov	r3, r1
 80047ac:	4313      	orrs	r3, r2
 80047ae:	d02c      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x1016>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));
 80047b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d019      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80047bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c8:	d012      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80047ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80047d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047d6:	d00b      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80047d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80047e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047e4:	d004      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80047e6:	f240 31e9 	movw	r1, #1001	; 0x3e9
 80047ea:	4852      	ldr	r0, [pc, #328]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 80047ec:	f7fc f81b 	bl	8000826 <assert_failed>

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80047f0:	4b51      	ldr	r3, [pc, #324]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 80047f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004802:	494d      	ldr	r1, [pc, #308]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800480a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004812:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	2300      	movs	r3, #0
 800481a:	61fb      	str	r3, [r7, #28]
 800481c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004820:	460b      	mov	r3, r1
 8004822:	4313      	orrs	r3, r2
 8004824:	d029      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1086>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));
 8004826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800482e:	2b00      	cmp	r3, #0
 8004830:	d016      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004836:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800483a:	2b08      	cmp	r3, #8
 800483c:	d010      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800483e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004842:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004846:	2b10      	cmp	r3, #16
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800484a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004852:	2b18      	cmp	r3, #24
 8004854:	d004      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004856:	f240 31f3 	movw	r1, #1011	; 0x3f3
 800485a:	4836      	ldr	r0, [pc, #216]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 800485c:	f7fb ffe3 	bl	8000826 <assert_failed>

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004860:	4b35      	ldr	r3, [pc, #212]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8004862:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004866:	f023 0218 	bic.w	r2, r3, #24
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004872:	4931      	ldr	r1, [pc, #196]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800487a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004890:	460b      	mov	r3, r1
 8004892:	4313      	orrs	r3, r2
 8004894:	d056      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x1150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));
 8004896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d019      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
 80048a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ae:	d012      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
 80048b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048bc:	d00b      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
 80048be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048ca:	d004      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
 80048cc:	f240 31fd 	movw	r1, #1021	; 0x3fd
 80048d0:	4818      	ldr	r0, [pc, #96]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 80048d2:	f7fb ffa8 	bl	8000826 <assert_failed>

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80048d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048e2:	d105      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x10fc>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e4:	4b14      	ldr	r3, [pc, #80]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 80048e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e8:	4a13      	ldr	r2, [pc, #76]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 80048ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ee:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80048f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048fc:	d108      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x111c>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004902:	3308      	adds	r3, #8
 8004904:	4618      	mov	r0, r3
 8004906:	f001 fee9 	bl	80066dc <RCCEx_PLL2_Config>
 800490a:	4603      	mov	r3, r0
 800490c:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    }
    if (ret == HAL_OK)
 8004910:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d111      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004918:	4b07      	ldr	r3, [pc, #28]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 800491a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800491e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004926:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800492a:	4903      	ldr	r1, [pc, #12]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004932:	e007      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8004934:	08008538 	.word	0x08008538
 8004938:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493c:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8004940:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800495a:	460b      	mov	r3, r1
 800495c:	4313      	orrs	r3, r2
 800495e:	d053      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));
 8004960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004968:	2b00      	cmp	r3, #0
 800496a:	d012      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x119e>
 800496c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004978:	d00b      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x119e>
 800497a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004982:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004986:	d004      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x119e>
 8004988:	f240 414a 	movw	r1, #1098	; 0x44a
 800498c:	4838      	ldr	r0, [pc, #224]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 800498e:	f7fb ff4a 	bl	8000826 <assert_failed>

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800499e:	d00e      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x11ca>
 80049a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049a4:	d815      	bhi.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d017      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x11e6>
 80049aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049ae:	d110      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x11de>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b0:	4b30      	ldr	r3, [pc, #192]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	4a2f      	ldr	r2, [pc, #188]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 80049b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ba:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80049bc:	e00e      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c2:	3308      	adds	r3, #8
 80049c4:	4618      	mov	r0, r3
 80049c6:	f001 fe89 	bl	80066dc <RCCEx_PLL2_Config>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80049d0:	e004      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      default:
        ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 80049d8:	e000      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 80049da:	bf00      	nop
    }
    if (ret == HAL_OK)
 80049dc:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10d      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80049e4:	4b23      	ldr	r3, [pc, #140]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 80049e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f6:	491f      	ldr	r1, [pc, #124]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80049fe:	e003      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a00:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8004a04:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	2300      	movs	r3, #0
 8004a18:	607b      	str	r3, [r7, #4]
 8004a1a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4313      	orrs	r3, r2
 8004a22:	d01e      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x126e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));
 8004a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00b      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a3c:	d004      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004a3e:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8004a42:	480b      	ldr	r0, [pc, #44]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 8004a44:	f7fb feef 	bl	8000826 <assert_failed>

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 8004a4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a4e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a5a:	4906      	ldr	r1, [pc, #24]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004a62:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	37f8      	adds	r7, #248	; 0xf8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a70:	08008538 	.word	0x08008538
 8004a74:	46020c00 	.word	0x46020c00

08004a78 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b089      	sub	sp, #36	; 0x24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004a80:	4bad      	ldr	r3, [pc, #692]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a88:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004a8a:	4bab      	ldr	r3, [pc, #684]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004a94:	4ba8      	ldr	r3, [pc, #672]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	0a1b      	lsrs	r3, r3, #8
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004aa2:	4ba5      	ldr	r3, [pc, #660]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	091b      	lsrs	r3, r3, #4
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004aae:	4ba2      	ldr	r3, [pc, #648]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	08db      	lsrs	r3, r3, #3
 8004ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	fb02 f303 	mul.w	r3, r2, r3
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8123 	beq.w	8004d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d062      	beq.n	8004b9e <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	f200 8081 	bhi.w	8004be2 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d024      	beq.n	8004b30 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d17a      	bne.n	8004be2 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af6:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004d3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afe:	4b8e      	ldr	r3, [pc, #568]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b12:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b2e:	e08f      	b.n	8004c50 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004b30:	4b81      	ldr	r3, [pc, #516]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8004b3c:	4b7e      	ldr	r3, [pc, #504]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	0f1b      	lsrs	r3, r3, #28
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	e006      	b.n	8004b56 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8004b48:	4b7b      	ldr	r3, [pc, #492]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004b4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b4e:	041b      	lsls	r3, r3, #16
 8004b50:	0f1b      	lsrs	r3, r3, #28
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	4a7b      	ldr	r2, [pc, #492]	; (8004d44 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8004b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b5c:	ee07 3a90 	vmov	s15, r3
 8004b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	ee07 3a90 	vmov	s15, r3
 8004b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b80:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004b84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b90:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b9c:	e058      	b.n	8004c50 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	ee07 3a90 	vmov	s15, r3
 8004ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba8:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004d3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004bac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb0:	4b61      	ldr	r3, [pc, #388]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb8:	ee07 3a90 	vmov	s15, r3
 8004bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bc4:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004bc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004be0:	e036      	b.n	8004c50 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004be2:	4b55      	ldr	r3, [pc, #340]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8004bee:	4b52      	ldr	r3, [pc, #328]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	0f1b      	lsrs	r3, r3, #28
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	e006      	b.n	8004c08 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8004bfa:	4b4f      	ldr	r3, [pc, #316]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c00:	041b      	lsls	r3, r3, #16
 8004c02:	0f1b      	lsrs	r3, r3, #28
 8004c04:	f003 030f 	and.w	r3, r3, #15
 8004c08:	4a4e      	ldr	r2, [pc, #312]	; (8004d44 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8004c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	ee07 3a90 	vmov	s15, r3
 8004c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c32:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c4e:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004c50:	4b39      	ldr	r3, [pc, #228]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d017      	beq.n	8004c8c <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004c5c:	4b36      	ldr	r3, [pc, #216]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c60:	0a5b      	lsrs	r3, r3, #9
 8004c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8004c6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c72:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c82:	ee17 2a90 	vmov	r2, s15
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	e002      	b.n	8004c92 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004c92:	4b29      	ldr	r3, [pc, #164]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d017      	beq.n	8004cce <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004c9e:	4b26      	ldr	r3, [pc, #152]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	0c1b      	lsrs	r3, r3, #16
 8004ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca8:	ee07 3a90 	vmov	s15, r3
 8004cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004cb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cb4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004cb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cc4:	ee17 2a90 	vmov	r2, s15
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	605a      	str	r2, [r3, #4]
 8004ccc:	e002      	b.n	8004cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004cd4:	4b18      	ldr	r3, [pc, #96]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d017      	beq.n	8004d10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004ce0:	4b15      	ldr	r3, [pc, #84]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce4:	0e1b      	lsrs	r3, r3, #24
 8004ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8004cf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cf6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004cfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d06:	ee17 2a90 	vmov	r2, s15
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004d0e:	e00c      	b.n	8004d2a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	609a      	str	r2, [r3, #8]
}
 8004d16:	e008      	b.n	8004d2a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	609a      	str	r2, [r3, #8]
}
 8004d2a:	bf00      	nop
 8004d2c:	3724      	adds	r7, #36	; 0x24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	46020c00 	.word	0x46020c00
 8004d3c:	4b742400 	.word	0x4b742400
 8004d40:	46000000 	.word	0x46000000
 8004d44:	08008604 	.word	0x08008604

08004d48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b089      	sub	sp, #36	; 0x24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004d50:	4bad      	ldr	r3, [pc, #692]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d58:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004d5a:	4bab      	ldr	r3, [pc, #684]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8004d64:	4ba8      	ldr	r3, [pc, #672]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	0a1b      	lsrs	r3, r3, #8
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	3301      	adds	r3, #1
 8004d70:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004d72:	4ba5      	ldr	r3, [pc, #660]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	091b      	lsrs	r3, r3, #4
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004d7e:	4ba2      	ldr	r3, [pc, #648]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	08db      	lsrs	r3, r3, #3
 8004d84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d96:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8123 	beq.w	8004fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d062      	beq.n	8004e6e <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	f200 8081 	bhi.w	8004eb2 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d024      	beq.n	8004e00 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d17a      	bne.n	8004eb2 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc6:	eddf 6a91 	vldr	s13, [pc, #580]	; 800500c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dce:	4b8e      	ldr	r3, [pc, #568]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dde:	ed97 6a02 	vldr	s12, [r7, #8]
 8004de2:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dfe:	e08f      	b.n	8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004e00:	4b81      	ldr	r3, [pc, #516]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8004e0c:	4b7e      	ldr	r3, [pc, #504]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	0f1b      	lsrs	r3, r3, #28
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	e006      	b.n	8004e26 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8004e18:	4b7b      	ldr	r3, [pc, #492]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004e1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e1e:	041b      	lsls	r3, r3, #16
 8004e20:	0f1b      	lsrs	r3, r3, #28
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	4a7b      	ldr	r2, [pc, #492]	; (8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8004e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	ee07 3a90 	vmov	s15, r3
 8004e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e50:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e6c:	e058      	b.n	8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	ee07 3a90 	vmov	s15, r3
 8004e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e78:	eddf 6a64 	vldr	s13, [pc, #400]	; 800500c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e80:	4b61      	ldr	r3, [pc, #388]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e88:	ee07 3a90 	vmov	s15, r3
 8004e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e90:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e94:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eb0:	e036      	b.n	8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004eb2:	4b55      	ldr	r3, [pc, #340]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d005      	beq.n	8004eca <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8004ebe:	4b52      	ldr	r3, [pc, #328]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	0f1b      	lsrs	r3, r3, #28
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	e006      	b.n	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8004eca:	4b4f      	ldr	r3, [pc, #316]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ecc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ed0:	041b      	lsls	r3, r3, #16
 8004ed2:	0f1b      	lsrs	r3, r3, #28
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	4a4e      	ldr	r2, [pc, #312]	; (8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8004eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	ee07 3a90 	vmov	s15, r3
 8004eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f02:	eddf 5a43 	vldr	s11, [pc, #268]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f1e:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004f20:	4b39      	ldr	r3, [pc, #228]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d017      	beq.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f2c:	4b36      	ldr	r3, [pc, #216]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f30:	0a5b      	lsrs	r3, r3, #9
 8004f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8004f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f42:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f52:	ee17 2a90 	vmov	r2, s15
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	e002      	b.n	8004f62 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004f62:	4b29      	ldr	r3, [pc, #164]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d017      	beq.n	8004f9e <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f6e:	4b26      	ldr	r3, [pc, #152]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f72:	0c1b      	lsrs	r3, r3, #16
 8004f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f78:	ee07 3a90 	vmov	s15, r3
 8004f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004f80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f84:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f88:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f94:	ee17 2a90 	vmov	r2, s15
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	605a      	str	r2, [r3, #4]
 8004f9c:	e002      	b.n	8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004fa4:	4b18      	ldr	r3, [pc, #96]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d017      	beq.n	8004fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004fb0:	4b15      	ldr	r3, [pc, #84]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb4:	0e1b      	lsrs	r3, r3, #24
 8004fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004fca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fd6:	ee17 2a90 	vmov	r2, s15
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004fde:	e00c      	b.n	8004ffa <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	609a      	str	r2, [r3, #8]
}
 8004fe6:	e008      	b.n	8004ffa <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	609a      	str	r2, [r3, #8]
}
 8004ffa:	bf00      	nop
 8004ffc:	3724      	adds	r7, #36	; 0x24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	46020c00 	.word	0x46020c00
 800500c:	4b742400 	.word	0x4b742400
 8005010:	46000000 	.word	0x46000000
 8005014:	08008604 	.word	0x08008604

08005018 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005018:	b480      	push	{r7}
 800501a:	b089      	sub	sp, #36	; 0x24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005020:	4bad      	ldr	r3, [pc, #692]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005028:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800502a:	4bab      	ldr	r3, [pc, #684]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800502c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005034:	4ba8      	ldr	r3, [pc, #672]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	0a1b      	lsrs	r3, r3, #8
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	3301      	adds	r3, #1
 8005040:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005042:	4ba5      	ldr	r3, [pc, #660]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800504e:	4ba2      	ldr	r3, [pc, #648]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005052:	08db      	lsrs	r3, r3, #3
 8005054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	fb02 f303 	mul.w	r3, r2, r3
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005066:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8123 	beq.w	80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b03      	cmp	r3, #3
 8005076:	d062      	beq.n	800513e <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b03      	cmp	r3, #3
 800507c:	f200 8081 	bhi.w	8005182 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d024      	beq.n	80050d0 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b02      	cmp	r3, #2
 800508a:	d17a      	bne.n	8005182 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005096:	eddf 6a91 	vldr	s13, [pc, #580]	; 80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800509a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509e:	4b8e      	ldr	r3, [pc, #568]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80050a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80050ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80050b2:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80050b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80050ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80050be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80050c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ca:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80050ce:	e08f      	b.n	80051f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80050d0:	4b81      	ldr	r3, [pc, #516]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 80050dc:	4b7e      	ldr	r3, [pc, #504]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	0f1b      	lsrs	r3, r3, #28
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	e006      	b.n	80050f6 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 80050e8:	4b7b      	ldr	r3, [pc, #492]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80050ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050ee:	041b      	lsls	r3, r3, #16
 80050f0:	0f1b      	lsrs	r3, r3, #28
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	4a7b      	ldr	r2, [pc, #492]	; (80052e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 80050f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050fc:	ee07 3a90 	vmov	s15, r3
 8005100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	ee07 3a90 	vmov	s15, r3
 800510a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	ee07 3a90 	vmov	s15, r3
 8005118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005120:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800512c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005130:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005138:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800513c:	e058      	b.n	80051f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	ee07 3a90 	vmov	s15, r3
 8005144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005148:	eddf 6a64 	vldr	s13, [pc, #400]	; 80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800514c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005150:	4b61      	ldr	r3, [pc, #388]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005158:	ee07 3a90 	vmov	s15, r3
 800515c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005160:	ed97 6a02 	vldr	s12, [r7, #8]
 8005164:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005168:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800516c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005174:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005180:	e036      	b.n	80051f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005182:	4b55      	ldr	r3, [pc, #340]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d005      	beq.n	800519a <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 800518e:	4b52      	ldr	r3, [pc, #328]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	0f1b      	lsrs	r3, r3, #28
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	e006      	b.n	80051a8 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 800519a:	4b4f      	ldr	r3, [pc, #316]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800519c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	0f1b      	lsrs	r3, r3, #28
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	4a4e      	ldr	r2, [pc, #312]	; (80052e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 80051aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	ee07 3a90 	vmov	s15, r3
 80051bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80051d2:	eddf 5a43 	vldr	s11, [pc, #268]	; 80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80051d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80051e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ee:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80051f0:	4b39      	ldr	r3, [pc, #228]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80051f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d017      	beq.n	800522c <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80051fc:	4b36      	ldr	r3, [pc, #216]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80051fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005200:	0a5b      	lsrs	r3, r3, #9
 8005202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800520e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005212:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005216:	edd7 6a07 	vldr	s13, [r7, #28]
 800521a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800521e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005222:	ee17 2a90 	vmov	r2, s15
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	e002      	b.n	8005232 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005232:	4b29      	ldr	r3, [pc, #164]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d017      	beq.n	800526e <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800523e:	4b26      	ldr	r3, [pc, #152]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	0c1b      	lsrs	r3, r3, #16
 8005244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005248:	ee07 3a90 	vmov	s15, r3
 800524c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005254:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005258:	edd7 6a07 	vldr	s13, [r7, #28]
 800525c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005264:	ee17 2a90 	vmov	r2, s15
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	605a      	str	r2, [r3, #4]
 800526c:	e002      	b.n	8005274 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005274:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d017      	beq.n	80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005280:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005284:	0e1b      	lsrs	r3, r3, #24
 8005286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005296:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800529a:	edd7 6a07 	vldr	s13, [r7, #28]
 800529e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a6:	ee17 2a90 	vmov	r2, s15
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80052ae:	e00c      	b.n	80052ca <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	609a      	str	r2, [r3, #8]
}
 80052b6:	e008      	b.n	80052ca <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	609a      	str	r2, [r3, #8]
}
 80052ca:	bf00      	nop
 80052cc:	3724      	adds	r7, #36	; 0x24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	46020c00 	.word	0x46020c00
 80052dc:	4b742400 	.word	0x4b742400
 80052e0:	46000000 	.word	0x46000000
 80052e4:	08008604 	.word	0x08008604

080052e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80052e8:	b5b0      	push	{r4, r5, r7, lr}
 80052ea:	b08e      	sub	sp, #56	; 0x38
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	e9c7 0100 	strd	r0, r1, [r7]

  uint32_t frequency;
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 80052f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052f6:	f020 4260 	bic.w	r2, r0, #3758096384	; 0xe0000000
 80052fa:	2300      	movs	r3, #0
 80052fc:	4313      	orrs	r3, r2
 80052fe:	d007      	beq.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8005300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005304:	f002 4460 	and.w	r4, r2, #3758096384	; 0xe0000000
 8005308:	461d      	mov	r5, r3
 800530a:	ea54 0305 	orrs.w	r3, r4, r5
 800530e:	d004      	beq.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 8005310:	f240 711a 	movw	r1, #1818	; 0x71a
 8005314:	4899      	ldr	r0, [pc, #612]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005316:	f7fb fa86 	bl	8000826 <assert_failed>

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800531a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800531e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8005322:	430b      	orrs	r3, r1
 8005324:	d145      	bne.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005326:	4b96      	ldr	r3, [pc, #600]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800532c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005330:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005332:	4b93      	ldr	r3, [pc, #588]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b02      	cmp	r3, #2
 800533e:	d108      	bne.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005346:	d104      	bne.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      frequency = LSE_VALUE;
 8005348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800534c:	637b      	str	r3, [r7, #52]	; 0x34
 800534e:	f001 b9b5 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005352:	4b8b      	ldr	r3, [pc, #556]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800535c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005360:	d114      	bne.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005368:	d110      	bne.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800536a:	4b85      	ldr	r3, [pc, #532]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800536c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005378:	d103      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        frequency = LSI_VALUE / 128U;
 800537a:	23fa      	movs	r3, #250	; 0xfa
 800537c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800537e:	f001 b99d 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      else
      {
        frequency = LSI_VALUE;
 8005382:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005386:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005388:	f001 b998 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800538c:	4b7c      	ldr	r3, [pc, #496]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005398:	d107      	bne.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053a0:	d103      	bne.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
    {
      frequency = HSE_VALUE / 32U;
 80053a2:	4b78      	ldr	r3, [pc, #480]	; (8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80053a4:	637b      	str	r3, [r7, #52]	; 0x34
 80053a6:	f001 b989 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	637b      	str	r3, [r7, #52]	; 0x34
 80053ae:	f001 b985 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80053b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053b6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80053ba:	430b      	orrs	r3, r1
 80053bc:	d151      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80053be:	4b70      	ldr	r3, [pc, #448]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80053c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80053c4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80053c8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	2b80      	cmp	r3, #128	; 0x80
 80053ce:	d035      	beq.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	2b80      	cmp	r3, #128	; 0x80
 80053d4:	d841      	bhi.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	2b60      	cmp	r3, #96	; 0x60
 80053da:	d02a      	beq.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	2b60      	cmp	r3, #96	; 0x60
 80053e0:	d83b      	bhi.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	2b40      	cmp	r3, #64	; 0x40
 80053e6:	d009      	beq.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d835      	bhi.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00c      	beq.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d012      	beq.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80053fa:	e02e      	b.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x172>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff fb39 	bl	8004a78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800540a:	f001 b957 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800540e:	f107 0318 	add.w	r3, r7, #24
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff fc98 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800541c:	f001 b94e 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005420:	f107 030c 	add.w	r3, r7, #12
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff fdf7 	bl	8005018 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800542e:	f001 b945 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005432:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005436:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005438:	f001 b940 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800543c:	4b50      	ldr	r3, [pc, #320]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005448:	d103      	bne.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        {
          frequency = HSI_VALUE;
 800544a:	4b4f      	ldr	r3, [pc, #316]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800544c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800544e:	f001 b935 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005456:	f001 b931 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default :
      {
        frequency = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800545e:	f001 b92d 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005466:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800546a:	430b      	orrs	r3, r1
 800546c:	d158      	bne.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800546e:	4b44      	ldr	r3, [pc, #272]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005470:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005478:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005480:	d03b      	beq.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005488:	d846      	bhi.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005490:	d02e      	beq.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005498:	d83e      	bhi.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a0:	d00b      	beq.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a8:	d836      	bhi.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00d      	beq.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b6:	d012      	beq.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
 80054b8:	e02e      	b.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff fada 	bl	8004a78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054c8:	f001 b8f8 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054cc:	f107 0318 	add.w	r3, r7, #24
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff fc39 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054da:	f001 b8ef 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054de:	f107 030c 	add.w	r3, r7, #12
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff fd98 	bl	8005018 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054ec:	f001 b8e6 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80054f0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054f6:	f001 b8e1 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054fa:	4b21      	ldr	r3, [pc, #132]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005506:	d103      	bne.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
        {
          frequency = HSI_VALUE;
 8005508:	4b1f      	ldr	r3, [pc, #124]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800550a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800550c:	f001 b8d6 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005514:	f001 b8d2 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default :

        frequency = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800551c:	f001 b8ce 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8005520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005524:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005528:	430b      	orrs	r3, r1
 800552a:	d131      	bne.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800552c:	4b14      	ldr	r3, [pc, #80]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800552e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005536:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8005538:	4b11      	ldr	r3, [pc, #68]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005544:	d106      	bne.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	2b00      	cmp	r3, #0
 800554a:	d103      	bne.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      frequency = HSI_VALUE;
 800554c:	4b0e      	ldr	r3, [pc, #56]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800554e:	637b      	str	r3, [r7, #52]	; 0x34
 8005550:	f001 b8b4 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8005554:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800555c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005560:	d107      	bne.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005568:	d103      	bne.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      frequency = HSI_VALUE >> 1U;
 800556a:	4b08      	ldr	r3, [pc, #32]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800556c:	637b      	str	r3, [r7, #52]	; 0x34
 800556e:	f001 b8a5 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	637b      	str	r3, [r7, #52]	; 0x34
 8005576:	f001 b8a1 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800557a:	bf00      	nop
 800557c:	08008538 	.word	0x08008538
 8005580:	46020c00 	.word	0x46020c00
 8005584:	0007a120 	.word	0x0007a120
 8005588:	00f42400 	.word	0x00f42400
 800558c:	007a1200 	.word	0x007a1200
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005594:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8005598:	430b      	orrs	r3, r1
 800559a:	d165      	bne.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800559c:	4ba8      	ldr	r3, [pc, #672]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800559e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055a2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80055a6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80055a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055ae:	d034      	beq.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055b6:	d853      	bhi.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055be:	d00b      	beq.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c6:	d84b      	bhi.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d016      	beq.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055d4:	d009      	beq.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80055d6:	e043      	b.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff fa4b 	bl	8004a78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055e6:	f001 b869 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055ea:	f107 0318 	add.w	r3, r7, #24
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff fbaa 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055f8:	f001 b860 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80055fc:	4b90      	ldr	r3, [pc, #576]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005608:	d103      	bne.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
        {
          frequency = HSI48_VALUE;
 800560a:	4b8e      	ldr	r3, [pc, #568]	; (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800560e:	f001 b855 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005616:	f001 b851 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800561a:	4b89      	ldr	r3, [pc, #548]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b20      	cmp	r3, #32
 8005624:	d118      	bne.n	8005658 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005626:	4b86      	ldr	r3, [pc, #536]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d005      	beq.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8005632:	4b83      	ldr	r3, [pc, #524]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	0e1b      	lsrs	r3, r3, #24
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	e006      	b.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800563e:	4b80      	ldr	r3, [pc, #512]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005644:	041b      	lsls	r3, r3, #16
 8005646:	0e1b      	lsrs	r3, r3, #24
 8005648:	f003 030f 	and.w	r3, r3, #15
 800564c:	4a7e      	ldr	r2, [pc, #504]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x560>)
 800564e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005652:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005654:	f001 b832 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800565c:	f001 b82e 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default :

        frequency = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005664:	f001 b82a 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800566c:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8005670:	430b      	orrs	r3, r1
 8005672:	d17f      	bne.n	8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005674:	4b72      	ldr	r3, [pc, #456]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005676:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800567a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800567e:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005682:	2b00      	cmp	r3, #0
 8005684:	d165      	bne.n	8005752 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005686:	4b6e      	ldr	r3, [pc, #440]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800568c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005690:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8005692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005694:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005698:	d034      	beq.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80056a0:	d853      	bhi.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056a8:	d00b      	beq.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056b0:	d84b      	bhi.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d016      	beq.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056be:	d009      	beq.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
 80056c0:	e043      	b.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff f9d6 	bl	8004a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80056d0:	f000 bff4 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056d4:	f107 0318 	add.w	r3, r7, #24
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff fb35 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80056e2:	f000 bfeb 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80056e6:	4b56      	ldr	r3, [pc, #344]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f2:	d103      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          {
            frequency = HSI48_VALUE;
 80056f4:	4b53      	ldr	r3, [pc, #332]	; (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80056f6:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80056f8:	f000 bfe0 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
            frequency = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005700:	f000 bfdc 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005704:	4b4e      	ldr	r3, [pc, #312]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b20      	cmp	r3, #32
 800570e:	d118      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005710:	4b4b      	ldr	r3, [pc, #300]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d005      	beq.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 800571c:	4b48      	ldr	r3, [pc, #288]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	0e1b      	lsrs	r3, r3, #24
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	e006      	b.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005728:	4b45      	ldr	r3, [pc, #276]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800572a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800572e:	041b      	lsls	r3, r3, #16
 8005730:	0e1b      	lsrs	r3, r3, #24
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	4a44      	ldr	r2, [pc, #272]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x560>)
 8005738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800573c:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800573e:	f000 bfbd 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
            frequency = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005746:	f000 bfb9 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
        }
        default :
        {
          frequency = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800574e:	f000 bfb5 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005758:	d108      	bne.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800575a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff f98a 	bl	8004a78 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	637b      	str	r3, [r7, #52]	; 0x34
 8005768:	f000 bfa8 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else
    {
      frequency = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	637b      	str	r3, [r7, #52]	; 0x34
 8005770:	f000 bfa4 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005774:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005778:	1e51      	subs	r1, r2, #1
 800577a:	430b      	orrs	r3, r1
 800577c:	d136      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800577e:	4b30      	ldr	r3, [pc, #192]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005784:	f003 0303 	and.w	r3, r3, #3
 8005788:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	2b00      	cmp	r3, #0
 800578e:	d104      	bne.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005790:	f7fd ff82 	bl	8003698 <HAL_RCC_GetPCLK2Freq>
 8005794:	6378      	str	r0, [r7, #52]	; 0x34
 8005796:	f000 bf91 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	2b01      	cmp	r3, #1
 800579e:	d104      	bne.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80057a0:	f7fd fe44 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80057a4:	6378      	str	r0, [r7, #52]	; 0x34
 80057a6:	f000 bf89 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80057aa:	4b25      	ldr	r3, [pc, #148]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b6:	d106      	bne.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d103      	bne.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
    {
      frequency = HSI_VALUE;
 80057be:	4b23      	ldr	r3, [pc, #140]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x564>)
 80057c0:	637b      	str	r3, [r7, #52]	; 0x34
 80057c2:	f000 bf7b 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80057c6:	4b1e      	ldr	r3, [pc, #120]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80057c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d107      	bne.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d104      	bne.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
    {
      frequency = LSE_VALUE;
 80057da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057de:	637b      	str	r3, [r7, #52]	; 0x34
 80057e0:	f000 bf6c 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	637b      	str	r3, [r7, #52]	; 0x34
 80057e8:	f000 bf68 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80057ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057f0:	1e91      	subs	r1, r2, #2
 80057f2:	430b      	orrs	r3, r1
 80057f4:	d13f      	bne.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80057f6:	4b12      	ldr	r3, [pc, #72]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80057f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057fc:	f003 030c 	and.w	r3, r3, #12
 8005800:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	2b00      	cmp	r3, #0
 8005806:	d104      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005808:	f7fd ff32 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 800580c:	6378      	str	r0, [r7, #52]	; 0x34
 800580e:	f000 bf55 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	2b04      	cmp	r3, #4
 8005816:	d104      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005818:	f7fd fe08 	bl	800342c <HAL_RCC_GetSysClockFreq>
 800581c:	6378      	str	r0, [r7, #52]	; 0x34
 800581e:	f000 bf4d 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005822:	4b07      	ldr	r3, [pc, #28]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582e:	d10f      	bne.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	2b08      	cmp	r3, #8
 8005834:	d10c      	bne.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
    {
      frequency = HSI_VALUE;
 8005836:	4b05      	ldr	r3, [pc, #20]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x564>)
 8005838:	637b      	str	r3, [r7, #52]	; 0x34
 800583a:	f000 bf3f 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800583e:	bf00      	nop
 8005840:	46020c00 	.word	0x46020c00
 8005844:	02dc6c00 	.word	0x02dc6c00
 8005848:	08008604 	.word	0x08008604
 800584c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005850:	4baa      	ldr	r3, [pc, #680]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b02      	cmp	r3, #2
 800585c:	d107      	bne.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	2b0c      	cmp	r3, #12
 8005862:	d104      	bne.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x586>
    {
      frequency = LSE_VALUE;
 8005864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
 800586a:	f000 bf27 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	637b      	str	r3, [r7, #52]	; 0x34
 8005872:	f000 bf23 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800587a:	1f11      	subs	r1, r2, #4
 800587c:	430b      	orrs	r3, r1
 800587e:	d136      	bne.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x606>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005880:	4b9e      	ldr	r3, [pc, #632]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005886:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800588a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	2b00      	cmp	r3, #0
 8005890:	d104      	bne.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005892:	f7fd feed 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 8005896:	6378      	str	r0, [r7, #52]	; 0x34
 8005898:	f000 bf10 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	2b10      	cmp	r3, #16
 80058a0:	d104      	bne.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80058a2:	f7fd fdc3 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80058a6:	6378      	str	r0, [r7, #52]	; 0x34
 80058a8:	f000 bf08 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80058ac:	4b93      	ldr	r3, [pc, #588]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b8:	d106      	bne.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d103      	bne.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
    {
      frequency = HSI_VALUE;
 80058c0:	4b8f      	ldr	r3, [pc, #572]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80058c2:	637b      	str	r3, [r7, #52]	; 0x34
 80058c4:	f000 befa 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80058c8:	4b8c      	ldr	r3, [pc, #560]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80058ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d107      	bne.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	2b30      	cmp	r3, #48	; 0x30
 80058da:	d104      	bne.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
    {
      frequency = LSE_VALUE;
 80058dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058e0:	637b      	str	r3, [r7, #52]	; 0x34
 80058e2:	f000 beeb 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ea:	f000 bee7 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80058ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058f2:	f1a2 0108 	sub.w	r1, r2, #8
 80058f6:	430b      	orrs	r3, r1
 80058f8:	d136      	bne.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80058fa:	4b80      	ldr	r3, [pc, #512]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80058fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005900:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005904:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	2b00      	cmp	r3, #0
 800590a:	d104      	bne.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800590c:	f7fd feb0 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 8005910:	6378      	str	r0, [r7, #52]	; 0x34
 8005912:	f000 bed3 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	2b40      	cmp	r3, #64	; 0x40
 800591a:	d104      	bne.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800591c:	f7fd fd86 	bl	800342c <HAL_RCC_GetSysClockFreq>
 8005920:	6378      	str	r0, [r7, #52]	; 0x34
 8005922:	f000 becb 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005926:	4b75      	ldr	r3, [pc, #468]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800592e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005932:	d106      	bne.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	2b80      	cmp	r3, #128	; 0x80
 8005938:	d103      	bne.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
    {
      frequency = HSI_VALUE;
 800593a:	4b71      	ldr	r3, [pc, #452]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800593c:	637b      	str	r3, [r7, #52]	; 0x34
 800593e:	f000 bebd 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005942:	4b6e      	ldr	r3, [pc, #440]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b02      	cmp	r3, #2
 800594e:	d107      	bne.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	2bc0      	cmp	r3, #192	; 0xc0
 8005954:	d104      	bne.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
    {
      frequency = LSE_VALUE;
 8005956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800595a:	637b      	str	r3, [r7, #52]	; 0x34
 800595c:	f000 beae 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	637b      	str	r3, [r7, #52]	; 0x34
 8005964:	f000 beaa 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800596c:	f1a2 0110 	sub.w	r1, r2, #16
 8005970:	430b      	orrs	r3, r1
 8005972:	d139      	bne.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005974:	4b61      	ldr	r3, [pc, #388]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800597a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	2b00      	cmp	r3, #0
 8005984:	d104      	bne.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x6a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005986:	f7fd fe73 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 800598a:	6378      	str	r0, [r7, #52]	; 0x34
 800598c:	f000 be96 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005996:	d104      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005998:	f7fd fd48 	bl	800342c <HAL_RCC_GetSysClockFreq>
 800599c:	6378      	str	r0, [r7, #52]	; 0x34
 800599e:	f000 be8d 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80059a2:	4b56      	ldr	r3, [pc, #344]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ae:	d107      	bne.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059b6:	d103      	bne.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
    {
      frequency = HSI_VALUE;
 80059b8:	4b51      	ldr	r3, [pc, #324]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80059ba:	637b      	str	r3, [r7, #52]	; 0x34
 80059bc:	f000 be7e 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80059c0:	4b4e      	ldr	r3, [pc, #312]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80059c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d108      	bne.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059d4:	d104      	bne.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
    {
      frequency = LSE_VALUE;
 80059d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059da:	637b      	str	r3, [r7, #52]	; 0x34
 80059dc:	f000 be6e 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	637b      	str	r3, [r7, #52]	; 0x34
 80059e4:	f000 be6a 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80059e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ec:	f1a2 0120 	sub.w	r1, r2, #32
 80059f0:	430b      	orrs	r3, r1
 80059f2:	d158      	bne.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80059f4:	4b41      	ldr	r3, [pc, #260]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80059f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d104      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8005a06:	f7fd fe5b 	bl	80036c0 <HAL_RCC_GetPCLK3Freq>
 8005a0a:	6378      	str	r0, [r7, #52]	; 0x34
 8005a0c:	f000 be56 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d104      	bne.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005a16:	f7fd fd09 	bl	800342c <HAL_RCC_GetSysClockFreq>
 8005a1a:	6378      	str	r0, [r7, #52]	; 0x34
 8005a1c:	f000 be4e 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005a20:	4b36      	ldr	r3, [pc, #216]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a2c:	d106      	bne.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d103      	bne.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      frequency = HSI_VALUE;
 8005a34:	4b32      	ldr	r3, [pc, #200]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005a36:	637b      	str	r3, [r7, #52]	; 0x34
 8005a38:	f000 be40 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005a3c:	4b2f      	ldr	r3, [pc, #188]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d107      	bne.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d104      	bne.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
    {
      frequency = LSE_VALUE;
 8005a50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
 8005a56:	f000 be31 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005a5a:	4b28      	ldr	r3, [pc, #160]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	d11b      	bne.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d118      	bne.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a6c:	4b23      	ldr	r3, [pc, #140]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
 8005a78:	4b20      	ldr	r3, [pc, #128]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	0e1b      	lsrs	r3, r3, #24
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	e006      	b.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 8005a84:	4b1d      	ldr	r3, [pc, #116]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005a86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a8a:	041b      	lsls	r3, r3, #16
 8005a8c:	0e1b      	lsrs	r3, r3, #24
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	4a1c      	ldr	r2, [pc, #112]	; (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a98:	637b      	str	r3, [r7, #52]	; 0x34
 8005a9a:	f000 be0f 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa2:	f000 be0b 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aaa:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005aae:	430b      	orrs	r3, r1
 8005ab0:	d173      	bne.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005ab2:	4b12      	ldr	r3, [pc, #72]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005ab4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ab8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005abc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac4:	d104      	bne.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005ac6:	f7fd fcb1 	bl	800342c <HAL_RCC_GetSysClockFreq>
 8005aca:	6378      	str	r0, [r7, #52]	; 0x34
 8005acc:	f000 bdf6 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad6:	d108      	bne.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x802>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ad8:	f107 0318 	add.w	r3, r7, #24
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff f933 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae6:	f000 bde9 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10b      	bne.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8005af0:	f7fd fda4 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8005af4:	6378      	str	r0, [r7, #52]	; 0x34
 8005af6:	f000 bde1 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 8005afa:	bf00      	nop
 8005afc:	46020c00 	.word	0x46020c00
 8005b00:	00f42400 	.word	0x00f42400
 8005b04:	08008604 	.word	0x08008604
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005b0e:	d122      	bne.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005b10:	4baa      	ldr	r3, [pc, #680]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d118      	bne.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005b1c:	4ba7      	ldr	r3, [pc, #668]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 8005b28:	4ba4      	ldr	r3, [pc, #656]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	0e1b      	lsrs	r3, r3, #24
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	e006      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
 8005b34:	4ba1      	ldr	r3, [pc, #644]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005b36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b3a:	041b      	lsls	r3, r3, #16
 8005b3c:	0e1b      	lsrs	r3, r3, #24
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	4a9f      	ldr	r2, [pc, #636]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b48:	637b      	str	r3, [r7, #52]	; 0x34
 8005b4a:	f000 bdb7 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      else
      {
        frequency = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	637b      	str	r3, [r7, #52]	; 0x34
 8005b52:	f000 bdb3 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005b56:	4b99      	ldr	r3, [pc, #612]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b62:	d107      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b6a:	d103      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
    {
      frequency = HSE_VALUE;
 8005b6c:	4b95      	ldr	r3, [pc, #596]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b70:	f000 bda4 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005b74:	4b91      	ldr	r3, [pc, #580]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b80:	d107      	bne.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b88:	d103      	bne.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      frequency = HSI_VALUE;
 8005b8a:	4b8e      	ldr	r3, [pc, #568]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b8e:	f000 bd95 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	637b      	str	r3, [r7, #52]	; 0x34
 8005b96:	f000 bd91 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8005b9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b9e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005ba2:	430b      	orrs	r3, r1
 8005ba4:	d159      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8005ba6:	4b85      	ldr	r3, [pc, #532]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005ba8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d84c      	bhi.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8005bb8:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
 8005bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbe:	bf00      	nop
 8005bc0:	08005bf9 	.word	0x08005bf9
 8005bc4:	08005bd5 	.word	0x08005bd5
 8005bc8:	08005be7 	.word	0x08005be7
 8005bcc:	08005c03 	.word	0x08005c03
 8005bd0:	08005c0d 	.word	0x08005c0d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7fe ff4d 	bl	8004a78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005be2:	f000 bd6b 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005be6:	f107 030c 	add.w	r3, r7, #12
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff fa14 	bl	8005018 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bf4:	f000 bd62 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005bf8:	f7fd fd20 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8005bfc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005bfe:	f000 bd5d 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005c02:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c08:	f000 bd58 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005c0c:	4b6b      	ldr	r3, [pc, #428]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	d118      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x962>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c18:	4b68      	ldr	r3, [pc, #416]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 8005c24:	4b65      	ldr	r3, [pc, #404]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	0e1b      	lsrs	r3, r3, #24
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	e006      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
 8005c30:	4b62      	ldr	r3, [pc, #392]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005c32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c36:	041b      	lsls	r3, r3, #16
 8005c38:	0e1b      	lsrs	r3, r3, #24
 8005c3a:	f003 030f 	and.w	r3, r3, #15
 8005c3e:	4a60      	ldr	r2, [pc, #384]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c44:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c46:	f000 bd39 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c4e:	f000 bd35 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default:

        frequency = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c56:	f000 bd31 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c5e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8005c62:	430b      	orrs	r3, r1
 8005c64:	d167      	bne.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005c66:	4b55      	ldr	r3, [pc, #340]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c6c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005c70:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c78:	d036      	beq.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c80:	d855      	bhi.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c88:	d029      	beq.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c90:	d84d      	bhi.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c98:	d013      	beq.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ca0:	d845      	bhi.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d015      	beq.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ec>
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cae:	d13e      	bne.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fe fedf 	bl	8004a78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cbe:	f000 bcfd 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cc2:	f107 030c 	add.w	r3, r7, #12
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff f9a6 	bl	8005018 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cd0:	f000 bcf4 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005cd4:	f7fd fcb2 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8005cd8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005cda:	f000 bcef 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005cde:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005ce2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ce4:	f000 bcea 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005ce8:	4b34      	ldr	r3, [pc, #208]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0320 	and.w	r3, r3, #32
 8005cf0:	2b20      	cmp	r3, #32
 8005cf2:	d118      	bne.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005cf4:	4b31      	ldr	r3, [pc, #196]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
 8005d00:	4b2e      	ldr	r3, [pc, #184]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	0e1b      	lsrs	r3, r3, #24
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	e006      	b.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 8005d0c:	4b2b      	ldr	r3, [pc, #172]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005d0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d12:	041b      	lsls	r3, r3, #16
 8005d14:	0e1b      	lsrs	r3, r3, #24
 8005d16:	f003 030f 	and.w	r3, r3, #15
 8005d1a:	4a29      	ldr	r2, [pc, #164]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d20:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d22:	f000 bccb 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d2a:	f000 bcc7 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default:

        frequency = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d32:	f000 bcc3 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8005d36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d3a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005d3e:	430b      	orrs	r3, r1
 8005d40:	d153      	bne.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005d42:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d4c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d104      	bne.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005d54:	f7fd fc8c 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 8005d58:	6378      	str	r0, [r7, #52]	; 0x34
 8005d5a:	f000 bcaf 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d64:	d104      	bne.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0xa88>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005d66:	f7fd fb61 	bl	800342c <HAL_RCC_GetSysClockFreq>
 8005d6a:	6378      	str	r0, [r7, #52]	; 0x34
 8005d6c:	f000 bca6 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005d70:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d7c:	d107      	bne.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d84:	d103      	bne.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HSI_VALUE;
 8005d86:	4b0f      	ldr	r3, [pc, #60]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005d88:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8a:	f000 bc97 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8005d8e:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d123      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005da0:	d11f      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005da2:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00c      	beq.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
 8005dae:	4b03      	ldr	r3, [pc, #12]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	0e1b      	lsrs	r3, r3, #24
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	e00d      	b.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005dba:	bf00      	nop
 8005dbc:	46020c00 	.word	0x46020c00
 8005dc0:	08008604 	.word	0x08008604
 8005dc4:	00f42400 	.word	0x00f42400
 8005dc8:	4b9c      	ldr	r3, [pc, #624]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005dca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dce:	041b      	lsls	r3, r3, #16
 8005dd0:	0e1b      	lsrs	r3, r3, #24
 8005dd2:	f003 030f 	and.w	r3, r3, #15
 8005dd6:	4a9a      	ldr	r2, [pc, #616]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>)
 8005dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dde:	f000 bc6d 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	637b      	str	r3, [r7, #52]	; 0x34
 8005de6:	f000 bc69 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8005dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dee:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8005df2:	430b      	orrs	r3, r1
 8005df4:	d14c      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005df6:	4b91      	ldr	r3, [pc, #580]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dfc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e00:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d104      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005e08:	f7fd fc32 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 8005e0c:	6378      	str	r0, [r7, #52]	; 0x34
 8005e0e:	f000 bc55 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e18:	d104      	bne.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005e1a:	f7fd fb07 	bl	800342c <HAL_RCC_GetSysClockFreq>
 8005e1e:	6378      	str	r0, [r7, #52]	; 0x34
 8005e20:	f000 bc4c 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005e24:	4b85      	ldr	r3, [pc, #532]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e30:	d107      	bne.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e38:	d103      	bne.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
    {
      frequency = HSI_VALUE;
 8005e3a:	4b82      	ldr	r3, [pc, #520]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e3e:	f000 bc3d 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8005e42:	4b7e      	ldr	r3, [pc, #504]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	d11c      	bne.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e54:	d118      	bne.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005e56:	4b79      	ldr	r3, [pc, #484]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d005      	beq.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8005e62:	4b76      	ldr	r3, [pc, #472]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	0e1b      	lsrs	r3, r3, #24
 8005e68:	f003 030f 	and.w	r3, r3, #15
 8005e6c:	e006      	b.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8005e6e:	4b73      	ldr	r3, [pc, #460]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005e70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e74:	041b      	lsls	r3, r3, #16
 8005e76:	0e1b      	lsrs	r3, r3, #24
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	4a70      	ldr	r2, [pc, #448]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>)
 8005e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e82:	637b      	str	r3, [r7, #52]	; 0x34
 8005e84:	f000 bc1a 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e8c:	f000 bc16 	b.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e94:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	d151      	bne.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005e9c:	4b67      	ldr	r3, [pc, #412]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ea2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ea6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	2bc0      	cmp	r3, #192	; 0xc0
 8005eac:	d024      	beq.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	2bc0      	cmp	r3, #192	; 0xc0
 8005eb2:	d842      	bhi.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb6:	2b80      	cmp	r3, #128	; 0x80
 8005eb8:	d00d      	beq.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	2b80      	cmp	r3, #128	; 0x80
 8005ebe:	d83c      	bhi.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	2b40      	cmp	r3, #64	; 0x40
 8005eca:	d011      	beq.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
 8005ecc:	e035      	b.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005ece:	f7fd fbf7 	bl	80036c0 <HAL_RCC_GetPCLK3Freq>
 8005ed2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005ed4:	e3f2      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ed6:	4b59      	ldr	r3, [pc, #356]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee2:	d102      	bne.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
        {
          frequency = HSI_VALUE;
 8005ee4:	4b57      	ldr	r3, [pc, #348]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ee6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ee8:	e3e8      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eee:	e3e5      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8005ef0:	f7fd fa9c 	bl	800342c <HAL_RCC_GetSysClockFreq>
 8005ef4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005ef6:	e3e1      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005ef8:	4b50      	ldr	r3, [pc, #320]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d117      	bne.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f04:	4b4d      	ldr	r3, [pc, #308]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8005f10:	4b4a      	ldr	r3, [pc, #296]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	0e1b      	lsrs	r3, r3, #24
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	e006      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8005f1c:	4b47      	ldr	r3, [pc, #284]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005f1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f22:	041b      	lsls	r3, r3, #16
 8005f24:	0e1b      	lsrs	r3, r3, #24
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	4a45      	ldr	r2, [pc, #276]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>)
 8005f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f30:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f32:	e3c3      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f38:	e3c0      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      default:
      {
        frequency = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f3e:	e3bd      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f44:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	d147      	bne.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0xcf4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005f4c:	4b3b      	ldr	r3, [pc, #236]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f56:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d103      	bne.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005f5e:	f7fd fb87 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 8005f62:	6378      	str	r0, [r7, #52]	; 0x34
 8005f64:	e3aa      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f6c:	d103      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005f6e:	f7fd fa5d 	bl	800342c <HAL_RCC_GetSysClockFreq>
 8005f72:	6378      	str	r0, [r7, #52]	; 0x34
 8005f74:	e3a2      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005f76:	4b31      	ldr	r3, [pc, #196]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f82:	d106      	bne.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f8a:	d102      	bne.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
    {
      frequency = HSI_VALUE;
 8005f8c:	4b2d      	ldr	r3, [pc, #180]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f90:	e394      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005f92:	4b2a      	ldr	r3, [pc, #168]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0320 	and.w	r3, r3, #32
 8005f9a:	2b20      	cmp	r3, #32
 8005f9c:	d11b      	bne.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005fa4:	d117      	bne.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005fa6:	4b25      	ldr	r3, [pc, #148]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d005      	beq.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0xcd6>
 8005fb2:	4b22      	ldr	r3, [pc, #136]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	0e1b      	lsrs	r3, r3, #24
 8005fb8:	f003 030f 	and.w	r3, r3, #15
 8005fbc:	e006      	b.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xce4>
 8005fbe:	4b1f      	ldr	r3, [pc, #124]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005fc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fc4:	041b      	lsls	r3, r3, #16
 8005fc6:	0e1b      	lsrs	r3, r3, #24
 8005fc8:	f003 030f 	and.w	r3, r3, #15
 8005fcc:	4a1c      	ldr	r2, [pc, #112]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>)
 8005fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd4:	e372      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8005fda:	e36f      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fe0:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005fe4:	430b      	orrs	r3, r1
 8005fe6:	d16a      	bne.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005fe8:	4b14      	ldr	r3, [pc, #80]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ff2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d126      	bne.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005ffa:	4b10      	ldr	r3, [pc, #64]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0320 	and.w	r3, r3, #32
 8006002:	2b20      	cmp	r3, #32
 8006004:	d117      	bne.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0xd4e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006006:	4b0d      	ldr	r3, [pc, #52]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006012:	4b0a      	ldr	r3, [pc, #40]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	0e1b      	lsrs	r3, r3, #24
 8006018:	f003 030f 	and.w	r3, r3, #15
 800601c:	e006      	b.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
 800601e:	4b07      	ldr	r3, [pc, #28]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8006020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006024:	041b      	lsls	r3, r3, #16
 8006026:	0e1b      	lsrs	r3, r3, #24
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	4a04      	ldr	r2, [pc, #16]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>)
 800602e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006032:	637b      	str	r3, [r7, #52]	; 0x34
 8006034:	e342      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      else
      {
        frequency = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	637b      	str	r3, [r7, #52]	; 0x34
 800603a:	e33f      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800603c:	46020c00 	.word	0x46020c00
 8006040:	08008604 	.word	0x08008604
 8006044:	00f42400 	.word	0x00f42400
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006048:	4b93      	ldr	r3, [pc, #588]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 800604a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800604e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006056:	d112      	bne.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800605e:	d10e      	bne.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006060:	4b8d      	ldr	r3, [pc, #564]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8006062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800606a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800606e:	d102      	bne.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
      {
        frequency = LSI_VALUE / 128U;
 8006070:	23fa      	movs	r3, #250	; 0xfa
 8006072:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006074:	e322      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      else
      {
        frequency = LSI_VALUE;
 8006076:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800607a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800607c:	e31e      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800607e:	4b86      	ldr	r3, [pc, #536]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800608a:	d106      	bne.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006092:	d102      	bne.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8006094:	4b81      	ldr	r3, [pc, #516]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xfb4>)
 8006096:	637b      	str	r3, [r7, #52]	; 0x34
 8006098:	e310      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800609a:	4b7f      	ldr	r3, [pc, #508]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 800609c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d107      	bne.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdd0>
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ae:	d103      	bne.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdd0>
    {
      frequency = LSE_VALUE;
 80060b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060b4:	637b      	str	r3, [r7, #52]	; 0x34
 80060b6:	e301      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	637b      	str	r3, [r7, #52]	; 0x34
 80060bc:	e2fe      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80060be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060c2:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80060c6:	430b      	orrs	r3, r1
 80060c8:	d164      	bne.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80060ca:	4b73      	ldr	r3, [pc, #460]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 80060cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060d4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d120      	bne.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80060dc:	4b6e      	ldr	r3, [pc, #440]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0320 	and.w	r3, r3, #32
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	d117      	bne.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80060e8:	4b6b      	ldr	r3, [pc, #428]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d005      	beq.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
 80060f4:	4b68      	ldr	r3, [pc, #416]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	0e1b      	lsrs	r3, r3, #24
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	e006      	b.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006100:	4b65      	ldr	r3, [pc, #404]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8006102:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006106:	041b      	lsls	r3, r3, #16
 8006108:	0e1b      	lsrs	r3, r3, #24
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	4a64      	ldr	r2, [pc, #400]	; (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>)
 8006110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006114:	637b      	str	r3, [r7, #52]	; 0x34
 8006116:	e2d1      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      else
      {
        frequency = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	637b      	str	r3, [r7, #52]	; 0x34
 800611c:	e2ce      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800611e:	4b5e      	ldr	r3, [pc, #376]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8006120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800612c:	d112      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0xe6c>
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006134:	d10e      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0xe6c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006136:	4b58      	ldr	r3, [pc, #352]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8006138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800613c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006140:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006144:	d102      	bne.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
      {
        frequency = LSI_VALUE / 128U;
 8006146:	23fa      	movs	r3, #250	; 0xfa
 8006148:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800614a:	e2b7      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      else
      {
        frequency = LSI_VALUE;
 800614c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006152:	e2b3      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006154:	4b50      	ldr	r3, [pc, #320]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800615c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006160:	d106      	bne.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0xe88>
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006168:	d102      	bne.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0xe88>
    {
      frequency = HSI_VALUE;
 800616a:	4b4c      	ldr	r3, [pc, #304]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xfb4>)
 800616c:	637b      	str	r3, [r7, #52]	; 0x34
 800616e:	e2a5      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006170:	4b49      	ldr	r3, [pc, #292]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8006172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b02      	cmp	r3, #2
 800617c:	d107      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xea6>
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006184:	d103      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xea6>
    {
      frequency = LSE_VALUE;
 8006186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800618a:	637b      	str	r3, [r7, #52]	; 0x34
 800618c:	e296      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	637b      	str	r3, [r7, #52]	; 0x34
 8006192:	e293      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006198:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800619c:	430b      	orrs	r3, r1
 800619e:	d147      	bne.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80061a0:	4b3d      	ldr	r3, [pc, #244]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 80061a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061a6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80061aa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d103      	bne.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80061b2:	f7fd fa5d 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 80061b6:	6378      	str	r0, [r7, #52]	; 0x34
 80061b8:	e280      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80061ba:	4b37      	ldr	r3, [pc, #220]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 80061bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061c8:	d112      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061d0:	d10e      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80061d2:	4b31      	ldr	r3, [pc, #196]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 80061d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061e0:	d102      	bne.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
      {
        frequency = LSI_VALUE / 128U;
 80061e2:	23fa      	movs	r3, #250	; 0xfa
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80061e6:	e269      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      else
      {
        frequency = LSI_VALUE;
 80061e8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80061ec:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80061ee:	e265      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80061f0:	4b29      	ldr	r3, [pc, #164]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061fc:	d106      	bne.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006204:	d102      	bne.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
    {
      frequency = HSI_VALUE;
 8006206:	4b25      	ldr	r3, [pc, #148]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xfb4>)
 8006208:	637b      	str	r3, [r7, #52]	; 0x34
 800620a:	e257      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800620c:	4b22      	ldr	r3, [pc, #136]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 800620e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b02      	cmp	r3, #2
 8006218:	d107      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0xf42>
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006220:	d103      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0xf42>
    {
      frequency = LSE_VALUE;
 8006222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006226:	637b      	str	r3, [r7, #52]	; 0x34
 8006228:	e248      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	637b      	str	r3, [r7, #52]	; 0x34
 800622e:	e245      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006234:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8006238:	430b      	orrs	r3, r1
 800623a:	d133      	bne.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfbc>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800623c:	4b16      	ldr	r3, [pc, #88]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 800623e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006242:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006246:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006248:	4b13      	ldr	r3, [pc, #76]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006254:	d105      	bne.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	2b00      	cmp	r3, #0
 800625a:	d102      	bne.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      frequency = HSE_VALUE;
 800625c:	4b0f      	ldr	r3, [pc, #60]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xfb4>)
 800625e:	637b      	str	r3, [r7, #52]	; 0x34
 8006260:	e22c      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006268:	d107      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xf92>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800626a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe fc02 	bl	8004a78 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	637b      	str	r3, [r7, #52]	; 0x34
 8006278:	e220      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006280:	d107      	bne.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0xfaa>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006282:	f107 0318 	add.w	r3, r7, #24
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe fd5e 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	637b      	str	r3, [r7, #52]	; 0x34
 8006290:	e214      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	637b      	str	r3, [r7, #52]	; 0x34
 8006296:	e211      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 8006298:	46020c00 	.word	0x46020c00
 800629c:	00f42400 	.word	0x00f42400
 80062a0:	08008604 	.word	0x08008604
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80062a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062a8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80062ac:	430b      	orrs	r3, r1
 80062ae:	d156      	bne.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x1076>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80062b0:	4b98      	ldr	r3, [pc, #608]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80062b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80062ba:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062c2:	d028      	beq.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062ca:	d845      	bhi.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x1070>
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062d2:	d013      	beq.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x1014>
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062da:	d83d      	bhi.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x1070>
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d004      	beq.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
 80062e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062e8:	d004      	beq.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>
 80062ea:	e035      	b.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x1070>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80062ec:	f7fd f9d4 	bl	8003698 <HAL_RCC_GetPCLK2Freq>
 80062f0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80062f2:	e1e3      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80062f4:	f7fd f89a 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80062f8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80062fa:	e1df      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062fc:	4b85      	ldr	r3, [pc, #532]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006308:	d102      	bne.n	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x1028>
        {
          frequency = HSI_VALUE;
 800630a:	4b83      	ldr	r3, [pc, #524]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800630c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800630e:	e1d5      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006314:	e1d2      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006316:	4b7f      	ldr	r3, [pc, #508]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b20      	cmp	r3, #32
 8006320:	d117      	bne.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x106a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006322:	4b7c      	ldr	r3, [pc, #496]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d005      	beq.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x1052>
 800632e:	4b79      	ldr	r3, [pc, #484]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	0e1b      	lsrs	r3, r3, #24
 8006334:	f003 030f 	and.w	r3, r3, #15
 8006338:	e006      	b.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>
 800633a:	4b76      	ldr	r3, [pc, #472]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 800633c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006340:	041b      	lsls	r3, r3, #16
 8006342:	0e1b      	lsrs	r3, r3, #24
 8006344:	f003 030f 	and.w	r3, r3, #15
 8006348:	4a74      	ldr	r2, [pc, #464]	; (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 800634a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800634e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006350:	e1b4      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006356:	e1b1      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default:

        frequency = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800635c:	e1ae      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800635e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006362:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8006366:	430b      	orrs	r3, r1
 8006368:	d156      	bne.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x1130>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800636a:	4b6a      	ldr	r3, [pc, #424]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 800636c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006374:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800637c:	d028      	beq.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e8>
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006384:	d845      	bhi.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x112a>
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800638c:	d013      	beq.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006394:	d83d      	bhi.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x112a>
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	2b00      	cmp	r3, #0
 800639a:	d004      	beq.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a2:	d004      	beq.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x10c6>
 80063a4:	e035      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x112a>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80063a6:	f7fd f963 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 80063aa:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80063ac:	e186      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80063ae:	f7fd f83d 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80063b2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80063b4:	e182      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063b6:	4b57      	ldr	r3, [pc, #348]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063c2:	d102      	bne.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x10e2>
        {
          frequency = HSI_VALUE;
 80063c4:	4b54      	ldr	r3, [pc, #336]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80063c6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80063c8:	e178      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063ce:	e175      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80063d0:	4b50      	ldr	r3, [pc, #320]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0320 	and.w	r3, r3, #32
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d117      	bne.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80063dc:	4b4d      	ldr	r3, [pc, #308]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 80063e8:	4b4a      	ldr	r3, [pc, #296]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	0e1b      	lsrs	r3, r3, #24
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	e006      	b.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80063f4:	4b47      	ldr	r3, [pc, #284]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80063f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063fa:	041b      	lsls	r3, r3, #16
 80063fc:	0e1b      	lsrs	r3, r3, #24
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	4a46      	ldr	r2, [pc, #280]	; (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006408:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800640a:	e157      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006410:	e154      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default:

        frequency = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006416:	e151      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800641c:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8006420:	430b      	orrs	r3, r1
 8006422:	d17d      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006424:	4b3b      	ldr	r3, [pc, #236]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800642a:	f003 0318 	and.w	r3, r3, #24
 800642e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	2b18      	cmp	r3, #24
 8006434:	d86a      	bhi.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8006436:	a201      	add	r2, pc, #4	; (adr r2, 800643c <HAL_RCCEx_GetPeriphCLKFreq+0x1154>)
 8006438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643c:	080064a1 	.word	0x080064a1
 8006440:	0800650d 	.word	0x0800650d
 8006444:	0800650d 	.word	0x0800650d
 8006448:	0800650d 	.word	0x0800650d
 800644c:	0800650d 	.word	0x0800650d
 8006450:	0800650d 	.word	0x0800650d
 8006454:	0800650d 	.word	0x0800650d
 8006458:	0800650d 	.word	0x0800650d
 800645c:	080064a9 	.word	0x080064a9
 8006460:	0800650d 	.word	0x0800650d
 8006464:	0800650d 	.word	0x0800650d
 8006468:	0800650d 	.word	0x0800650d
 800646c:	0800650d 	.word	0x0800650d
 8006470:	0800650d 	.word	0x0800650d
 8006474:	0800650d 	.word	0x0800650d
 8006478:	0800650d 	.word	0x0800650d
 800647c:	080064b1 	.word	0x080064b1
 8006480:	0800650d 	.word	0x0800650d
 8006484:	0800650d 	.word	0x0800650d
 8006488:	0800650d 	.word	0x0800650d
 800648c:	0800650d 	.word	0x0800650d
 8006490:	0800650d 	.word	0x0800650d
 8006494:	0800650d 	.word	0x0800650d
 8006498:	0800650d 	.word	0x0800650d
 800649c:	080064cb 	.word	0x080064cb
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80064a0:	f7fd f90e 	bl	80036c0 <HAL_RCC_GetPCLK3Freq>
 80064a4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80064a6:	e109      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80064a8:	f7fc ffc0 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80064ac:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80064ae:	e105      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064b0:	4b18      	ldr	r3, [pc, #96]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064bc:	d102      	bne.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 80064be:	4b16      	ldr	r3, [pc, #88]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80064c0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80064c2:	e0fb      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064c8:	e0f8      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80064ca:	4b12      	ldr	r3, [pc, #72]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	d117      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064d6:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 80064e2:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	0e1b      	lsrs	r3, r3, #24
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	e006      	b.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 80064ee:	4b09      	ldr	r3, [pc, #36]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80064f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064f4:	041b      	lsls	r3, r3, #16
 80064f6:	0e1b      	lsrs	r3, r3, #24
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	4a07      	ldr	r2, [pc, #28]	; (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 80064fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006502:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006504:	e0da      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800650a:	e0d7      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default:

        frequency = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006510:	e0d4      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 8006512:	bf00      	nop
 8006514:	46020c00 	.word	0x46020c00
 8006518:	00f42400 	.word	0x00f42400
 800651c:	08008604 	.word	0x08008604
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006524:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8006528:	430b      	orrs	r3, r1
 800652a:	d155      	bne.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800652c:	4b66      	ldr	r3, [pc, #408]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 800652e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006532:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006536:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800653e:	d013      	beq.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006546:	d844      	bhi.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800654e:	d013      	beq.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006556:	d83c      	bhi.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	2b00      	cmp	r3, #0
 800655c:	d014      	beq.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006564:	d014      	beq.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x12a8>
 8006566:	e034      	b.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006568:	f107 0318 	add.w	r3, r7, #24
 800656c:	4618      	mov	r0, r3
 800656e:	f7fe fbeb 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006576:	e0a1      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800657c:	4618      	mov	r0, r3
 800657e:	f7fe fa7b 	bl	8004a78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006586:	e099      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006588:	f7fc ff50 	bl	800342c <HAL_RCC_GetSysClockFreq>
 800658c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800658e:	e095      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006590:	4b4d      	ldr	r3, [pc, #308]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0320 	and.w	r3, r3, #32
 8006598:	2b20      	cmp	r3, #32
 800659a:	d117      	bne.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800659c:	4b4a      	ldr	r3, [pc, #296]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
 80065a8:	4b47      	ldr	r3, [pc, #284]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	0e1b      	lsrs	r3, r3, #24
 80065ae:	f003 030f 	and.w	r3, r3, #15
 80065b2:	e006      	b.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 80065b4:	4b44      	ldr	r3, [pc, #272]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 80065b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065ba:	041b      	lsls	r3, r3, #16
 80065bc:	0e1b      	lsrs	r3, r3, #24
 80065be:	f003 030f 	and.w	r3, r3, #15
 80065c2:	4a42      	ldr	r2, [pc, #264]	; (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>)
 80065c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80065ca:	e077      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
          frequency = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065d0:	e074      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>

      default:

        frequency = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065d6:	e071      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80065d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065dc:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80065e0:	430b      	orrs	r3, r1
 80065e2:	d131      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80065e4:	4b38      	ldr	r3, [pc, #224]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 80065e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065ee:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80065f0:	4b35      	ldr	r3, [pc, #212]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 80065f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d106      	bne.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x1324>
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	2b00      	cmp	r3, #0
 8006602:	d103      	bne.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x1324>
    {
      frequency = LSE_VALUE;
 8006604:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006608:	637b      	str	r3, [r7, #52]	; 0x34
 800660a:	e057      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800660c:	4b2e      	ldr	r3, [pc, #184]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 800660e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800661a:	d112      	bne.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x135a>
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006622:	d10e      	bne.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x135a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006624:	4b28      	ldr	r3, [pc, #160]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 8006626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800662a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006632:	d102      	bne.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x1352>
      {
        frequency = LSI_VALUE / 128U;
 8006634:	23fa      	movs	r3, #250	; 0xfa
 8006636:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006638:	e040      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
      else
      {
        frequency = LSI_VALUE;
 800663a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800663e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006640:	e03c      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	637b      	str	r3, [r7, #52]	; 0x34
 8006646:	e039      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8006648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800664c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006650:	430b      	orrs	r3, r1
 8006652:	d131      	bne.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006654:	4b1c      	ldr	r3, [pc, #112]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 8006656:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800665a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800665e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006660:	4b19      	ldr	r3, [pc, #100]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800666c:	d105      	bne.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x1392>
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	2b00      	cmp	r3, #0
 8006672:	d102      	bne.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x1392>
    {
      frequency = HSI48_VALUE;
 8006674:	4b16      	ldr	r3, [pc, #88]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>)
 8006676:	637b      	str	r3, [r7, #52]	; 0x34
 8006678:	e020      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800667a:	4b13      	ldr	r3, [pc, #76]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006686:	d106      	bne.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x13ae>
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668e:	d102      	bne.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x13ae>
    {
      frequency = HSI48_VALUE >> 1U ;
 8006690:	4b10      	ldr	r3, [pc, #64]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ec>)
 8006692:	637b      	str	r3, [r7, #52]	; 0x34
 8006694:	e012      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8006696:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800669e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a2:	d106      	bne.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066aa:	d102      	bne.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
    {
      frequency = HSI_VALUE;
 80066ac:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13f0>)
 80066ae:	637b      	str	r3, [r7, #52]	; 0x34
 80066b0:	e004      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	637b      	str	r3, [r7, #52]	; 0x34
 80066b6:	e001      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80066bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3738      	adds	r7, #56	; 0x38
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bdb0      	pop	{r4, r5, r7, pc}
 80066c6:	bf00      	nop
 80066c8:	46020c00 	.word	0x46020c00
 80066cc:	08008604 	.word	0x08008604
 80066d0:	02dc6c00 	.word	0x02dc6c00
 80066d4:	016e3600 	.word	0x016e3600
 80066d8:	00f42400 	.word	0x00f42400

080066dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;
  assert_param(IS_RCC_PLLSOURCE(pll2->PLL2Source));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d00c      	beq.n	8006706 <RCCEx_PLL2_Config+0x2a>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d008      	beq.n	8006706 <RCCEx_PLL2_Config+0x2a>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d004      	beq.n	8006706 <RCCEx_PLL2_Config+0x2a>
 80066fc:	f241 0156 	movw	r1, #4182	; 0x1056
 8006700:	4869      	ldr	r0, [pc, #420]	; (80068a8 <RCCEx_PLL2_Config+0x1cc>)
 8006702:	f7fa f890 	bl	8000826 <assert_failed>
  assert_param(IS_RCC_PLLM_VALUE(pll2->PLL2M));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <RCCEx_PLL2_Config+0x3a>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b10      	cmp	r3, #16
 8006714:	d904      	bls.n	8006720 <RCCEx_PLL2_Config+0x44>
 8006716:	f241 0157 	movw	r1, #4183	; 0x1057
 800671a:	4863      	ldr	r0, [pc, #396]	; (80068a8 <RCCEx_PLL2_Config+0x1cc>)
 800671c:	f7fa f883 	bl	8000826 <assert_failed>
  assert_param(IS_RCC_PLLN_VALUE(pll2->PLL2N));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	2b03      	cmp	r3, #3
 8006726:	d904      	bls.n	8006732 <RCCEx_PLL2_Config+0x56>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006730:	d904      	bls.n	800673c <RCCEx_PLL2_Config+0x60>
 8006732:	f241 0158 	movw	r1, #4184	; 0x1058
 8006736:	485c      	ldr	r0, [pc, #368]	; (80068a8 <RCCEx_PLL2_Config+0x1cc>)
 8006738:	f7fa f875 	bl	8000826 <assert_failed>
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <RCCEx_PLL2_Config+0x70>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	2b80      	cmp	r3, #128	; 0x80
 800674a:	d904      	bls.n	8006756 <RCCEx_PLL2_Config+0x7a>
 800674c:	f241 0159 	movw	r1, #4185	; 0x1059
 8006750:	4855      	ldr	r0, [pc, #340]	; (80068a8 <RCCEx_PLL2_Config+0x1cc>)
 8006752:	f7fa f868 	bl	8000826 <assert_failed>
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <RCCEx_PLL2_Config+0x8a>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	2b80      	cmp	r3, #128	; 0x80
 8006764:	d904      	bls.n	8006770 <RCCEx_PLL2_Config+0x94>
 8006766:	f241 015a 	movw	r1, #4186	; 0x105a
 800676a:	484f      	ldr	r0, [pc, #316]	; (80068a8 <RCCEx_PLL2_Config+0x1cc>)
 800676c:	f7fa f85b 	bl	8000826 <assert_failed>
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <RCCEx_PLL2_Config+0xa4>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	2b80      	cmp	r3, #128	; 0x80
 800677e:	d904      	bls.n	800678a <RCCEx_PLL2_Config+0xae>
 8006780:	f241 015b 	movw	r1, #4187	; 0x105b
 8006784:	4848      	ldr	r0, [pc, #288]	; (80068a8 <RCCEx_PLL2_Config+0x1cc>)
 8006786:	f7fa f84e 	bl	8000826 <assert_failed>

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800678a:	4b48      	ldr	r3, [pc, #288]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a47      	ldr	r2, [pc, #284]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 8006790:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006794:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006796:	f7fa f9f3 	bl	8000b80 <HAL_GetTick>
 800679a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800679c:	e008      	b.n	80067b0 <RCCEx_PLL2_Config+0xd4>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800679e:	f7fa f9ef 	bl	8000b80 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d901      	bls.n	80067b0 <RCCEx_PLL2_Config+0xd4>
    {
      return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e077      	b.n	80068a0 <RCCEx_PLL2_Config+0x1c4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067b0:	4b3e      	ldr	r3, [pc, #248]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1f0      	bne.n	800679e <RCCEx_PLL2_Config+0xc2>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80067bc:	4b3b      	ldr	r3, [pc, #236]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80067c4:	f023 0303 	bic.w	r3, r3, #3
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6811      	ldr	r1, [r2, #0]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	6852      	ldr	r2, [r2, #4]
 80067d0:	3a01      	subs	r2, #1
 80067d2:	0212      	lsls	r2, r2, #8
 80067d4:	430a      	orrs	r2, r1
 80067d6:	4935      	ldr	r1, [pc, #212]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	62cb      	str	r3, [r1, #44]	; 0x2c
 80067dc:	4b33      	ldr	r3, [pc, #204]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 80067de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067e0:	4b33      	ldr	r3, [pc, #204]	; (80068b0 <RCCEx_PLL2_Config+0x1d4>)
 80067e2:	4013      	ands	r3, r2
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6892      	ldr	r2, [r2, #8]
 80067e8:	3a01      	subs	r2, #1
 80067ea:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	68d2      	ldr	r2, [r2, #12]
 80067f2:	3a01      	subs	r2, #1
 80067f4:	0252      	lsls	r2, r2, #9
 80067f6:	b292      	uxth	r2, r2
 80067f8:	4311      	orrs	r1, r2
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	6912      	ldr	r2, [r2, #16]
 80067fe:	3a01      	subs	r2, #1
 8006800:	0412      	lsls	r2, r2, #16
 8006802:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006806:	4311      	orrs	r1, r2
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	6952      	ldr	r2, [r2, #20]
 800680c:	3a01      	subs	r2, #1
 800680e:	0612      	lsls	r2, r2, #24
 8006810:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006814:	430a      	orrs	r2, r1
 8006816:	4925      	ldr	r1, [pc, #148]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 8006818:	4313      	orrs	r3, r2
 800681a:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800681c:	4b23      	ldr	r3, [pc, #140]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	f023 020c 	bic.w	r2, r3, #12
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	4920      	ldr	r1, [pc, #128]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 800682a:	4313      	orrs	r3, r2
 800682c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800682e:	4b1f      	ldr	r3, [pc, #124]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 8006830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	491d      	ldr	r1, [pc, #116]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 8006838:	4313      	orrs	r3, r2
 800683a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800683c:	4b1b      	ldr	r3, [pc, #108]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	4a1a      	ldr	r2, [pc, #104]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 8006842:	f023 0310 	bic.w	r3, r3, #16
 8006846:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006848:	4b18      	ldr	r3, [pc, #96]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 800684a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006850:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	69d2      	ldr	r2, [r2, #28]
 8006858:	00d2      	lsls	r2, r2, #3
 800685a:	4914      	ldr	r1, [pc, #80]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 800685c:	4313      	orrs	r3, r2
 800685e:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006860:	4b12      	ldr	r3, [pc, #72]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	4a11      	ldr	r2, [pc, #68]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 8006866:	f043 0310 	orr.w	r3, r3, #16
 800686a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800686c:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a0e      	ldr	r2, [pc, #56]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 8006872:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006876:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006878:	f7fa f982 	bl	8000b80 <HAL_GetTick>
 800687c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800687e:	e008      	b.n	8006892 <RCCEx_PLL2_Config+0x1b6>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006880:	f7fa f97e 	bl	8000b80 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <RCCEx_PLL2_Config+0x1b6>
    {
      return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e006      	b.n	80068a0 <RCCEx_PLL2_Config+0x1c4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006892:	4b06      	ldr	r3, [pc, #24]	; (80068ac <RCCEx_PLL2_Config+0x1d0>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0f0      	beq.n	8006880 <RCCEx_PLL2_Config+0x1a4>
    }
  }
  return HAL_OK;
 800689e:	2300      	movs	r3, #0

}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	08008538 	.word	0x08008538
 80068ac:	46020c00 	.word	0x46020c00
 80068b0:	80800000 	.word	0x80800000

080068b4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  assert_param(IS_RCC_PLLSOURCE(pll3->PLL3Source));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d00c      	beq.n	80068de <RCCEx_PLL3_Config+0x2a>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d008      	beq.n	80068de <RCCEx_PLL3_Config+0x2a>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d004      	beq.n	80068de <RCCEx_PLL3_Config+0x2a>
 80068d4:	f241 019f 	movw	r1, #4255	; 0x109f
 80068d8:	4869      	ldr	r0, [pc, #420]	; (8006a80 <RCCEx_PLL3_Config+0x1cc>)
 80068da:	f7f9 ffa4 	bl	8000826 <assert_failed>
  assert_param(IS_RCC_PLLM_VALUE(pll3->PLL3M));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <RCCEx_PLL3_Config+0x3a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	2b10      	cmp	r3, #16
 80068ec:	d904      	bls.n	80068f8 <RCCEx_PLL3_Config+0x44>
 80068ee:	f44f 5185 	mov.w	r1, #4256	; 0x10a0
 80068f2:	4863      	ldr	r0, [pc, #396]	; (8006a80 <RCCEx_PLL3_Config+0x1cc>)
 80068f4:	f7f9 ff97 	bl	8000826 <assert_failed>
  assert_param(IS_RCC_PLLN_VALUE(pll3->PLL3N));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d904      	bls.n	800690a <RCCEx_PLL3_Config+0x56>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006908:	d904      	bls.n	8006914 <RCCEx_PLL3_Config+0x60>
 800690a:	f241 01a1 	movw	r1, #4257	; 0x10a1
 800690e:	485c      	ldr	r0, [pc, #368]	; (8006a80 <RCCEx_PLL3_Config+0x1cc>)
 8006910:	f7f9 ff89 	bl	8000826 <assert_failed>
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <RCCEx_PLL3_Config+0x70>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	2b80      	cmp	r3, #128	; 0x80
 8006922:	d904      	bls.n	800692e <RCCEx_PLL3_Config+0x7a>
 8006924:	f241 01a2 	movw	r1, #4258	; 0x10a2
 8006928:	4855      	ldr	r0, [pc, #340]	; (8006a80 <RCCEx_PLL3_Config+0x1cc>)
 800692a:	f7f9 ff7c 	bl	8000826 <assert_failed>
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <RCCEx_PLL3_Config+0x8a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b80      	cmp	r3, #128	; 0x80
 800693c:	d904      	bls.n	8006948 <RCCEx_PLL3_Config+0x94>
 800693e:	f241 01a3 	movw	r1, #4259	; 0x10a3
 8006942:	484f      	ldr	r0, [pc, #316]	; (8006a80 <RCCEx_PLL3_Config+0x1cc>)
 8006944:	f7f9 ff6f 	bl	8000826 <assert_failed>
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <RCCEx_PLL3_Config+0xa4>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	2b80      	cmp	r3, #128	; 0x80
 8006956:	d904      	bls.n	8006962 <RCCEx_PLL3_Config+0xae>
 8006958:	f241 01a4 	movw	r1, #4260	; 0x10a4
 800695c:	4848      	ldr	r0, [pc, #288]	; (8006a80 <RCCEx_PLL3_Config+0x1cc>)
 800695e:	f7f9 ff62 	bl	8000826 <assert_failed>

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006962:	4b48      	ldr	r3, [pc, #288]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a47      	ldr	r2, [pc, #284]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 8006968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800696c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800696e:	f7fa f907 	bl	8000b80 <HAL_GetTick>
 8006972:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006974:	e008      	b.n	8006988 <RCCEx_PLL3_Config+0xd4>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006976:	f7fa f903 	bl	8000b80 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <RCCEx_PLL3_Config+0xd4>
    {
      return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e077      	b.n	8006a78 <RCCEx_PLL3_Config+0x1c4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006988:	4b3e      	ldr	r3, [pc, #248]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1f0      	bne.n	8006976 <RCCEx_PLL3_Config+0xc2>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006994:	4b3b      	ldr	r3, [pc, #236]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 8006996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006998:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800699c:	f023 0303 	bic.w	r3, r3, #3
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6811      	ldr	r1, [r2, #0]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6852      	ldr	r2, [r2, #4]
 80069a8:	3a01      	subs	r2, #1
 80069aa:	0212      	lsls	r2, r2, #8
 80069ac:	430a      	orrs	r2, r1
 80069ae:	4935      	ldr	r1, [pc, #212]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	630b      	str	r3, [r1, #48]	; 0x30
 80069b4:	4b33      	ldr	r3, [pc, #204]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 80069b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069b8:	4b33      	ldr	r3, [pc, #204]	; (8006a88 <RCCEx_PLL3_Config+0x1d4>)
 80069ba:	4013      	ands	r3, r2
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6892      	ldr	r2, [r2, #8]
 80069c0:	3a01      	subs	r2, #1
 80069c2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	68d2      	ldr	r2, [r2, #12]
 80069ca:	3a01      	subs	r2, #1
 80069cc:	0252      	lsls	r2, r2, #9
 80069ce:	b292      	uxth	r2, r2
 80069d0:	4311      	orrs	r1, r2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6912      	ldr	r2, [r2, #16]
 80069d6:	3a01      	subs	r2, #1
 80069d8:	0412      	lsls	r2, r2, #16
 80069da:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80069de:	4311      	orrs	r1, r2
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6952      	ldr	r2, [r2, #20]
 80069e4:	3a01      	subs	r2, #1
 80069e6:	0612      	lsls	r2, r2, #24
 80069e8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80069ec:	430a      	orrs	r2, r1
 80069ee:	4925      	ldr	r1, [pc, #148]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80069f4:	4b23      	ldr	r3, [pc, #140]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 80069f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f8:	f023 020c 	bic.w	r2, r3, #12
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	4920      	ldr	r1, [pc, #128]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006a06:	4b1f      	ldr	r3, [pc, #124]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 8006a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	491d      	ldr	r1, [pc, #116]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006a14:	4b1b      	ldr	r3, [pc, #108]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 8006a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a18:	4a1a      	ldr	r2, [pc, #104]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 8006a1a:	f023 0310 	bic.w	r3, r3, #16
 8006a1e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a20:	4b18      	ldr	r3, [pc, #96]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 8006a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a28:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	69d2      	ldr	r2, [r2, #28]
 8006a30:	00d2      	lsls	r2, r2, #3
 8006a32:	4914      	ldr	r1, [pc, #80]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006a38:	4b12      	ldr	r3, [pc, #72]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3c:	4a11      	ldr	r2, [pc, #68]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 8006a3e:	f043 0310 	orr.w	r3, r3, #16
 8006a42:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006a44:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a0e      	ldr	r2, [pc, #56]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 8006a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a4e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a50:	f7fa f896 	bl	8000b80 <HAL_GetTick>
 8006a54:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a56:	e008      	b.n	8006a6a <RCCEx_PLL3_Config+0x1b6>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a58:	f7fa f892 	bl	8000b80 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <RCCEx_PLL3_Config+0x1b6>
    {
      return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e006      	b.n	8006a78 <RCCEx_PLL3_Config+0x1c4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a6a:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <RCCEx_PLL3_Config+0x1d0>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0f0      	beq.n	8006a58 <RCCEx_PLL3_Config+0x1a4>
    }
  }
  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	08008538 	.word	0x08008538
 8006a84:	46020c00 	.word	0x46020c00
 8006a88:	80800000 	.word	0x80800000

08006a8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e0c9      	b.n	8006c32 <HAL_UART_Init+0x1a6>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d041      	beq.n	8006b2a <HAL_UART_Init+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a64      	ldr	r2, [pc, #400]	; (8006c3c <HAL_UART_Init+0x1b0>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d07d      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a62      	ldr	r2, [pc, #392]	; (8006c40 <HAL_UART_Init+0x1b4>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d078      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a61      	ldr	r2, [pc, #388]	; (8006c44 <HAL_UART_Init+0x1b8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d073      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a5f      	ldr	r2, [pc, #380]	; (8006c48 <HAL_UART_Init+0x1bc>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d06e      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a5e      	ldr	r2, [pc, #376]	; (8006c4c <HAL_UART_Init+0x1c0>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d069      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a5c      	ldr	r2, [pc, #368]	; (8006c50 <HAL_UART_Init+0x1c4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d064      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a5b      	ldr	r2, [pc, #364]	; (8006c54 <HAL_UART_Init+0x1c8>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d05f      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a59      	ldr	r2, [pc, #356]	; (8006c58 <HAL_UART_Init+0x1cc>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d05a      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a58      	ldr	r2, [pc, #352]	; (8006c5c <HAL_UART_Init+0x1d0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d055      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 8006b08:	d050      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a54      	ldr	r2, [pc, #336]	; (8006c60 <HAL_UART_Init+0x1d4>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d04b      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a52      	ldr	r2, [pc, #328]	; (8006c64 <HAL_UART_Init+0x1d8>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d046      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006b1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b22:	4851      	ldr	r0, [pc, #324]	; (8006c68 <HAL_UART_Init+0x1dc>)
 8006b24:	f7f9 fe7f 	bl	8000826 <assert_failed>
 8006b28:	e040      	b.n	8006bac <HAL_UART_Init+0x120>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a43      	ldr	r2, [pc, #268]	; (8006c3c <HAL_UART_Init+0x1b0>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d03b      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a41      	ldr	r2, [pc, #260]	; (8006c40 <HAL_UART_Init+0x1b4>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d036      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a40      	ldr	r2, [pc, #256]	; (8006c44 <HAL_UART_Init+0x1b8>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d031      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a3e      	ldr	r2, [pc, #248]	; (8006c48 <HAL_UART_Init+0x1bc>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d02c      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a3d      	ldr	r2, [pc, #244]	; (8006c4c <HAL_UART_Init+0x1c0>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d027      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a3b      	ldr	r2, [pc, #236]	; (8006c50 <HAL_UART_Init+0x1c4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d022      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a3a      	ldr	r2, [pc, #232]	; (8006c54 <HAL_UART_Init+0x1c8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d01d      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a38      	ldr	r2, [pc, #224]	; (8006c58 <HAL_UART_Init+0x1cc>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d018      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a37      	ldr	r2, [pc, #220]	; (8006c5c <HAL_UART_Init+0x1d0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 8006b8c:	d00e      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a33      	ldr	r2, [pc, #204]	; (8006c60 <HAL_UART_Init+0x1d4>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d009      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a31      	ldr	r2, [pc, #196]	; (8006c64 <HAL_UART_Init+0x1d8>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d004      	beq.n	8006bac <HAL_UART_Init+0x120>
 8006ba2:	f240 1145 	movw	r1, #325	; 0x145
 8006ba6:	4830      	ldr	r0, [pc, #192]	; (8006c68 <HAL_UART_Init+0x1dc>)
 8006ba8:	f7f9 fe3d 	bl	8000826 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <HAL_UART_Init+0x138>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7f9 fe58 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2224      	movs	r2, #36	; 0x24
 8006bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0201 	bic.w	r2, r2, #1
 8006bda:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fbc3 	bl	8007368 <UART_SetConfig>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d101      	bne.n	8006bec <HAL_UART_Init+0x160>
  {
    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e022      	b.n	8006c32 <HAL_UART_Init+0x1a6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <HAL_UART_Init+0x16e>
  {
    UART_AdvFeatureConfig(huart);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fe3b 	bl	8007870 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f042 0201 	orr.w	r2, r2, #1
 8006c28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 ffa0 	bl	8007b70 <UART_CheckIdleState>
 8006c30:	4603      	mov	r3, r0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	40013800 	.word	0x40013800
 8006c40:	50013800 	.word	0x50013800
 8006c44:	40004400 	.word	0x40004400
 8006c48:	50004400 	.word	0x50004400
 8006c4c:	40004800 	.word	0x40004800
 8006c50:	50004800 	.word	0x50004800
 8006c54:	40004c00 	.word	0x40004c00
 8006c58:	50004c00 	.word	0x50004c00
 8006c5c:	40005000 	.word	0x40005000
 8006c60:	46002400 	.word	0x46002400
 8006c64:	56002400 	.word	0x56002400
 8006c68:	08008574 	.word	0x08008574

08006c6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b08a      	sub	sp, #40	; 0x28
 8006c70:	af02      	add	r7, sp, #8
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	f040 808b 	bne.w	8006d9e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <HAL_UART_Transmit+0x28>
 8006c8e:	88fb      	ldrh	r3, [r7, #6]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e083      	b.n	8006da0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca2:	2b80      	cmp	r3, #128	; 0x80
 8006ca4:	d107      	bne.n	8006cb6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cb4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2221      	movs	r2, #33	; 0x21
 8006cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cc6:	f7f9 ff5b 	bl	8000b80 <HAL_GetTick>
 8006cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	88fa      	ldrh	r2, [r7, #6]
 8006cd0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	88fa      	ldrh	r2, [r7, #6]
 8006cd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce4:	d108      	bne.n	8006cf8 <HAL_UART_Transmit+0x8c>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d104      	bne.n	8006cf8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	61bb      	str	r3, [r7, #24]
 8006cf6:	e003      	b.n	8006d00 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d00:	e030      	b.n	8006d64 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2180      	movs	r1, #128	; 0x80
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 ffd9 	bl	8007cc4 <UART_WaitOnFlagUntilTimeout>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d005      	beq.n	8006d24 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e03d      	b.n	8006da0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10b      	bne.n	8006d42 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	3302      	adds	r3, #2
 8006d3e:	61bb      	str	r3, [r7, #24]
 8006d40:	e007      	b.n	8006d52 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	781a      	ldrb	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1c8      	bne.n	8006d02 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2200      	movs	r2, #0
 8006d78:	2140      	movs	r1, #64	; 0x40
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 ffa2 	bl	8007cc4 <UART_WaitOnFlagUntilTimeout>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d005      	beq.n	8006d92 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e006      	b.n	8006da0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e000      	b.n	8006da0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006d9e:	2302      	movs	r3, #2
  }
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3720      	adds	r7, #32
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b0ae      	sub	sp, #184	; 0xb8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006dce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006dd2:	f640 030f 	movw	r3, #2063	; 0x80f
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 8006ddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d11b      	bne.n	8006e1c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006de4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d015      	beq.n	8006e1c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006df0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006df4:	f003 0320 	and.w	r3, r3, #32
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d105      	bne.n	8006e08 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006dfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d009      	beq.n	8006e1c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 827e 	beq.w	800730e <HAL_UART_IRQHandler+0x566>
      {
        huart->RxISR(huart);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	4798      	blx	r3
      }
      return;
 8006e1a:	e278      	b.n	800730e <HAL_UART_IRQHandler+0x566>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 80fd 	beq.w	8007020 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006e26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e2a:	4b7a      	ldr	r3, [pc, #488]	; (8007014 <HAL_UART_IRQHandler+0x26c>)
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d106      	bne.n	8006e40 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006e32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e36:	4b78      	ldr	r3, [pc, #480]	; (8007018 <HAL_UART_IRQHandler+0x270>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 80f0 	beq.w	8007020 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d011      	beq.n	8006e70 <HAL_UART_IRQHandler+0xc8>
 8006e4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00b      	beq.n	8006e70 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e66:	f043 0201 	orr.w	r2, r3, #1
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d011      	beq.n	8006ea0 <HAL_UART_IRQHandler+0xf8>
 8006e7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e96:	f043 0204 	orr.w	r2, r3, #4
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ea0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d011      	beq.n	8006ed0 <HAL_UART_IRQHandler+0x128>
 8006eac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00b      	beq.n	8006ed0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2204      	movs	r2, #4
 8006ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec6:	f043 0202 	orr.w	r2, r3, #2
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ed0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ed4:	f003 0308 	and.w	r3, r3, #8
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d017      	beq.n	8006f0c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006edc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d105      	bne.n	8006ef4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006ee8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006eec:	4b49      	ldr	r3, [pc, #292]	; (8007014 <HAL_UART_IRQHandler+0x26c>)
 8006eee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00b      	beq.n	8006f0c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2208      	movs	r2, #8
 8006efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f02:	f043 0208 	orr.w	r2, r3, #8
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d012      	beq.n	8006f3e <HAL_UART_IRQHandler+0x196>
 8006f18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00c      	beq.n	8006f3e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f34:	f043 0220 	orr.w	r2, r3, #32
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 81e4 	beq.w	8007312 <HAL_UART_IRQHandler+0x56a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f4e:	f003 0320 	and.w	r3, r3, #32
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d013      	beq.n	8006f7e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f5a:	f003 0320 	and.w	r3, r3, #32
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d105      	bne.n	8006f6e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d007      	beq.n	8006f7e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f92:	2b40      	cmp	r3, #64	; 0x40
 8006f94:	d005      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d02e      	beq.n	8007000 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fef5 	bl	8007d92 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb2:	2b40      	cmp	r3, #64	; 0x40
 8006fb4:	d120      	bne.n	8006ff8 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d017      	beq.n	8006ff0 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fc6:	4a15      	ldr	r2, [pc, #84]	; (800701c <HAL_UART_IRQHandler+0x274>)
 8006fc8:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7f9 ff9b 	bl	8000f0c <HAL_DMA_Abort_IT>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d019      	beq.n	8007010 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006fea:	4610      	mov	r0, r2
 8006fec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fee:	e00f      	b.n	8007010 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f9a3 	bl	800733c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff6:	e00b      	b.n	8007010 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f99f 	bl	800733c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ffe:	e007      	b.n	8007010 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f99b 	bl	800733c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800700e:	e180      	b.n	8007312 <HAL_UART_IRQHandler+0x56a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007010:	bf00      	nop
    return;
 8007012:	e17e      	b.n	8007312 <HAL_UART_IRQHandler+0x56a>
 8007014:	10000001 	.word	0x10000001
 8007018:	04000120 	.word	0x04000120
 800701c:	08007e5f 	.word	0x08007e5f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007024:	2b01      	cmp	r3, #1
 8007026:	f040 8129 	bne.w	800727c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800702a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800702e:	f003 0310 	and.w	r3, r3, #16
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 8122 	beq.w	800727c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007038:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800703c:	f003 0310 	and.w	r3, r3, #16
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 811b 	beq.w	800727c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2210      	movs	r2, #16
 800704c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007058:	2b40      	cmp	r3, #64	; 0x40
 800705a:	f040 8091 	bne.w	8007180 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007068:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800706c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 8150 	beq.w	8007316 <HAL_UART_IRQHandler+0x56e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800707c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8007080:	429a      	cmp	r2, r3
 8007082:	f080 8148 	bcs.w	8007316 <HAL_UART_IRQHandler+0x56e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800708c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007098:	2b81      	cmp	r3, #129	; 0x81
 800709a:	d060      	beq.n	800715e <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	677b      	str	r3, [r7, #116]	; 0x74
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070ca:	e841 2300 	strex	r3, r2, [r1]
 80070ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1e2      	bne.n	800709c <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3308      	adds	r3, #8
 80070dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070e0:	e853 3f00 	ldrex	r3, [r3]
 80070e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070e8:	f023 0301 	bic.w	r3, r3, #1
 80070ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3308      	adds	r3, #8
 80070f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80070fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007100:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e3      	bne.n	80070d6 <HAL_UART_IRQHandler+0x32e>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2220      	movs	r2, #32
 8007112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007124:	e853 3f00 	ldrex	r3, [r3]
 8007128:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800712a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800712c:	f023 0310 	bic.w	r3, r3, #16
 8007130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800713e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007140:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007142:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007144:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007146:	e841 2300 	strex	r3, r2, [r1]
 800714a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800714c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1e4      	bne.n	800711c <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007158:	4618      	mov	r0, r3
 800715a:	f7f9 fe5b 	bl	8000e14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2202      	movs	r2, #2
 8007162:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007170:	b29b      	uxth	r3, r3
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	b29b      	uxth	r3, r3
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f8e9 	bl	8007350 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800717e:	e0ca      	b.n	8007316 <HAL_UART_IRQHandler+0x56e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800718c:	b29b      	uxth	r3, r3
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800719a:	b29b      	uxth	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 80bc 	beq.w	800731a <HAL_UART_IRQHandler+0x572>
          && (nb_rx_data > 0U))
 80071a2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 80b7 	beq.w	800731a <HAL_UART_IRQHandler+0x572>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	461a      	mov	r2, r3
 80071ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071ce:	647b      	str	r3, [r7, #68]	; 0x44
 80071d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e4      	bne.n	80071ac <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	623b      	str	r3, [r7, #32]
   return(result);
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071f8:	f023 0301 	bic.w	r3, r3, #1
 80071fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3308      	adds	r3, #8
 8007206:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800720a:	633a      	str	r2, [r7, #48]	; 0x30
 800720c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e1      	bne.n	80071e2 <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	e853 3f00 	ldrex	r3, [r3]
 800723e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f023 0310 	bic.w	r3, r3, #16
 8007246:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007254:	61fb      	str	r3, [r7, #28]
 8007256:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	69b9      	ldr	r1, [r7, #24]
 800725a:	69fa      	ldr	r2, [r7, #28]
 800725c:	e841 2300 	strex	r3, r2, [r1]
 8007260:	617b      	str	r3, [r7, #20]
   return(result);
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e4      	bne.n	8007232 <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800726e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f86b 	bl	8007350 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800727a:	e04e      	b.n	800731a <HAL_UART_IRQHandler+0x572>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800727c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007284:	2b00      	cmp	r3, #0
 8007286:	d014      	beq.n	80072b2 <HAL_UART_IRQHandler+0x50a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007288:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800728c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007290:	2b00      	cmp	r3, #0
 8007292:	d105      	bne.n	80072a0 <HAL_UART_IRQHandler+0x4f8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007294:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007298:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d008      	beq.n	80072b2 <HAL_UART_IRQHandler+0x50a>
  {
    if (huart->TxISR != NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d03a      	beq.n	800731e <HAL_UART_IRQHandler+0x576>
    {
      huart->TxISR(huart);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	4798      	blx	r3
    }
    return;
 80072b0:	e035      	b.n	800731e <HAL_UART_IRQHandler+0x576>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d009      	beq.n	80072d2 <HAL_UART_IRQHandler+0x52a>
 80072be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_UART_IRQHandler+0x52a>
  {
    UART_EndTransmit_IT(huart);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fddd 	bl	8007e8a <UART_EndTransmit_IT>
    return;
 80072d0:	e026      	b.n	8007320 <HAL_UART_IRQHandler+0x578>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80072d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d009      	beq.n	80072f2 <HAL_UART_IRQHandler+0x54a>
 80072de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <HAL_UART_IRQHandler+0x54a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fe02 	bl	8007ef4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072f0:	e016      	b.n	8007320 <HAL_UART_IRQHandler+0x578>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80072f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d010      	beq.n	8007320 <HAL_UART_IRQHandler+0x578>
 80072fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007302:	2b00      	cmp	r3, #0
 8007304:	da0c      	bge.n	8007320 <HAL_UART_IRQHandler+0x578>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fdea 	bl	8007ee0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800730c:	e008      	b.n	8007320 <HAL_UART_IRQHandler+0x578>
      return;
 800730e:	bf00      	nop
 8007310:	e006      	b.n	8007320 <HAL_UART_IRQHandler+0x578>
    return;
 8007312:	bf00      	nop
 8007314:	e004      	b.n	8007320 <HAL_UART_IRQHandler+0x578>
      return;
 8007316:	bf00      	nop
 8007318:	e002      	b.n	8007320 <HAL_UART_IRQHandler+0x578>
      return;
 800731a:	bf00      	nop
 800731c:	e000      	b.n	8007320 <HAL_UART_IRQHandler+0x578>
    return;
 800731e:	bf00      	nop
  }
}
 8007320:	37b8      	adds	r7, #184	; 0xb8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop

08007328 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800736c:	b094      	sub	sp, #80	; 0x50
 800736e:	af00      	add	r7, sp, #0
 8007370:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	4b2d      	ldr	r3, [pc, #180]	; (8007434 <UART_SetConfig+0xcc>)
 800737e:	429a      	cmp	r2, r3
 8007380:	d904      	bls.n	800738c <UART_SetConfig+0x24>
 8007382:	f640 4152 	movw	r1, #3154	; 0xc52
 8007386:	482c      	ldr	r0, [pc, #176]	; (8007438 <UART_SetConfig+0xd0>)
 8007388:	f7f9 fa4d 	bl	8000826 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007394:	d00d      	beq.n	80073b2 <UART_SetConfig+0x4a>
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d009      	beq.n	80073b2 <UART_SetConfig+0x4a>
 800739e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a6:	d004      	beq.n	80073b2 <UART_SetConfig+0x4a>
 80073a8:	f640 4153 	movw	r1, #3155	; 0xc53
 80073ac:	4822      	ldr	r0, [pc, #136]	; (8007438 <UART_SetConfig+0xd0>)
 80073ae:	f7f9 fa3a 	bl	8000826 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	4b21      	ldr	r3, [pc, #132]	; (800743c <UART_SetConfig+0xd4>)
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d004      	beq.n	80073c6 <UART_SetConfig+0x5e>
 80073bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	4b1f      	ldr	r3, [pc, #124]	; (8007440 <UART_SetConfig+0xd8>)
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d10e      	bne.n	80073e4 <UART_SetConfig+0x7c>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 80073c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d03a      	beq.n	8007444 <UART_SetConfig+0xdc>
 80073ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d6:	d035      	beq.n	8007444 <UART_SetConfig+0xdc>
 80073d8:	f640 4156 	movw	r1, #3158	; 0xc56
 80073dc:	4816      	ldr	r0, [pc, #88]	; (8007438 <UART_SetConfig+0xd0>)
 80073de:	f7f9 fa22 	bl	8000826 <assert_failed>
 80073e2:	e02f      	b.n	8007444 <UART_SetConfig+0xdc>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80073e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ec:	d012      	beq.n	8007414 <UART_SetConfig+0xac>
 80073ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00e      	beq.n	8007414 <UART_SetConfig+0xac>
 80073f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073fe:	d009      	beq.n	8007414 <UART_SetConfig+0xac>
 8007400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007408:	d004      	beq.n	8007414 <UART_SetConfig+0xac>
 800740a:	f640 415a 	movw	r1, #3162	; 0xc5a
 800740e:	480a      	ldr	r0, [pc, #40]	; (8007438 <UART_SetConfig+0xd0>)
 8007410:	f7f9 fa09 	bl	8000826 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8007414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d014      	beq.n	8007446 <UART_SetConfig+0xde>
 800741c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007424:	d00f      	beq.n	8007446 <UART_SetConfig+0xde>
 8007426:	f640 415b 	movw	r1, #3163	; 0xc5b
 800742a:	4803      	ldr	r0, [pc, #12]	; (8007438 <UART_SetConfig+0xd0>)
 800742c:	f7f9 f9fb 	bl	8000826 <assert_failed>
 8007430:	e009      	b.n	8007446 <UART_SetConfig+0xde>
 8007432:	bf00      	nop
 8007434:	01312cff 	.word	0x01312cff
 8007438:	08008574 	.word	0x08008574
 800743c:	46002400 	.word	0x46002400
 8007440:	56002400 	.word	0x56002400
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8007444:	bf00      	nop
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00e      	beq.n	800746c <UART_SetConfig+0x104>
 800744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007456:	d009      	beq.n	800746c <UART_SetConfig+0x104>
 8007458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007460:	d004      	beq.n	800746c <UART_SetConfig+0x104>
 8007462:	f640 415e 	movw	r1, #3166	; 0xc5e
 8007466:	488f      	ldr	r0, [pc, #572]	; (80076a4 <UART_SetConfig+0x33c>)
 8007468:	f7f9 f9dd 	bl	8000826 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	f023 030c 	bic.w	r3, r3, #12
 8007474:	2b00      	cmp	r3, #0
 8007476:	d103      	bne.n	8007480 <UART_SetConfig+0x118>
 8007478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d104      	bne.n	800748a <UART_SetConfig+0x122>
 8007480:	f640 415f 	movw	r1, #3167	; 0xc5f
 8007484:	4887      	ldr	r0, [pc, #540]	; (80076a4 <UART_SetConfig+0x33c>)
 8007486:	f7f9 f9ce 	bl	8000826 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d013      	beq.n	80074ba <UART_SetConfig+0x152>
 8007492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800749a:	d00e      	beq.n	80074ba <UART_SetConfig+0x152>
 800749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074a4:	d009      	beq.n	80074ba <UART_SetConfig+0x152>
 80074a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074ae:	d004      	beq.n	80074ba <UART_SetConfig+0x152>
 80074b0:	f44f 6146 	mov.w	r1, #3168	; 0xc60
 80074b4:	487b      	ldr	r0, [pc, #492]	; (80076a4 <UART_SetConfig+0x33c>)
 80074b6:	f7f9 f9b6 	bl	8000826 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80074ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d009      	beq.n	80074d6 <UART_SetConfig+0x16e>
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ca:	d004      	beq.n	80074d6 <UART_SetConfig+0x16e>
 80074cc:	f640 4161 	movw	r1, #3169	; 0xc61
 80074d0:	4874      	ldr	r0, [pc, #464]	; (80076a4 <UART_SetConfig+0x33c>)
 80074d2:	f7f9 f9a8 	bl	8000826 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d030      	beq.n	8007540 <UART_SetConfig+0x1d8>
 80074de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d02c      	beq.n	8007540 <UART_SetConfig+0x1d8>
 80074e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d028      	beq.n	8007540 <UART_SetConfig+0x1d8>
 80074ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d024      	beq.n	8007540 <UART_SetConfig+0x1d8>
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d020      	beq.n	8007540 <UART_SetConfig+0x1d8>
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	2b05      	cmp	r3, #5
 8007504:	d01c      	beq.n	8007540 <UART_SetConfig+0x1d8>
 8007506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	2b06      	cmp	r3, #6
 800750c:	d018      	beq.n	8007540 <UART_SetConfig+0x1d8>
 800750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	2b07      	cmp	r3, #7
 8007514:	d014      	beq.n	8007540 <UART_SetConfig+0x1d8>
 8007516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	2b08      	cmp	r3, #8
 800751c:	d010      	beq.n	8007540 <UART_SetConfig+0x1d8>
 800751e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	2b09      	cmp	r3, #9
 8007524:	d00c      	beq.n	8007540 <UART_SetConfig+0x1d8>
 8007526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	2b0a      	cmp	r3, #10
 800752c:	d008      	beq.n	8007540 <UART_SetConfig+0x1d8>
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	2b0b      	cmp	r3, #11
 8007534:	d004      	beq.n	8007540 <UART_SetConfig+0x1d8>
 8007536:	f640 4162 	movw	r1, #3170	; 0xc62
 800753a:	485a      	ldr	r0, [pc, #360]	; (80076a4 <UART_SetConfig+0x33c>)
 800753c:	f7f9 f973 	bl	8000826 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	431a      	orrs	r2, r3
 800754a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	431a      	orrs	r2, r3
 8007550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	4313      	orrs	r3, r2
 8007556:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4952      	ldr	r1, [pc, #328]	; (80076a8 <UART_SetConfig+0x340>)
 8007560:	4019      	ands	r1, r3
 8007562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007568:	430b      	orrs	r3, r1
 800756a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	68d9      	ldr	r1, [r3, #12]
 800757a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	ea40 0301 	orr.w	r3, r0, r1
 8007582:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	4b47      	ldr	r3, [pc, #284]	; (80076ac <UART_SetConfig+0x344>)
 8007590:	429a      	cmp	r2, r3
 8007592:	d009      	beq.n	80075a8 <UART_SetConfig+0x240>
 8007594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	4b45      	ldr	r3, [pc, #276]	; (80076b0 <UART_SetConfig+0x348>)
 800759a:	429a      	cmp	r2, r3
 800759c:	d004      	beq.n	80075a8 <UART_SetConfig+0x240>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800759e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a0:	6a1a      	ldr	r2, [r3, #32]
 80075a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a4:	4313      	orrs	r3, r2
 80075a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80075b2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80075b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075bc:	430b      	orrs	r3, r1
 80075be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c6:	f023 000f 	bic.w	r0, r3, #15
 80075ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	ea40 0301 	orr.w	r3, r0, r1
 80075d6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	4b35      	ldr	r3, [pc, #212]	; (80076b4 <UART_SetConfig+0x34c>)
 80075de:	429a      	cmp	r2, r3
 80075e0:	d102      	bne.n	80075e8 <UART_SetConfig+0x280>
 80075e2:	2301      	movs	r3, #1
 80075e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80075e6:	e029      	b.n	800763c <UART_SetConfig+0x2d4>
 80075e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	4b32      	ldr	r3, [pc, #200]	; (80076b8 <UART_SetConfig+0x350>)
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d102      	bne.n	80075f8 <UART_SetConfig+0x290>
 80075f2:	2302      	movs	r3, #2
 80075f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80075f6:	e021      	b.n	800763c <UART_SetConfig+0x2d4>
 80075f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	4b2f      	ldr	r3, [pc, #188]	; (80076bc <UART_SetConfig+0x354>)
 80075fe:	429a      	cmp	r2, r3
 8007600:	d102      	bne.n	8007608 <UART_SetConfig+0x2a0>
 8007602:	2304      	movs	r3, #4
 8007604:	64bb      	str	r3, [r7, #72]	; 0x48
 8007606:	e019      	b.n	800763c <UART_SetConfig+0x2d4>
 8007608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	4b2c      	ldr	r3, [pc, #176]	; (80076c0 <UART_SetConfig+0x358>)
 800760e:	429a      	cmp	r2, r3
 8007610:	d102      	bne.n	8007618 <UART_SetConfig+0x2b0>
 8007612:	2308      	movs	r3, #8
 8007614:	64bb      	str	r3, [r7, #72]	; 0x48
 8007616:	e011      	b.n	800763c <UART_SetConfig+0x2d4>
 8007618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	4b29      	ldr	r3, [pc, #164]	; (80076c4 <UART_SetConfig+0x35c>)
 800761e:	429a      	cmp	r2, r3
 8007620:	d102      	bne.n	8007628 <UART_SetConfig+0x2c0>
 8007622:	2310      	movs	r3, #16
 8007624:	64bb      	str	r3, [r7, #72]	; 0x48
 8007626:	e009      	b.n	800763c <UART_SetConfig+0x2d4>
 8007628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	4b1f      	ldr	r3, [pc, #124]	; (80076ac <UART_SetConfig+0x344>)
 800762e:	429a      	cmp	r2, r3
 8007630:	d102      	bne.n	8007638 <UART_SetConfig+0x2d0>
 8007632:	2320      	movs	r3, #32
 8007634:	64bb      	str	r3, [r7, #72]	; 0x48
 8007636:	e001      	b.n	800763c <UART_SetConfig+0x2d4>
 8007638:	2300      	movs	r3, #0
 800763a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800763c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	4b1a      	ldr	r3, [pc, #104]	; (80076ac <UART_SetConfig+0x344>)
 8007642:	429a      	cmp	r2, r3
 8007644:	d005      	beq.n	8007652 <UART_SetConfig+0x2ea>
 8007646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	4b19      	ldr	r3, [pc, #100]	; (80076b0 <UART_SetConfig+0x348>)
 800764c:	429a      	cmp	r2, r3
 800764e:	f040 8087 	bne.w	8007760 <UART_SetConfig+0x3f8>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007654:	2200      	movs	r2, #0
 8007656:	623b      	str	r3, [r7, #32]
 8007658:	627a      	str	r2, [r7, #36]	; 0x24
 800765a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800765e:	f7fd fe43 	bl	80052e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007662:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 80ea 	beq.w	8007840 <UART_SetConfig+0x4d8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	4a15      	ldr	r2, [pc, #84]	; (80076c8 <UART_SetConfig+0x360>)
 8007672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007676:	461a      	mov	r2, r3
 8007678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800767a:	fbb3 f3f2 	udiv	r3, r3, r2
 800767e:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	4613      	mov	r3, r2
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	4413      	add	r3, r2
 800768a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800768c:	429a      	cmp	r2, r3
 800768e:	d305      	bcc.n	800769c <UART_SetConfig+0x334>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007698:	429a      	cmp	r2, r3
 800769a:	d917      	bls.n	80076cc <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80076a2:	e05c      	b.n	800775e <UART_SetConfig+0x3f6>
 80076a4:	08008574 	.word	0x08008574
 80076a8:	cfff69f3 	.word	0xcfff69f3
 80076ac:	46002400 	.word	0x46002400
 80076b0:	56002400 	.word	0x56002400
 80076b4:	40013800 	.word	0x40013800
 80076b8:	40004400 	.word	0x40004400
 80076bc:	40004800 	.word	0x40004800
 80076c0:	40004c00 	.word	0x40004c00
 80076c4:	40005000 	.word	0x40005000
 80076c8:	080086c4 	.word	0x080086c4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ce:	2200      	movs	r2, #0
 80076d0:	61bb      	str	r3, [r7, #24]
 80076d2:	61fa      	str	r2, [r7, #28]
 80076d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	4a64      	ldr	r2, [pc, #400]	; (800786c <UART_SetConfig+0x504>)
 80076da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076de:	b29b      	uxth	r3, r3
 80076e0:	2200      	movs	r2, #0
 80076e2:	613b      	str	r3, [r7, #16]
 80076e4:	617a      	str	r2, [r7, #20]
 80076e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80076ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80076ee:	f7f8 fdc3 	bl	8000278 <__aeabi_uldivmod>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	4610      	mov	r0, r2
 80076f8:	4619      	mov	r1, r3
 80076fa:	f04f 0200 	mov.w	r2, #0
 80076fe:	f04f 0300 	mov.w	r3, #0
 8007702:	020b      	lsls	r3, r1, #8
 8007704:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007708:	0202      	lsls	r2, r0, #8
 800770a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800770c:	6849      	ldr	r1, [r1, #4]
 800770e:	0849      	lsrs	r1, r1, #1
 8007710:	2000      	movs	r0, #0
 8007712:	460c      	mov	r4, r1
 8007714:	4605      	mov	r5, r0
 8007716:	eb12 0804 	adds.w	r8, r2, r4
 800771a:	eb43 0905 	adc.w	r9, r3, r5
 800771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	60bb      	str	r3, [r7, #8]
 8007726:	60fa      	str	r2, [r7, #12]
 8007728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800772c:	4640      	mov	r0, r8
 800772e:	4649      	mov	r1, r9
 8007730:	f7f8 fda2 	bl	8000278 <__aeabi_uldivmod>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	4613      	mov	r3, r2
 800773a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800773c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800773e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007742:	d308      	bcc.n	8007756 <UART_SetConfig+0x3ee>
 8007744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800774a:	d204      	bcs.n	8007756 <UART_SetConfig+0x3ee>
        {
          huart->Instance->BRR = usartdiv;
 800774c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007752:	60da      	str	r2, [r3, #12]
 8007754:	e003      	b.n	800775e <UART_SetConfig+0x3f6>
        }
        else
        {
          ret = HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800775c:	e070      	b.n	8007840 <UART_SetConfig+0x4d8>
 800775e:	e06f      	b.n	8007840 <UART_SetConfig+0x4d8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007768:	d13c      	bne.n	80077e4 <UART_SetConfig+0x47c>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800776a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800776c:	2200      	movs	r2, #0
 800776e:	603b      	str	r3, [r7, #0]
 8007770:	607a      	str	r2, [r7, #4]
 8007772:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007776:	f7fd fdb7 	bl	80052e8 <HAL_RCCEx_GetPeriphCLKFreq>
 800777a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800777c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	d05e      	beq.n	8007840 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	4a39      	ldr	r2, [pc, #228]	; (800786c <UART_SetConfig+0x504>)
 8007788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800778c:	461a      	mov	r2, r3
 800778e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007790:	fbb3 f3f2 	udiv	r3, r3, r2
 8007794:	005a      	lsls	r2, r3, #1
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	085b      	lsrs	r3, r3, #1
 800779c:	441a      	add	r2, r3
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077aa:	2b0f      	cmp	r3, #15
 80077ac:	d916      	bls.n	80077dc <UART_SetConfig+0x474>
 80077ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b4:	d212      	bcs.n	80077dc <UART_SetConfig+0x474>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	f023 030f 	bic.w	r3, r3, #15
 80077be:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c2:	085b      	lsrs	r3, r3, #1
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80077ce:	4313      	orrs	r3, r2
 80077d0:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80077d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80077d8:	60da      	str	r2, [r3, #12]
 80077da:	e031      	b.n	8007840 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80077e2:	e02d      	b.n	8007840 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80077e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077e6:	2200      	movs	r2, #0
 80077e8:	469a      	mov	sl, r3
 80077ea:	4693      	mov	fp, r2
 80077ec:	4650      	mov	r0, sl
 80077ee:	4659      	mov	r1, fp
 80077f0:	f7fd fd7a 	bl	80052e8 <HAL_RCCEx_GetPeriphCLKFreq>
 80077f4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80077f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d021      	beq.n	8007840 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	4a1a      	ldr	r2, [pc, #104]	; (800786c <UART_SetConfig+0x504>)
 8007802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007806:	461a      	mov	r2, r3
 8007808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800780a:	fbb3 f2f2 	udiv	r2, r3, r2
 800780e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	085b      	lsrs	r3, r3, #1
 8007814:	441a      	add	r2, r3
 8007816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	fbb2 f3f3 	udiv	r3, r2, r3
 800781e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007822:	2b0f      	cmp	r3, #15
 8007824:	d909      	bls.n	800783a <UART_SetConfig+0x4d2>
 8007826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800782c:	d205      	bcs.n	800783a <UART_SetConfig+0x4d2>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800782e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007830:	b29a      	uxth	r2, r3
 8007832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	60da      	str	r2, [r3, #12]
 8007838:	e002      	b.n	8007840 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	2201      	movs	r2, #1
 8007844:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	2201      	movs	r2, #1
 800784c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007852:	2200      	movs	r2, #0
 8007854:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	2200      	movs	r2, #0
 800785a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800785c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007860:	4618      	mov	r0, r3
 8007862:	3750      	adds	r7, #80	; 0x50
 8007864:	46bd      	mov	sp, r7
 8007866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800786a:	bf00      	nop
 800786c:	080086c4 	.word	0x080086c4

08007870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787c:	2bff      	cmp	r3, #255	; 0xff
 800787e:	d904      	bls.n	800788a <UART_AdvFeatureConfig+0x1a>
 8007880:	f640 41e7 	movw	r1, #3303	; 0xce7
 8007884:	4884      	ldr	r0, [pc, #528]	; (8007a98 <UART_AdvFeatureConfig+0x228>)
 8007886:	f7f8 ffce 	bl	8000826 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d018      	beq.n	80078c8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d009      	beq.n	80078b2 <UART_AdvFeatureConfig+0x42>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078a6:	d004      	beq.n	80078b2 <UART_AdvFeatureConfig+0x42>
 80078a8:	f640 41ec 	movw	r1, #3308	; 0xcec
 80078ac:	487a      	ldr	r0, [pc, #488]	; (8007a98 <UART_AdvFeatureConfig+0x228>)
 80078ae:	f7f8 ffba 	bl	8000826 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078cc:	f003 0302 	and.w	r3, r3, #2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d018      	beq.n	8007906 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d009      	beq.n	80078f0 <UART_AdvFeatureConfig+0x80>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078e4:	d004      	beq.n	80078f0 <UART_AdvFeatureConfig+0x80>
 80078e6:	f640 41f3 	movw	r1, #3315	; 0xcf3
 80078ea:	486b      	ldr	r0, [pc, #428]	; (8007a98 <UART_AdvFeatureConfig+0x228>)
 80078ec:	f7f8 ff9b 	bl	8000826 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790a:	f003 0304 	and.w	r3, r3, #4
 800790e:	2b00      	cmp	r3, #0
 8007910:	d018      	beq.n	8007944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007916:	2b00      	cmp	r3, #0
 8007918:	d009      	beq.n	800792e <UART_AdvFeatureConfig+0xbe>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007922:	d004      	beq.n	800792e <UART_AdvFeatureConfig+0xbe>
 8007924:	f640 41fa 	movw	r1, #3322	; 0xcfa
 8007928:	485b      	ldr	r0, [pc, #364]	; (8007a98 <UART_AdvFeatureConfig+0x228>)
 800792a:	f7f8 ff7c 	bl	8000826 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b00      	cmp	r3, #0
 800794e:	d018      	beq.n	8007982 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007954:	2b00      	cmp	r3, #0
 8007956:	d009      	beq.n	800796c <UART_AdvFeatureConfig+0xfc>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007960:	d004      	beq.n	800796c <UART_AdvFeatureConfig+0xfc>
 8007962:	f640 5101 	movw	r1, #3329	; 0xd01
 8007966:	484c      	ldr	r0, [pc, #304]	; (8007a98 <UART_AdvFeatureConfig+0x228>)
 8007968:	f7f8 ff5d 	bl	8000826 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007986:	f003 0310 	and.w	r3, r3, #16
 800798a:	2b00      	cmp	r3, #0
 800798c:	d018      	beq.n	80079c0 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007992:	2b00      	cmp	r3, #0
 8007994:	d009      	beq.n	80079aa <UART_AdvFeatureConfig+0x13a>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800799e:	d004      	beq.n	80079aa <UART_AdvFeatureConfig+0x13a>
 80079a0:	f640 5108 	movw	r1, #3336	; 0xd08
 80079a4:	483c      	ldr	r0, [pc, #240]	; (8007a98 <UART_AdvFeatureConfig+0x228>)
 80079a6:	f7f8 ff3e 	bl	8000826 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c4:	f003 0320 	and.w	r3, r3, #32
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d018      	beq.n	80079fe <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d009      	beq.n	80079e8 <UART_AdvFeatureConfig+0x178>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079dc:	d004      	beq.n	80079e8 <UART_AdvFeatureConfig+0x178>
 80079de:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 80079e2:	482d      	ldr	r0, [pc, #180]	; (8007a98 <UART_AdvFeatureConfig+0x228>)
 80079e4:	f7f8 ff1f 	bl	8000826 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 808d 	beq.w	8007b26 <UART_AdvFeatureConfig+0x2b6>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a22      	ldr	r2, [pc, #136]	; (8007a9c <UART_AdvFeatureConfig+0x22c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d031      	beq.n	8007a7a <UART_AdvFeatureConfig+0x20a>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a21      	ldr	r2, [pc, #132]	; (8007aa0 <UART_AdvFeatureConfig+0x230>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d02c      	beq.n	8007a7a <UART_AdvFeatureConfig+0x20a>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a1f      	ldr	r2, [pc, #124]	; (8007aa4 <UART_AdvFeatureConfig+0x234>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d027      	beq.n	8007a7a <UART_AdvFeatureConfig+0x20a>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a1e      	ldr	r2, [pc, #120]	; (8007aa8 <UART_AdvFeatureConfig+0x238>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d022      	beq.n	8007a7a <UART_AdvFeatureConfig+0x20a>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a1c      	ldr	r2, [pc, #112]	; (8007aac <UART_AdvFeatureConfig+0x23c>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d01d      	beq.n	8007a7a <UART_AdvFeatureConfig+0x20a>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a1b      	ldr	r2, [pc, #108]	; (8007ab0 <UART_AdvFeatureConfig+0x240>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d018      	beq.n	8007a7a <UART_AdvFeatureConfig+0x20a>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a19      	ldr	r2, [pc, #100]	; (8007ab4 <UART_AdvFeatureConfig+0x244>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d013      	beq.n	8007a7a <UART_AdvFeatureConfig+0x20a>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a18      	ldr	r2, [pc, #96]	; (8007ab8 <UART_AdvFeatureConfig+0x248>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d00e      	beq.n	8007a7a <UART_AdvFeatureConfig+0x20a>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a16      	ldr	r2, [pc, #88]	; (8007abc <UART_AdvFeatureConfig+0x24c>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d009      	beq.n	8007a7a <UART_AdvFeatureConfig+0x20a>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 8007a6e:	d004      	beq.n	8007a7a <UART_AdvFeatureConfig+0x20a>
 8007a70:	f640 5118 	movw	r1, #3352	; 0xd18
 8007a74:	4808      	ldr	r0, [pc, #32]	; (8007a98 <UART_AdvFeatureConfig+0x228>)
 8007a76:	f7f8 fed6 	bl	8000826 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d01e      	beq.n	8007ac0 <UART_AdvFeatureConfig+0x250>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a8a:	d019      	beq.n	8007ac0 <UART_AdvFeatureConfig+0x250>
 8007a8c:	f640 5119 	movw	r1, #3353	; 0xd19
 8007a90:	4801      	ldr	r0, [pc, #4]	; (8007a98 <UART_AdvFeatureConfig+0x228>)
 8007a92:	f7f8 fec8 	bl	8000826 <assert_failed>
 8007a96:	e013      	b.n	8007ac0 <UART_AdvFeatureConfig+0x250>
 8007a98:	08008574 	.word	0x08008574
 8007a9c:	40013800 	.word	0x40013800
 8007aa0:	50013800 	.word	0x50013800
 8007aa4:	40004400 	.word	0x40004400
 8007aa8:	50004400 	.word	0x50004400
 8007aac:	40004800 	.word	0x40004800
 8007ab0:	50004800 	.word	0x50004800
 8007ab4:	40004c00 	.word	0x40004c00
 8007ab8:	50004c00 	.word	0x50004c00
 8007abc:	40005000 	.word	0x40005000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ade:	d122      	bne.n	8007b26 <UART_AdvFeatureConfig+0x2b6>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d013      	beq.n	8007b10 <UART_AdvFeatureConfig+0x2a0>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007af0:	d00e      	beq.n	8007b10 <UART_AdvFeatureConfig+0x2a0>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007afa:	d009      	beq.n	8007b10 <UART_AdvFeatureConfig+0x2a0>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b04:	d004      	beq.n	8007b10 <UART_AdvFeatureConfig+0x2a0>
 8007b06:	f640 511e 	movw	r1, #3358	; 0xd1e
 8007b0a:	4818      	ldr	r0, [pc, #96]	; (8007b6c <UART_AdvFeatureConfig+0x2fc>)
 8007b0c:	f7f8 fe8b 	bl	8000826 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d018      	beq.n	8007b64 <UART_AdvFeatureConfig+0x2f4>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d009      	beq.n	8007b4e <UART_AdvFeatureConfig+0x2de>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b42:	d004      	beq.n	8007b4e <UART_AdvFeatureConfig+0x2de>
 8007b44:	f640 5126 	movw	r1, #3366	; 0xd26
 8007b48:	4808      	ldr	r0, [pc, #32]	; (8007b6c <UART_AdvFeatureConfig+0x2fc>)
 8007b4a:	f7f8 fe6c 	bl	8000826 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	605a      	str	r2, [r3, #4]
  }
}
 8007b64:	bf00      	nop
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	08008574 	.word	0x08008574

08007b70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b098      	sub	sp, #96	; 0x60
 8007b74:	af02      	add	r7, sp, #8
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b80:	f7f8 fffe 	bl	8000b80 <HAL_GetTick>
 8007b84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0308 	and.w	r3, r3, #8
 8007b90:	2b08      	cmp	r3, #8
 8007b92:	d12f      	bne.n	8007bf4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f88e 	bl	8007cc4 <UART_WaitOnFlagUntilTimeout>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d022      	beq.n	8007bf4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb6:	e853 3f00 	ldrex	r3, [r3]
 8007bba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bc2:	653b      	str	r3, [r7, #80]	; 0x50
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8007bce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bd4:	e841 2300 	strex	r3, r2, [r1]
 8007bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e6      	bne.n	8007bae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e063      	b.n	8007cbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0304 	and.w	r3, r3, #4
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d149      	bne.n	8007c96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f857 	bl	8007cc4 <UART_WaitOnFlagUntilTimeout>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d03c      	beq.n	8007c96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	623b      	str	r3, [r7, #32]
   return(result);
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8007c3c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1e6      	bne.n	8007c1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3308      	adds	r3, #8
 8007c54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f023 0301 	bic.w	r3, r3, #1
 8007c64:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3308      	adds	r3, #8
 8007c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c6e:	61fa      	str	r2, [r7, #28]
 8007c70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	69b9      	ldr	r1, [r7, #24]
 8007c74:	69fa      	ldr	r2, [r7, #28]
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	617b      	str	r3, [r7, #20]
   return(result);
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e5      	bne.n	8007c4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2220      	movs	r2, #32
 8007c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e012      	b.n	8007cbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3758      	adds	r7, #88	; 0x58
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cd4:	e049      	b.n	8007d6a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cdc:	d045      	beq.n	8007d6a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cde:	f7f8 ff4f 	bl	8000b80 <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d302      	bcc.n	8007cf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e048      	b.n	8007d8a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0304 	and.w	r3, r3, #4
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d031      	beq.n	8007d6a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	f003 0308 	and.w	r3, r3, #8
 8007d10:	2b08      	cmp	r3, #8
 8007d12:	d110      	bne.n	8007d36 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2208      	movs	r2, #8
 8007d1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 f838 	bl	8007d92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2208      	movs	r2, #8
 8007d26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e029      	b.n	8007d8a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d44:	d111      	bne.n	8007d6a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 f81e 	bl	8007d92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e00f      	b.n	8007d8a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	69da      	ldr	r2, [r3, #28]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	4013      	ands	r3, r2
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	bf0c      	ite	eq
 8007d7a:	2301      	moveq	r3, #1
 8007d7c:	2300      	movne	r3, #0
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	79fb      	ldrb	r3, [r7, #7]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d0a6      	beq.n	8007cd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b095      	sub	sp, #84	; 0x54
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da2:	e853 3f00 	ldrex	r3, [r3]
 8007da6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007daa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	461a      	mov	r2, r3
 8007db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007db8:	643b      	str	r3, [r7, #64]	; 0x40
 8007dba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dc0:	e841 2300 	strex	r3, r2, [r1]
 8007dc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1e6      	bne.n	8007d9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007de2:	f023 0301 	bic.w	r3, r3, #1
 8007de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3308      	adds	r3, #8
 8007dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007df0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007df8:	e841 2300 	strex	r3, r2, [r1]
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1e3      	bne.n	8007dcc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d118      	bne.n	8007e3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	e853 3f00 	ldrex	r3, [r3]
 8007e18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	f023 0310 	bic.w	r3, r3, #16
 8007e20:	647b      	str	r3, [r7, #68]	; 0x44
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e2a:	61bb      	str	r3, [r7, #24]
 8007e2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	6979      	ldr	r1, [r7, #20]
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	613b      	str	r3, [r7, #16]
   return(result);
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e6      	bne.n	8007e0c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007e52:	bf00      	nop
 8007e54:	3754      	adds	r7, #84	; 0x54
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b084      	sub	sp, #16
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f7ff fa5d 	bl	800733c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e82:	bf00      	nop
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b088      	sub	sp, #32
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ea6:	61fb      	str	r3, [r7, #28]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	61bb      	str	r3, [r7, #24]
 8007eb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	6979      	ldr	r1, [r7, #20]
 8007eb6:	69ba      	ldr	r2, [r7, #24]
 8007eb8:	e841 2300 	strex	r3, r2, [r1]
 8007ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e6      	bne.n	8007e92 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7ff fa28 	bl	8007328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ed8:	bf00      	nop
 8007eda:	3720      	adds	r7, #32
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a38      	ldr	r2, [pc, #224]	; (8007ff8 <HAL_UARTEx_DisableFifoMode+0xf0>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d03b      	beq.n	8007f92 <HAL_UARTEx_DisableFifoMode+0x8a>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a37      	ldr	r2, [pc, #220]	; (8007ffc <HAL_UARTEx_DisableFifoMode+0xf4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d036      	beq.n	8007f92 <HAL_UARTEx_DisableFifoMode+0x8a>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a35      	ldr	r2, [pc, #212]	; (8008000 <HAL_UARTEx_DisableFifoMode+0xf8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d031      	beq.n	8007f92 <HAL_UARTEx_DisableFifoMode+0x8a>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a34      	ldr	r2, [pc, #208]	; (8008004 <HAL_UARTEx_DisableFifoMode+0xfc>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d02c      	beq.n	8007f92 <HAL_UARTEx_DisableFifoMode+0x8a>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a32      	ldr	r2, [pc, #200]	; (8008008 <HAL_UARTEx_DisableFifoMode+0x100>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d027      	beq.n	8007f92 <HAL_UARTEx_DisableFifoMode+0x8a>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a31      	ldr	r2, [pc, #196]	; (800800c <HAL_UARTEx_DisableFifoMode+0x104>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d022      	beq.n	8007f92 <HAL_UARTEx_DisableFifoMode+0x8a>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a2f      	ldr	r2, [pc, #188]	; (8008010 <HAL_UARTEx_DisableFifoMode+0x108>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d01d      	beq.n	8007f92 <HAL_UARTEx_DisableFifoMode+0x8a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a2e      	ldr	r2, [pc, #184]	; (8008014 <HAL_UARTEx_DisableFifoMode+0x10c>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d018      	beq.n	8007f92 <HAL_UARTEx_DisableFifoMode+0x8a>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a2c      	ldr	r2, [pc, #176]	; (8008018 <HAL_UARTEx_DisableFifoMode+0x110>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d013      	beq.n	8007f92 <HAL_UARTEx_DisableFifoMode+0x8a>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 8007f72:	d00e      	beq.n	8007f92 <HAL_UARTEx_DisableFifoMode+0x8a>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a28      	ldr	r2, [pc, #160]	; (800801c <HAL_UARTEx_DisableFifoMode+0x114>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d009      	beq.n	8007f92 <HAL_UARTEx_DisableFifoMode+0x8a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a27      	ldr	r2, [pc, #156]	; (8008020 <HAL_UARTEx_DisableFifoMode+0x118>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d004      	beq.n	8007f92 <HAL_UARTEx_DisableFifoMode+0x8a>
 8007f88:	f240 211f 	movw	r1, #543	; 0x21f
 8007f8c:	4825      	ldr	r0, [pc, #148]	; (8008024 <HAL_UARTEx_DisableFifoMode+0x11c>)
 8007f8e:	f7f8 fc4a 	bl	8000826 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_UARTEx_DisableFifoMode+0x98>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e027      	b.n	8007ff0 <HAL_UARTEx_DisableFifoMode+0xe8>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2224      	movs	r2, #36	; 0x24
 8007fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f022 0201 	bic.w	r2, r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007fce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	40013800 	.word	0x40013800
 8007ffc:	50013800 	.word	0x50013800
 8008000:	40004400 	.word	0x40004400
 8008004:	50004400 	.word	0x50004400
 8008008:	40004800 	.word	0x40004800
 800800c:	50004800 	.word	0x50004800
 8008010:	40004c00 	.word	0x40004c00
 8008014:	50004c00 	.word	0x50004c00
 8008018:	40005000 	.word	0x40005000
 800801c:	46002400 	.word	0x46002400
 8008020:	56002400 	.word	0x56002400
 8008024:	080085b0 	.word	0x080085b0

08008028 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a4a      	ldr	r2, [pc, #296]	; (8008160 <HAL_UARTEx_SetTxFifoThreshold+0x138>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d03b      	beq.n	80080b4 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a48      	ldr	r2, [pc, #288]	; (8008164 <HAL_UARTEx_SetTxFifoThreshold+0x13c>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d036      	beq.n	80080b4 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a47      	ldr	r2, [pc, #284]	; (8008168 <HAL_UARTEx_SetTxFifoThreshold+0x140>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d031      	beq.n	80080b4 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a45      	ldr	r2, [pc, #276]	; (800816c <HAL_UARTEx_SetTxFifoThreshold+0x144>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d02c      	beq.n	80080b4 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a44      	ldr	r2, [pc, #272]	; (8008170 <HAL_UARTEx_SetTxFifoThreshold+0x148>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d027      	beq.n	80080b4 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a42      	ldr	r2, [pc, #264]	; (8008174 <HAL_UARTEx_SetTxFifoThreshold+0x14c>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d022      	beq.n	80080b4 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a41      	ldr	r2, [pc, #260]	; (8008178 <HAL_UARTEx_SetTxFifoThreshold+0x150>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d01d      	beq.n	80080b4 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a3f      	ldr	r2, [pc, #252]	; (800817c <HAL_UARTEx_SetTxFifoThreshold+0x154>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d018      	beq.n	80080b4 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a3e      	ldr	r2, [pc, #248]	; (8008180 <HAL_UARTEx_SetTxFifoThreshold+0x158>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d013      	beq.n	80080b4 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 8008094:	d00e      	beq.n	80080b4 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a3a      	ldr	r2, [pc, #232]	; (8008184 <HAL_UARTEx_SetTxFifoThreshold+0x15c>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d009      	beq.n	80080b4 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a38      	ldr	r2, [pc, #224]	; (8008188 <HAL_UARTEx_SetTxFifoThreshold+0x160>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d004      	beq.n	80080b4 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 80080aa:	f240 214d 	movw	r1, #589	; 0x24d
 80080ae:	4837      	ldr	r0, [pc, #220]	; (800818c <HAL_UARTEx_SetTxFifoThreshold+0x164>)
 80080b0:	f7f8 fbb9 	bl	8000826 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d018      	beq.n	80080ec <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080c0:	d014      	beq.n	80080ec <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c8:	d010      	beq.n	80080ec <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80080d0:	d00c      	beq.n	80080ec <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080d8:	d008      	beq.n	80080ec <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 80080e0:	d004      	beq.n	80080ec <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 80080e2:	f240 214e 	movw	r1, #590	; 0x24e
 80080e6:	4829      	ldr	r0, [pc, #164]	; (800818c <HAL_UARTEx_SetTxFifoThreshold+0x164>)
 80080e8:	f7f8 fb9d 	bl	8000826 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d101      	bne.n	80080fa <HAL_UARTEx_SetTxFifoThreshold+0xd2>
 80080f6:	2302      	movs	r3, #2
 80080f8:	e02d      	b.n	8008156 <HAL_UARTEx_SetTxFifoThreshold+0x12e>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2224      	movs	r2, #36	; 0x24
 8008106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0201 	bic.w	r2, r2, #1
 8008120:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f8de 	bl	80082f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2220      	movs	r2, #32
 8008148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	40013800 	.word	0x40013800
 8008164:	50013800 	.word	0x50013800
 8008168:	40004400 	.word	0x40004400
 800816c:	50004400 	.word	0x50004400
 8008170:	40004800 	.word	0x40004800
 8008174:	50004800 	.word	0x50004800
 8008178:	40004c00 	.word	0x40004c00
 800817c:	50004c00 	.word	0x50004c00
 8008180:	40005000 	.word	0x40005000
 8008184:	46002400 	.word	0x46002400
 8008188:	56002400 	.word	0x56002400
 800818c:	080085b0 	.word	0x080085b0

08008190 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a4a      	ldr	r2, [pc, #296]	; (80082c8 <HAL_UARTEx_SetRxFifoThreshold+0x138>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d03b      	beq.n	800821c <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a48      	ldr	r2, [pc, #288]	; (80082cc <HAL_UARTEx_SetRxFifoThreshold+0x13c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d036      	beq.n	800821c <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a47      	ldr	r2, [pc, #284]	; (80082d0 <HAL_UARTEx_SetRxFifoThreshold+0x140>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d031      	beq.n	800821c <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a45      	ldr	r2, [pc, #276]	; (80082d4 <HAL_UARTEx_SetRxFifoThreshold+0x144>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d02c      	beq.n	800821c <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a44      	ldr	r2, [pc, #272]	; (80082d8 <HAL_UARTEx_SetRxFifoThreshold+0x148>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d027      	beq.n	800821c <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a42      	ldr	r2, [pc, #264]	; (80082dc <HAL_UARTEx_SetRxFifoThreshold+0x14c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d022      	beq.n	800821c <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a41      	ldr	r2, [pc, #260]	; (80082e0 <HAL_UARTEx_SetRxFifoThreshold+0x150>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d01d      	beq.n	800821c <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a3f      	ldr	r2, [pc, #252]	; (80082e4 <HAL_UARTEx_SetRxFifoThreshold+0x154>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d018      	beq.n	800821c <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a3e      	ldr	r2, [pc, #248]	; (80082e8 <HAL_UARTEx_SetRxFifoThreshold+0x158>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d013      	beq.n	800821c <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 80081fc:	d00e      	beq.n	800821c <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a3a      	ldr	r2, [pc, #232]	; (80082ec <HAL_UARTEx_SetRxFifoThreshold+0x15c>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d009      	beq.n	800821c <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a38      	ldr	r2, [pc, #224]	; (80082f0 <HAL_UARTEx_SetRxFifoThreshold+0x160>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d004      	beq.n	800821c <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 8008212:	f240 217e 	movw	r1, #638	; 0x27e
 8008216:	4837      	ldr	r0, [pc, #220]	; (80082f4 <HAL_UARTEx_SetRxFifoThreshold+0x164>)
 8008218:	f7f8 fb05 	bl	8000826 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d018      	beq.n	8008254 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008228:	d014      	beq.n	8008254 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008230:	d010      	beq.n	8008254 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8008238:	d00c      	beq.n	8008254 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008240:	d008      	beq.n	8008254 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8008248:	d004      	beq.n	8008254 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 800824a:	f240 217f 	movw	r1, #639	; 0x27f
 800824e:	4829      	ldr	r0, [pc, #164]	; (80082f4 <HAL_UARTEx_SetRxFifoThreshold+0x164>)
 8008250:	f7f8 fae9 	bl	8000826 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800825a:	2b01      	cmp	r3, #1
 800825c:	d101      	bne.n	8008262 <HAL_UARTEx_SetRxFifoThreshold+0xd2>
 800825e:	2302      	movs	r3, #2
 8008260:	e02d      	b.n	80082be <HAL_UARTEx_SetRxFifoThreshold+0x12e>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2224      	movs	r2, #36	; 0x24
 800826e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0201 	bic.w	r2, r2, #1
 8008288:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	430a      	orrs	r2, r1
 800829c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f82a 	bl	80082f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2220      	movs	r2, #32
 80082b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	40013800 	.word	0x40013800
 80082cc:	50013800 	.word	0x50013800
 80082d0:	40004400 	.word	0x40004400
 80082d4:	50004400 	.word	0x50004400
 80082d8:	40004800 	.word	0x40004800
 80082dc:	50004800 	.word	0x50004800
 80082e0:	40004c00 	.word	0x40004c00
 80082e4:	50004c00 	.word	0x50004c00
 80082e8:	40005000 	.word	0x40005000
 80082ec:	46002400 	.word	0x46002400
 80082f0:	56002400 	.word	0x56002400
 80082f4:	080085b0 	.word	0x080085b0

080082f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008304:	2b00      	cmp	r3, #0
 8008306:	d108      	bne.n	800831a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008318:	e031      	b.n	800837e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800831a:	2308      	movs	r3, #8
 800831c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800831e:	2308      	movs	r3, #8
 8008320:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	0e5b      	lsrs	r3, r3, #25
 800832a:	b2db      	uxtb	r3, r3
 800832c:	f003 0307 	and.w	r3, r3, #7
 8008330:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	0f5b      	lsrs	r3, r3, #29
 800833a:	b2db      	uxtb	r3, r3
 800833c:	f003 0307 	and.w	r3, r3, #7
 8008340:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008342:	7bbb      	ldrb	r3, [r7, #14]
 8008344:	7b3a      	ldrb	r2, [r7, #12]
 8008346:	4911      	ldr	r1, [pc, #68]	; (800838c <UARTEx_SetNbDataToProcess+0x94>)
 8008348:	5c8a      	ldrb	r2, [r1, r2]
 800834a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800834e:	7b3a      	ldrb	r2, [r7, #12]
 8008350:	490f      	ldr	r1, [pc, #60]	; (8008390 <UARTEx_SetNbDataToProcess+0x98>)
 8008352:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008354:	fb93 f3f2 	sdiv	r3, r3, r2
 8008358:	b29a      	uxth	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	7b7a      	ldrb	r2, [r7, #13]
 8008364:	4909      	ldr	r1, [pc, #36]	; (800838c <UARTEx_SetNbDataToProcess+0x94>)
 8008366:	5c8a      	ldrb	r2, [r1, r2]
 8008368:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800836c:	7b7a      	ldrb	r2, [r7, #13]
 800836e:	4908      	ldr	r1, [pc, #32]	; (8008390 <UARTEx_SetNbDataToProcess+0x98>)
 8008370:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008372:	fb93 f3f2 	sdiv	r3, r3, r2
 8008376:	b29a      	uxth	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800837e:	bf00      	nop
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	080086dc 	.word	0x080086dc
 8008390:	080086e4 	.word	0x080086e4

08008394 <__libc_init_array>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	4d0d      	ldr	r5, [pc, #52]	; (80083cc <__libc_init_array+0x38>)
 8008398:	2600      	movs	r6, #0
 800839a:	4c0d      	ldr	r4, [pc, #52]	; (80083d0 <__libc_init_array+0x3c>)
 800839c:	1b64      	subs	r4, r4, r5
 800839e:	10a4      	asrs	r4, r4, #2
 80083a0:	42a6      	cmp	r6, r4
 80083a2:	d109      	bne.n	80083b8 <__libc_init_array+0x24>
 80083a4:	4d0b      	ldr	r5, [pc, #44]	; (80083d4 <__libc_init_array+0x40>)
 80083a6:	2600      	movs	r6, #0
 80083a8:	4c0b      	ldr	r4, [pc, #44]	; (80083d8 <__libc_init_array+0x44>)
 80083aa:	f000 f81f 	bl	80083ec <_init>
 80083ae:	1b64      	subs	r4, r4, r5
 80083b0:	10a4      	asrs	r4, r4, #2
 80083b2:	42a6      	cmp	r6, r4
 80083b4:	d105      	bne.n	80083c2 <__libc_init_array+0x2e>
 80083b6:	bd70      	pop	{r4, r5, r6, pc}
 80083b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083bc:	3601      	adds	r6, #1
 80083be:	4798      	blx	r3
 80083c0:	e7ee      	b.n	80083a0 <__libc_init_array+0xc>
 80083c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c6:	3601      	adds	r6, #1
 80083c8:	4798      	blx	r3
 80083ca:	e7f2      	b.n	80083b2 <__libc_init_array+0x1e>
 80083cc:	080086f4 	.word	0x080086f4
 80083d0:	080086f4 	.word	0x080086f4
 80083d4:	080086f4 	.word	0x080086f4
 80083d8:	080086f8 	.word	0x080086f8

080083dc <memset>:
 80083dc:	4402      	add	r2, r0
 80083de:	4603      	mov	r3, r0
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d100      	bne.n	80083e6 <memset+0xa>
 80083e4:	4770      	bx	lr
 80083e6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ea:	e7f9      	b.n	80083e0 <memset+0x4>

080083ec <_init>:
 80083ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ee:	bf00      	nop
 80083f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083f2:	bc08      	pop	{r3}
 80083f4:	469e      	mov	lr, r3
 80083f6:	4770      	bx	lr

080083f8 <_fini>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	bf00      	nop
 80083fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fe:	bc08      	pop	{r3}
 8008400:	469e      	mov	lr, r3
 8008402:	4770      	bx	lr
